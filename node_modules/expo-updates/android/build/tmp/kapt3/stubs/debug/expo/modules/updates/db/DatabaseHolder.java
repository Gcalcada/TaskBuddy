package expo.modules.updates.db;

import java.lang.System;

/**
 * Wrapper class that provides a rudimentary locking mechanism for the database. This allows us to
 * control what high-level operations involving the database can occur simultaneously. Most classes
 * should access [UpdatesDatabase] through this class.
 *
 * Any process that calls `getDatabase` *must* manually release the lock by calling
 * `releaseDatabase` in every possible case (success, error) as soon as it is finished.
 *
 * On iOS we use GCD queues as a more sophisticated way of achieving the same thing; we may also
 * eventually want to migrate to a coroutine- or [Handler]-based system in lieu of this class.
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000 \n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0002\u0018\u0000 \f2\u00020\u0001:\u0001\fB\r\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0004J\u0006\u0010\n\u001a\u00020\u000bR\u0011\u0010\u0005\u001a\u00020\u00038F\u00a2\u0006\u0006\u001a\u0004\b\u0006\u0010\u0007R\u000e\u0010\b\u001a\u00020\tX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0002\u001a\u00020\u0003X\u0082\u0004\u00a2\u0006\u0002\n\u0000\u00a8\u0006\r"}, d2 = {"Lexpo/modules/updates/db/DatabaseHolder;", "", "mDatabase", "Lexpo/modules/updates/db/UpdatesDatabase;", "(Lexpo/modules/updates/db/UpdatesDatabase;)V", "database", "getDatabase", "()Lexpo/modules/updates/db/UpdatesDatabase;", "isInUse", "", "releaseDatabase", "", "Companion", "expo-updates_debug"})
public final class DatabaseHolder {
    private final expo.modules.updates.db.UpdatesDatabase mDatabase = null;
    private boolean isInUse = false;
    @org.jetbrains.annotations.NotNull
    public static final expo.modules.updates.db.DatabaseHolder.Companion Companion = null;
    private static final java.lang.String TAG = null;
    
    public DatabaseHolder(@org.jetbrains.annotations.NotNull
    expo.modules.updates.db.UpdatesDatabase mDatabase) {
        super();
    }
    
    @org.jetbrains.annotations.NotNull
    @kotlin.jvm.Synchronized
    public final synchronized expo.modules.updates.db.UpdatesDatabase getDatabase() {
        return null;
    }
    
    @kotlin.jvm.Synchronized
    public final synchronized void releaseDatabase() {
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u0014\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0002\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002R\u0016\u0010\u0003\u001a\n \u0005*\u0004\u0018\u00010\u00040\u0004X\u0082\u0004\u00a2\u0006\u0002\n\u0000\u00a8\u0006\u0006"}, d2 = {"Lexpo/modules/updates/db/DatabaseHolder$Companion;", "", "()V", "TAG", "", "kotlin.jvm.PlatformType", "expo-updates_debug"})
    public static final class Companion {
        
        private Companion() {
            super();
        }
    }
}