package expo.modules.updates.db.dao;

import java.lang.System;

/**
 * Utility class for accessing and modifying data in the `json_data` SQLite table.
 */
@androidx.room.Dao
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000<\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0002\b\u0005\n\u0002\u0010$\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\b\'\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J\u0018\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u00062\u0006\u0010\u0007\u001a\u00020\u0006H\'J\u0010\u0010\b\u001a\u00020\u00042\u0006\u0010\t\u001a\u00020\nH\'J\u001e\u0010\u000b\u001a\b\u0012\u0004\u0012\u00020\n0\f2\u0006\u0010\u0005\u001a\u00020\u00062\u0006\u0010\u0007\u001a\u00020\u0006H\'J\u0018\u0010\r\u001a\u0004\u0018\u00010\u00062\u0006\u0010\u0005\u001a\u00020\u00062\u0006\u0010\u0007\u001a\u00020\u0006J \u0010\u000e\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u00062\u0006\u0010\u000f\u001a\u00020\u00062\u0006\u0010\u0007\u001a\u00020\u0006H\u0017J$\u0010\u0010\u001a\u00020\u00042\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00060\u00122\u0006\u0010\u0007\u001a\u00020\u0006H\u0017J=\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u00062\u0006\u0010\u0007\u001a\u00020\u00062#\u0010\u0014\u001a\u001f\u0012\u0015\u0012\u0013\u0018\u00010\u0006\u00a2\u0006\f\b\u0016\u0012\b\b\u0017\u0012\u0004\b\b(\u0018\u0012\u0004\u0012\u00020\u00060\u0015H\u0017\u00a8\u0006\u0019"}, d2 = {"Lexpo/modules/updates/db/dao/JSONDataDao;", "", "()V", "_deleteJSONDataForKey", "", "key", "", "scopeKey", "_insertJSONData", "jsonDataEntity", "Lexpo/modules/updates/db/entity/JSONDataEntity;", "_loadJSONDataForKey", "", "loadJSONStringForKey", "setJSONStringForKey", "value", "setMultipleFields", "fields", "", "updateJSONStringForKey", "updater", "Lkotlin/Function1;", "Lkotlin/ParameterName;", "name", "previousValue", "expo-updates_debug"})
public abstract class JSONDataDao {
    
    public JSONDataDao() {
        super();
    }
    
    /**
     * for private use only
     * must be marked public for Room
     * so we use the underscore to discourage use
     */
    @org.jetbrains.annotations.NotNull
    @androidx.room.Query(value = "SELECT * FROM json_data WHERE `key` = :key AND scope_key = :scopeKey ORDER BY last_updated DESC LIMIT 1;")
    public abstract java.util.List<expo.modules.updates.db.entity.JSONDataEntity> _loadJSONDataForKey(@org.jetbrains.annotations.NotNull
    java.lang.String key, @org.jetbrains.annotations.NotNull
    java.lang.String scopeKey);
    
    @androidx.room.Insert
    public abstract void _insertJSONData(@org.jetbrains.annotations.NotNull
    expo.modules.updates.db.entity.JSONDataEntity jsonDataEntity);
    
    @androidx.room.Query(value = "DELETE FROM json_data WHERE `key` = :key AND scope_key = :scopeKey;")
    public abstract void _deleteJSONDataForKey(@org.jetbrains.annotations.NotNull
    java.lang.String key, @org.jetbrains.annotations.NotNull
    java.lang.String scopeKey);
    
    /**
     * for public use
     */
    @org.jetbrains.annotations.Nullable
    public final java.lang.String loadJSONStringForKey(@org.jetbrains.annotations.NotNull
    java.lang.String key, @org.jetbrains.annotations.NotNull
    java.lang.String scopeKey) {
        return null;
    }
    
    @androidx.room.Transaction
    public void setJSONStringForKey(@org.jetbrains.annotations.NotNull
    java.lang.String key, @org.jetbrains.annotations.NotNull
    java.lang.String value, @org.jetbrains.annotations.NotNull
    java.lang.String scopeKey) {
    }
    
    @androidx.room.Transaction
    public void setMultipleFields(@org.jetbrains.annotations.NotNull
    java.util.Map<java.lang.String, java.lang.String> fields, @org.jetbrains.annotations.NotNull
    java.lang.String scopeKey) {
    }
    
    @androidx.room.Transaction
    public void updateJSONStringForKey(@org.jetbrains.annotations.NotNull
    java.lang.String key, @org.jetbrains.annotations.NotNull
    java.lang.String scopeKey, @org.jetbrains.annotations.NotNull
    kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.String> updater) {
    }
}