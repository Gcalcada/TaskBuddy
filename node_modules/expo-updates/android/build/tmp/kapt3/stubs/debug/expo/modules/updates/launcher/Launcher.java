package expo.modules.updates.launcher;

import java.lang.System;

/**
 * Provides an interface through which an update can be launched from disk. Classes that implement
 * this interface are responsible for selecting an eligible update to launch, ensuring all
 * required assets are present, and providing the fields here.
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000.\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0003\n\u0002\u0010\u000b\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010$\n\u0002\u0018\u0002\n\u0002\b\u0004\bf\u0018\u00002\u00020\u0001:\u0001\u0014R\u0014\u0010\u0002\u001a\u0004\u0018\u00010\u0003X\u00a6\u0004\u00a2\u0006\u0006\u001a\u0004\b\u0004\u0010\u0005R\u0012\u0010\u0006\u001a\u00020\u0007X\u00a6\u0004\u00a2\u0006\u0006\u001a\u0004\b\u0006\u0010\bR\u0014\u0010\t\u001a\u0004\u0018\u00010\u0003X\u00a6\u0004\u00a2\u0006\u0006\u001a\u0004\b\n\u0010\u0005R\u0014\u0010\u000b\u001a\u0004\u0018\u00010\fX\u00a6\u0004\u00a2\u0006\u0006\u001a\u0004\b\r\u0010\u000eR \u0010\u000f\u001a\u0010\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u0003\u0018\u00010\u0010X\u00a6\u0004\u00a2\u0006\u0006\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u0015"}, d2 = {"Lexpo/modules/updates/launcher/Launcher;", "", "bundleAssetName", "", "getBundleAssetName", "()Ljava/lang/String;", "isUsingEmbeddedAssets", "", "()Z", "launchAssetFile", "getLaunchAssetFile", "launchedUpdate", "Lexpo/modules/updates/db/entity/UpdateEntity;", "getLaunchedUpdate", "()Lexpo/modules/updates/db/entity/UpdateEntity;", "localAssetFiles", "", "Lexpo/modules/updates/db/entity/AssetEntity;", "getLocalAssetFiles", "()Ljava/util/Map;", "LauncherCallback", "expo-updates_debug"})
public abstract interface Launcher {
    
    @org.jetbrains.annotations.Nullable
    public abstract expo.modules.updates.db.entity.UpdateEntity getLaunchedUpdate();
    
    /**
     * Used by React Native to launch the app when the launch asset (JS bundle or HBC) is located on
     * the device's file system.
     */
    @org.jetbrains.annotations.Nullable
    public abstract java.lang.String getLaunchAssetFile();
    
    /**
     * Used by React Native to launch the app when the launch asset (JS bundle or HBC) is embedded in
     * the application package.
     */
    @org.jetbrains.annotations.Nullable
    public abstract java.lang.String getBundleAssetName();
    
    /**
     * Exported to JS through [UpdatesModule] for use by the expo-asset package. Used to map
     * references to `require`d assets to files on disk.
     */
    @org.jetbrains.annotations.Nullable
    public abstract java.util.Map<expo.modules.updates.db.entity.AssetEntity, java.lang.String> getLocalAssetFiles();
    
    /**
     * Exported to JS through [UpdatesModule] for use by the expo-asset package. Used to determine
     * whether to map references to `require`d assets to files embedded in the application package.
     */
    public abstract boolean isUsingEmbeddedAssets();
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u001c\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u00002\u00020\u0001J\u0014\u0010\u0002\u001a\u00020\u00032\n\u0010\u0004\u001a\u00060\u0005j\u0002`\u0006H&J\b\u0010\u0007\u001a\u00020\u0003H&\u00a8\u0006\b"}, d2 = {"Lexpo/modules/updates/launcher/Launcher$LauncherCallback;", "", "onFailure", "", "e", "Ljava/lang/Exception;", "Lkotlin/Exception;", "onSuccess", "expo-updates_debug"})
    public static abstract interface LauncherCallback {
        
        public abstract void onFailure(@org.jetbrains.annotations.NotNull
        java.lang.Exception e);
        
        public abstract void onSuccess();
    }
}