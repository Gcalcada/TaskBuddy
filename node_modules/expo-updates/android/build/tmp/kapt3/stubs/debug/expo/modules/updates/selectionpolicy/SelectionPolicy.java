package expo.modules.updates.selectionpolicy;

import java.lang.System;

/**
 * Pluggable class whose essential responsibility is to determine an ordering of the updates stored
 * locally. Ordering updates is important in three separate cases, which map to the three methods
 * here.
 *
 * The default/basic implementations of these methods use an ordering based on `commitTime` (with
 * allowances for EAS Update branches). This class was designed to be pluggable in order to allow
 * different implementations to be swapped in with relative ease, in situations with different
 * tradeoffs.
 *
 * The three methods are individually pluggable to allow for different behavior of specific parts of
 * the module in different situations. For example, in a development client, our policy for
 * retaining and deleting updates is different than in a release build, so we use a different
 * implementation of [ReaperSelectionPolicy].
 *
 * Importantly (and non-trivially), expo-updates must be able to make all these determinations
 * without talking to any server. This is because the embedded update can change at any time,
 * without warning, and without the opportunity to talk to the updates server - when a new build is
 * installed via the Play Store/sideloading - and this class must be able to decide which update to
 * launch in that case.
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000B\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\u0018\u00002\u00020\u0001B\u001d\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0005\u0012\u0006\u0010\u0006\u001a\u00020\u0007\u00a2\u0006\u0002\u0010\bJ \u0010\u000f\u001a\u0004\u0018\u00010\u00102\f\u0010\u0011\u001a\b\u0012\u0004\u0012\u00020\u00100\u00122\b\u0010\u0013\u001a\u0004\u0018\u00010\u0014J,\u0010\u0015\u001a\b\u0012\u0004\u0012\u00020\u00100\u00122\f\u0010\u0011\u001a\b\u0012\u0004\u0012\u00020\u00100\u00122\u0006\u0010\u0016\u001a\u00020\u00102\b\u0010\u0013\u001a\u0004\u0018\u00010\u0014J$\u0010\u0017\u001a\u00020\u00182\b\u0010\u0019\u001a\u0004\u0018\u00010\u00102\b\u0010\u0016\u001a\u0004\u0018\u00010\u00102\b\u0010\u0013\u001a\u0004\u0018\u00010\u0014J*\u0010\u001a\u001a\u00020\u00182\u0006\u0010\u001b\u001a\u00020\u001c2\u0006\u0010\u001d\u001a\u00020\u00102\b\u0010\u0016\u001a\u0004\u0018\u00010\u00102\b\u0010\u0013\u001a\u0004\u0018\u00010\u0014R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\t\u0010\nR\u0011\u0010\u0004\u001a\u00020\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR\u0011\u0010\u0006\u001a\u00020\u0007\u00a2\u0006\b\n\u0000\u001a\u0004\b\r\u0010\u000e\u00a8\u0006\u001e"}, d2 = {"Lexpo/modules/updates/selectionpolicy/SelectionPolicy;", "", "launcherSelectionPolicy", "Lexpo/modules/updates/selectionpolicy/LauncherSelectionPolicy;", "loaderSelectionPolicy", "Lexpo/modules/updates/selectionpolicy/LoaderSelectionPolicy;", "reaperSelectionPolicy", "Lexpo/modules/updates/selectionpolicy/ReaperSelectionPolicy;", "(Lexpo/modules/updates/selectionpolicy/LauncherSelectionPolicy;Lexpo/modules/updates/selectionpolicy/LoaderSelectionPolicy;Lexpo/modules/updates/selectionpolicy/ReaperSelectionPolicy;)V", "getLauncherSelectionPolicy", "()Lexpo/modules/updates/selectionpolicy/LauncherSelectionPolicy;", "getLoaderSelectionPolicy", "()Lexpo/modules/updates/selectionpolicy/LoaderSelectionPolicy;", "getReaperSelectionPolicy", "()Lexpo/modules/updates/selectionpolicy/ReaperSelectionPolicy;", "selectUpdateToLaunch", "Lexpo/modules/updates/db/entity/UpdateEntity;", "updates", "", "filters", "Lorg/json/JSONObject;", "selectUpdatesToDelete", "launchedUpdate", "shouldLoadNewUpdate", "", "newUpdate", "shouldLoadRollBackToEmbeddedDirective", "directive", "Lexpo/modules/updates/loader/UpdateDirective$RollBackToEmbeddedUpdateDirective;", "embeddedUpdate", "expo-updates_debug"})
public final class SelectionPolicy {
    @org.jetbrains.annotations.NotNull
    private final expo.modules.updates.selectionpolicy.LauncherSelectionPolicy launcherSelectionPolicy = null;
    @org.jetbrains.annotations.NotNull
    private final expo.modules.updates.selectionpolicy.LoaderSelectionPolicy loaderSelectionPolicy = null;
    @org.jetbrains.annotations.NotNull
    private final expo.modules.updates.selectionpolicy.ReaperSelectionPolicy reaperSelectionPolicy = null;
    
    public SelectionPolicy(@org.jetbrains.annotations.NotNull
    expo.modules.updates.selectionpolicy.LauncherSelectionPolicy launcherSelectionPolicy, @org.jetbrains.annotations.NotNull
    expo.modules.updates.selectionpolicy.LoaderSelectionPolicy loaderSelectionPolicy, @org.jetbrains.annotations.NotNull
    expo.modules.updates.selectionpolicy.ReaperSelectionPolicy reaperSelectionPolicy) {
        super();
    }
    
    @org.jetbrains.annotations.NotNull
    public final expo.modules.updates.selectionpolicy.LauncherSelectionPolicy getLauncherSelectionPolicy() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    public final expo.modules.updates.selectionpolicy.LoaderSelectionPolicy getLoaderSelectionPolicy() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    public final expo.modules.updates.selectionpolicy.ReaperSelectionPolicy getReaperSelectionPolicy() {
        return null;
    }
    
    /**
     * Given a list of updates, decide which one should be launched (i.e. pick the "newest" update
     * based on this class's ordering).
     */
    @org.jetbrains.annotations.Nullable
    public final expo.modules.updates.db.entity.UpdateEntity selectUpdateToLaunch(@org.jetbrains.annotations.NotNull
    java.util.List<expo.modules.updates.db.entity.UpdateEntity> updates, @org.jetbrains.annotations.Nullable
    org.json.JSONObject filters) {
        return null;
    }
    
    /**
     * Given a list of updates along with a currently running update, decide which ones should be
     * deleted from the database / disk (i.e. pick the updates that are sufficiently "older" than the
     * currently running update, according to this class's ordering).
     */
    @org.jetbrains.annotations.NotNull
    public final java.util.List<expo.modules.updates.db.entity.UpdateEntity> selectUpdatesToDelete(@org.jetbrains.annotations.NotNull
    java.util.List<expo.modules.updates.db.entity.UpdateEntity> updates, @org.jetbrains.annotations.NotNull
    expo.modules.updates.db.entity.UpdateEntity launchedUpdate, @org.jetbrains.annotations.Nullable
    org.json.JSONObject filters) {
        return null;
    }
    
    /**
     * Given a new update along with a currently running update, decide whether the new update should
     * be loaded into the database (i.e. decide whether or not the new update is "newer" than the
     * currently running update, according to this class's ordering).
     */
    public final boolean shouldLoadNewUpdate(@org.jetbrains.annotations.Nullable
    expo.modules.updates.db.entity.UpdateEntity newUpdate, @org.jetbrains.annotations.Nullable
    expo.modules.updates.db.entity.UpdateEntity launchedUpdate, @org.jetbrains.annotations.Nullable
    org.json.JSONObject filters) {
        return false;
    }
    
    /**
     * Given a roll back to embedded directive, the embedded update before the directive is applied,
     * and the currently running update, decide whether the directive should be applied to the embedded
     * update and saved in the database (i.e. decide whether the combination of the directive's commitTime
     * and the embedded update is "newer" than the currently running update, according to this class's ordering).
     */
    public final boolean shouldLoadRollBackToEmbeddedDirective(@org.jetbrains.annotations.NotNull
    expo.modules.updates.loader.UpdateDirective.RollBackToEmbeddedUpdateDirective directive, @org.jetbrains.annotations.NotNull
    expo.modules.updates.db.entity.UpdateEntity embeddedUpdate, @org.jetbrains.annotations.Nullable
    expo.modules.updates.db.entity.UpdateEntity launchedUpdate, @org.jetbrains.annotations.Nullable
    org.json.JSONObject filters) {
        return false;
    }
}