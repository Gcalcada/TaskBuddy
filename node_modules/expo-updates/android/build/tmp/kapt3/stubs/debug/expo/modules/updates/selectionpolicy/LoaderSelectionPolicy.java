package expo.modules.updates.selectionpolicy;

import java.lang.System;

/**
 * Implementations of this class should be able to determine whether to load (either fetch remotely
 * or copy from an embedded location) a new update, given information about the one currently
 * running.
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000(\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u000b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u00002\u00020\u0001J&\u0010\u0002\u001a\u00020\u00032\b\u0010\u0004\u001a\u0004\u0018\u00010\u00052\b\u0010\u0006\u001a\u0004\u0018\u00010\u00052\b\u0010\u0007\u001a\u0004\u0018\u00010\bH&J,\u0010\t\u001a\u00020\u00032\u0006\u0010\n\u001a\u00020\u000b2\u0006\u0010\f\u001a\u00020\u00052\b\u0010\u0006\u001a\u0004\u0018\u00010\u00052\b\u0010\u0007\u001a\u0004\u0018\u00010\bH&\u00a8\u0006\r"}, d2 = {"Lexpo/modules/updates/selectionpolicy/LoaderSelectionPolicy;", "", "shouldLoadNewUpdate", "", "newUpdate", "Lexpo/modules/updates/db/entity/UpdateEntity;", "launchedUpdate", "filters", "Lorg/json/JSONObject;", "shouldLoadRollBackToEmbeddedDirective", "directive", "Lexpo/modules/updates/loader/UpdateDirective$RollBackToEmbeddedUpdateDirective;", "embeddedUpdate", "expo-updates_debug"})
public abstract interface LoaderSelectionPolicy {
    
    public abstract boolean shouldLoadNewUpdate(@org.jetbrains.annotations.Nullable
    expo.modules.updates.db.entity.UpdateEntity newUpdate, @org.jetbrains.annotations.Nullable
    expo.modules.updates.db.entity.UpdateEntity launchedUpdate, @org.jetbrains.annotations.Nullable
    org.json.JSONObject filters);
    
    public abstract boolean shouldLoadRollBackToEmbeddedDirective(@org.jetbrains.annotations.NotNull
    expo.modules.updates.loader.UpdateDirective.RollBackToEmbeddedUpdateDirective directive, @org.jetbrains.annotations.NotNull
    expo.modules.updates.db.entity.UpdateEntity embeddedUpdate, @org.jetbrains.annotations.Nullable
    expo.modules.updates.db.entity.UpdateEntity launchedUpdate, @org.jetbrains.annotations.Nullable
    org.json.JSONObject filters);
}