package expo.modules.updates.loader;

import java.lang.System;

/**
 * Controlling class that handles the complex logic that needs to happen each time the app is cold
 * booted. From a high level, this class does the following:
 *
 * - Immediately starts an instance of [EmbeddedLoader] to load the embedded update into SQLite.
 *  This does nothing if SQLite already has the embedded update or a newer one, but we have to do
 *  this on each cold boot, as we have no way of knowing if a new build was just installed (which
 *  could have a new embedded update).
 * - If the app is configured for automatic update downloads (most apps), starts a timer based on
 *  the `launchWaitMs` value in [UpdatesConfiguration].
 * - Again if the app is configured for automatic update downloads, starts an instance of
 *  [RemoteLoader] to check for and download a new update if there is one.
 * - Once the download succeeds, fails, or the timer runs out (whichever happens first), creates an
 *  instance of [DatabaseLauncher] and signals that the app is ready to be launched with the newest
 *  update available locally at that time (which may not be the newest update if the download is
 *  still in progress).
 * - If the download succeeds or fails after this point, fires a callback which causes an event to
 *  be sent to JS.
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000f\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0007\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u000e\u0018\u0000 -2\u00020\u0001:\u0006-./012B5\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0005\u0012\u0006\u0010\u0006\u001a\u00020\u0007\u0012\u0006\u0010\b\u001a\u00020\t\u0012\u0006\u0010\n\u001a\u00020\u000b\u0012\u0006\u0010\f\u001a\u00020\r\u00a2\u0006\u0002\u0010\u000eJ\u0018\u0010\u001c\u001a\u00020\u001d2\u000e\u0010\u001e\u001a\n\u0018\u00010\u001fj\u0004\u0018\u0001` H\u0002J\u0018\u0010!\u001a\u00020\u001d2\u0006\u0010\"\u001a\u00020#2\u0006\u0010$\u001a\u00020%H\u0002J\u0018\u0010&\u001a\u00020\u001d2\u0006\u0010\"\u001a\u00020#2\u0006\u0010\'\u001a\u00020%H\u0002J\b\u0010(\u001a\u00020\u001dH\u0002J\b\u0010)\u001a\u00020\u001dH\u0002J\u000e\u0010*\u001a\u00020\u001d2\u0006\u0010\"\u001a\u00020#J\b\u0010+\u001a\u00020\u001dH\u0002J\b\u0010,\u001a\u00020\u001dH\u0002R\u000e\u0010\f\u001a\u00020\rX\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u0010\u0010\u000f\u001a\u0004\u0018\u00010\u0010X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0002\u001a\u00020\u0003X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0004\u001a\u00020\u0005X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0006\u001a\u00020\u0007X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u000e\u0010\b\u001a\u00020\tX\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u0010\u0010\u0011\u001a\u0004\u0018\u00010\u0010X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0012\u001a\u00020\u0013X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0014\u001a\u00020\u0015X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0016\u001a\u00020\u0015X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u001e\u0010\u0018\u001a\u00020\u00152\u0006\u0010\u0017\u001a\u00020\u0015@BX\u0086\u000e\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0018\u0010\u0019R\u000e\u0010\u001a\u001a\u00020\u0015X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010\n\u001a\u00020\u000bX\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u001b\u001a\u00020\u0015X\u0082\u000e\u00a2\u0006\u0002\n\u0000\u00a8\u00063"}, d2 = {"Lexpo/modules/updates/loader/LoaderTask;", "", "configuration", "Lexpo/modules/updates/UpdatesConfiguration;", "databaseHolder", "Lexpo/modules/updates/db/DatabaseHolder;", "directory", "Ljava/io/File;", "fileDownloader", "Lexpo/modules/updates/loader/FileDownloader;", "selectionPolicy", "Lexpo/modules/updates/selectionpolicy/SelectionPolicy;", "callback", "Lexpo/modules/updates/loader/LoaderTask$LoaderTaskCallback;", "(Lexpo/modules/updates/UpdatesConfiguration;Lexpo/modules/updates/db/DatabaseHolder;Ljava/io/File;Lexpo/modules/updates/loader/FileDownloader;Lexpo/modules/updates/selectionpolicy/SelectionPolicy;Lexpo/modules/updates/loader/LoaderTask$LoaderTaskCallback;)V", "candidateLauncher", "Lexpo/modules/updates/launcher/Launcher;", "finalizedLauncher", "handlerThread", "Landroid/os/HandlerThread;", "hasLaunched", "", "isReadyToLaunch", "<set-?>", "isRunning", "()Z", "isUpToDate", "timeoutFinished", "finish", "", "e", "Ljava/lang/Exception;", "Lkotlin/Exception;", "launchFallbackUpdateFromDisk", "context", "Landroid/content/Context;", "diskUpdateCallback", "Lexpo/modules/updates/loader/LoaderTask$LaunchUpdateCallback;", "launchRemoteUpdateInBackground", "remoteUpdateCallback", "maybeFinish", "runReaper", "start", "stopTimer", "timeout", "Companion", "LaunchUpdateCallback", "LoaderTaskCallback", "RemoteCheckResult", "RemoteCheckResultNotAvailableReason", "RemoteUpdateStatus", "expo-updates_debug"})
public final class LoaderTask {
    private final expo.modules.updates.UpdatesConfiguration configuration = null;
    private final expo.modules.updates.db.DatabaseHolder databaseHolder = null;
    private final java.io.File directory = null;
    private final expo.modules.updates.loader.FileDownloader fileDownloader = null;
    private final expo.modules.updates.selectionpolicy.SelectionPolicy selectionPolicy = null;
    private final expo.modules.updates.loader.LoaderTask.LoaderTaskCallback callback = null;
    private boolean isRunning = false;
    private boolean isReadyToLaunch = false;
    private boolean timeoutFinished = false;
    private boolean hasLaunched = false;
    private boolean isUpToDate = false;
    private final android.os.HandlerThread handlerThread = null;
    private expo.modules.updates.launcher.Launcher candidateLauncher;
    private expo.modules.updates.launcher.Launcher finalizedLauncher;
    @org.jetbrains.annotations.NotNull
    public static final expo.modules.updates.loader.LoaderTask.Companion Companion = null;
    private static final java.lang.String TAG = null;
    
    public LoaderTask(@org.jetbrains.annotations.NotNull
    expo.modules.updates.UpdatesConfiguration configuration, @org.jetbrains.annotations.NotNull
    expo.modules.updates.db.DatabaseHolder databaseHolder, @org.jetbrains.annotations.NotNull
    java.io.File directory, @org.jetbrains.annotations.NotNull
    expo.modules.updates.loader.FileDownloader fileDownloader, @org.jetbrains.annotations.NotNull
    expo.modules.updates.selectionpolicy.SelectionPolicy selectionPolicy, @org.jetbrains.annotations.NotNull
    expo.modules.updates.loader.LoaderTask.LoaderTaskCallback callback) {
        super();
    }
    
    public final boolean isRunning() {
        return false;
    }
    
    public final void start(@org.jetbrains.annotations.NotNull
    android.content.Context context) {
    }
    
    /**
     * This method should be called at the end of the LoaderTask. Whether or not the task has
     * successfully loaded an update to launch, the timer will stop and the appropriate callback
     * function will be fired.
     */
    @kotlin.jvm.Synchronized
    private final synchronized void finish(java.lang.Exception e) {
    }
    
    /**
     * This method should be called to conditionally fire the callback. If the task has successfully
     * loaded an update to launch and the timer isn't still running, the appropriate callback function
     * will be fired. If not, no callback will be fired.
     */
    @kotlin.jvm.Synchronized
    private final synchronized void maybeFinish() {
    }
    
    @kotlin.jvm.Synchronized
    private final synchronized void stopTimer() {
    }
    
    @kotlin.jvm.Synchronized
    private final synchronized void timeout() {
    }
    
    private final void launchFallbackUpdateFromDisk(android.content.Context context, expo.modules.updates.loader.LoaderTask.LaunchUpdateCallback diskUpdateCallback) {
    }
    
    private final void launchRemoteUpdateInBackground(android.content.Context context, expo.modules.updates.loader.LoaderTask.LaunchUpdateCallback remoteUpdateCallback) {
    }
    
    private final void runReaper() {
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\u0005\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005\u00a8\u0006\u0006"}, d2 = {"Lexpo/modules/updates/loader/LoaderTask$RemoteUpdateStatus;", "", "(Ljava/lang/String;I)V", "ERROR", "NO_UPDATE_AVAILABLE", "UPDATE_AVAILABLE", "expo-updates_debug"})
    public static enum RemoteUpdateStatus {
        /*public static final*/ ERROR /* = new ERROR() */,
        /*public static final*/ NO_UPDATE_AVAILABLE /* = new NO_UPDATE_AVAILABLE() */,
        /*public static final*/ UPDATE_AVAILABLE /* = new UPDATE_AVAILABLE() */;
        
        RemoteUpdateStatus() {
        }
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u0012\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0000\n\u0002\u0010\u000e\n\u0002\b\t\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u000f\b\u0002\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0004R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0005\u0010\u0006j\u0002\b\u0007j\u0002\b\bj\u0002\b\tj\u0002\b\nj\u0002\b\u000b\u00a8\u0006\f"}, d2 = {"Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResultNotAvailableReason;", "", "value", "", "(Ljava/lang/String;ILjava/lang/String;)V", "getValue", "()Ljava/lang/String;", "NO_UPDATE_AVAILABLE_ON_SERVER", "UPDATE_REJECTED_BY_SELECTION_POLICY", "UPDATE_PREVIOUSLY_FAILED", "ROLLBACK_REJECTED_BY_SELECTION_POLICY", "ROLLBACK_NO_EMBEDDED", "expo-updates_debug"})
    public static enum RemoteCheckResultNotAvailableReason {
        /*public static final*/ NO_UPDATE_AVAILABLE_ON_SERVER /* = new NO_UPDATE_AVAILABLE_ON_SERVER(null) */,
        /*public static final*/ UPDATE_REJECTED_BY_SELECTION_POLICY /* = new UPDATE_REJECTED_BY_SELECTION_POLICY(null) */,
        /*public static final*/ UPDATE_PREVIOUSLY_FAILED /* = new UPDATE_PREVIOUSLY_FAILED(null) */,
        /*public static final*/ ROLLBACK_REJECTED_BY_SELECTION_POLICY /* = new ROLLBACK_REJECTED_BY_SELECTION_POLICY(null) */,
        /*public static final*/ ROLLBACK_NO_EMBEDDED /* = new ROLLBACK_NO_EMBEDDED(null) */;
        @org.jetbrains.annotations.NotNull
        private final java.lang.String value = null;
        
        RemoteCheckResultNotAvailableReason(java.lang.String value) {
        }
        
        @org.jetbrains.annotations.NotNull
        public final java.lang.String getValue() {
            return null;
        }
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000 \n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:\u0004\u0005\u0006\u0007\bB\u000f\b\u0004\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0004R\u000e\u0010\u0002\u001a\u00020\u0003X\u0082\u0004\u00a2\u0006\u0002\n\u0000\u0082\u0001\u0003\t\n\u000b\u00a8\u0006\f"}, d2 = {"Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResult;", "", "status", "Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResult$Status;", "(Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResult$Status;)V", "NoUpdateAvailable", "RollBackToEmbedded", "Status", "UpdateAvailable", "Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResult$NoUpdateAvailable;", "Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResult$RollBackToEmbedded;", "Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResult$UpdateAvailable;", "expo-updates_debug"})
    public static abstract class RemoteCheckResult {
        private final expo.modules.updates.loader.LoaderTask.RemoteCheckResult.Status status = null;
        
        private RemoteCheckResult(expo.modules.updates.loader.LoaderTask.RemoteCheckResult.Status status) {
            super();
        }
        
        @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\u0005\b\u0082\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005\u00a8\u0006\u0006"}, d2 = {"Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResult$Status;", "", "(Ljava/lang/String;I)V", "NO_UPDATE_AVAILABLE", "UPDATE_AVAILABLE", "ROLL_BACK_TO_EMBEDDED", "expo-updates_debug"})
        static enum Status {
            /*public static final*/ NO_UPDATE_AVAILABLE /* = new NO_UPDATE_AVAILABLE() */,
            /*public static final*/ UPDATE_AVAILABLE /* = new UPDATE_AVAILABLE() */,
            /*public static final*/ ROLL_BACK_TO_EMBEDDED /* = new ROLL_BACK_TO_EMBEDDED() */;
            
            Status() {
            }
        }
        
        @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u0012\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\r\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0004R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0005\u0010\u0006\u00a8\u0006\u0007"}, d2 = {"Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResult$NoUpdateAvailable;", "Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResult;", "reason", "Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResultNotAvailableReason;", "(Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResultNotAvailableReason;)V", "getReason", "()Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResultNotAvailableReason;", "expo-updates_debug"})
        public static final class NoUpdateAvailable extends expo.modules.updates.loader.LoaderTask.RemoteCheckResult {
            @org.jetbrains.annotations.NotNull
            private final expo.modules.updates.loader.LoaderTask.RemoteCheckResultNotAvailableReason reason = null;
            
            public NoUpdateAvailable(@org.jetbrains.annotations.NotNull
            expo.modules.updates.loader.LoaderTask.RemoteCheckResultNotAvailableReason reason) {
                super(null);
            }
            
            @org.jetbrains.annotations.NotNull
            public final expo.modules.updates.loader.LoaderTask.RemoteCheckResultNotAvailableReason getReason() {
                return null;
            }
        }
        
        @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u0012\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\r\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0004R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0005\u0010\u0006\u00a8\u0006\u0007"}, d2 = {"Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResult$UpdateAvailable;", "Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResult;", "manifest", "Lorg/json/JSONObject;", "(Lorg/json/JSONObject;)V", "getManifest", "()Lorg/json/JSONObject;", "expo-updates_debug"})
        public static final class UpdateAvailable extends expo.modules.updates.loader.LoaderTask.RemoteCheckResult {
            @org.jetbrains.annotations.NotNull
            private final org.json.JSONObject manifest = null;
            
            public UpdateAvailable(@org.jetbrains.annotations.NotNull
            org.json.JSONObject manifest) {
                super(null);
            }
            
            @org.jetbrains.annotations.NotNull
            public final org.json.JSONObject getManifest() {
                return null;
            }
        }
        
        @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u0012\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\r\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0004R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0005\u0010\u0006\u00a8\u0006\u0007"}, d2 = {"Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResult$RollBackToEmbedded;", "Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResult;", "commitTime", "Ljava/util/Date;", "(Ljava/util/Date;)V", "getCommitTime", "()Ljava/util/Date;", "expo-updates_debug"})
        public static final class RollBackToEmbedded extends expo.modules.updates.loader.LoaderTask.RemoteCheckResult {
            @org.jetbrains.annotations.NotNull
            private final java.util.Date commitTime = null;
            
            public RollBackToEmbedded(@org.jetbrains.annotations.NotNull
            java.util.Date commitTime) {
                super(null);
            }
            
            @org.jetbrains.annotations.NotNull
            public final java.util.Date getCommitTime() {
                return null;
            }
        }
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000V\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u000b\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\b\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u00002\u00020\u0001J\u0010\u0010\u0002\u001a\u00020\u00032\u0006\u0010\u0004\u001a\u00020\u0005H&J\u0014\u0010\u0006\u001a\u00020\u00072\n\u0010\b\u001a\u00060\tj\u0002`\nH&J\b\u0010\u000b\u001a\u00020\u0007H&J\u0010\u0010\f\u001a\u00020\u00072\u0006\u0010\r\u001a\u00020\u000eH\u0016J\b\u0010\u000f\u001a\u00020\u0007H\u0016J(\u0010\u0010\u001a\u00020\u00072\u0006\u0010\u0011\u001a\u00020\u00122\u0006\u0010\u0013\u001a\u00020\u00142\u0006\u0010\u0015\u001a\u00020\u00142\u0006\u0010\u0016\u001a\u00020\u0014H\u0016J*\u0010\u0017\u001a\u00020\u00072\u0006\u0010\u0018\u001a\u00020\u00192\b\u0010\u0004\u001a\u0004\u0018\u00010\u00052\u000e\u0010\u001a\u001a\n\u0018\u00010\tj\u0004\u0018\u0001`\nH&J\b\u0010\u001b\u001a\u00020\u0007H\u0016J\u0010\u0010\u001c\u001a\u00020\u00072\u0006\u0010\u001d\u001a\u00020\u001eH&J\u0018\u0010\u001f\u001a\u00020\u00072\u0006\u0010 \u001a\u00020!2\u0006\u0010\"\u001a\u00020\u0003H&\u00a8\u0006#"}, d2 = {"Lexpo/modules/updates/loader/LoaderTask$LoaderTaskCallback;", "", "onCachedUpdateLoaded", "", "update", "Lexpo/modules/updates/db/entity/UpdateEntity;", "onFailure", "", "e", "Ljava/lang/Exception;", "Lkotlin/Exception;", "onFinishedAllLoading", "onRemoteCheckForUpdateFinished", "result", "Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResult;", "onRemoteCheckForUpdateStarted", "onRemoteUpdateAssetLoaded", "asset", "Lexpo/modules/updates/db/entity/AssetEntity;", "successfulAssetCount", "", "failedAssetCount", "totalAssetCount", "onRemoteUpdateFinished", "status", "Lexpo/modules/updates/loader/LoaderTask$RemoteUpdateStatus;", "exception", "onRemoteUpdateLoadStarted", "onRemoteUpdateManifestResponseManifestLoaded", "updateManifest", "Lexpo/modules/updates/manifest/UpdateManifest;", "onSuccess", "launcher", "Lexpo/modules/updates/launcher/Launcher;", "isUpToDate", "expo-updates_debug"})
    public static abstract interface LoaderTaskCallback {
        
        /**
         * Called when a failure has occurred during the load.
         */
        public abstract void onFailure(@org.jetbrains.annotations.NotNull
        java.lang.Exception e);
        
        /**
         * Called when the loader task finishes with a launcher. Note that this doesn't indicate that
         * the loader task is done running, it just may have reached the launch wait timeout and succeeded
         * with a fallback loader.
         */
        public abstract void onSuccess(@org.jetbrains.annotations.NotNull
        expo.modules.updates.launcher.Launcher launcher, boolean isUpToDate);
        
        /**
         * This method is called after the loader task finishes doing all work. Note that it may have
         * "succeeded" before this with a loader, yet this method may still be called after the launch
         * to signal that all work is done (loading a remote update after the launch wait timeout has occurred).
         */
        public abstract void onFinishedAllLoading();
        
        /**
         * This method gives the calling class a backdoor option to ignore the cached update and force
         * a remote load if it decides the cached update is not runnable. Returning false from this
         * callback will force a remote load, overriding the timeout and configuration settings for
         * whether or not to check for a remote update. Returning true from this callback will make
         * LoaderTask proceed as usual.
         */
        public abstract boolean onCachedUpdateLoaded(@org.jetbrains.annotations.NotNull
        expo.modules.updates.db.entity.UpdateEntity update);
        
        public abstract void onRemoteUpdateManifestResponseManifestLoaded(@org.jetbrains.annotations.NotNull
        expo.modules.updates.manifest.UpdateManifest updateManifest);
        
        public abstract void onRemoteCheckForUpdateStarted();
        
        public abstract void onRemoteCheckForUpdateFinished(@org.jetbrains.annotations.NotNull
        expo.modules.updates.loader.LoaderTask.RemoteCheckResult result);
        
        public abstract void onRemoteUpdateLoadStarted();
        
        public abstract void onRemoteUpdateAssetLoaded(@org.jetbrains.annotations.NotNull
        expo.modules.updates.db.entity.AssetEntity asset, int successfulAssetCount, int failedAssetCount, int totalAssetCount);
        
        public abstract void onRemoteUpdateFinished(@org.jetbrains.annotations.NotNull
        expo.modules.updates.loader.LoaderTask.RemoteUpdateStatus status, @org.jetbrains.annotations.Nullable
        expo.modules.updates.db.entity.UpdateEntity update, @org.jetbrains.annotations.Nullable
        java.lang.Exception exception);
        
        @kotlin.Metadata(mv = {1, 8, 0}, k = 3)
        public static final class DefaultImpls {
            
            public static void onRemoteCheckForUpdateStarted(@org.jetbrains.annotations.NotNull
            expo.modules.updates.loader.LoaderTask.LoaderTaskCallback $this) {
            }
            
            public static void onRemoteCheckForUpdateFinished(@org.jetbrains.annotations.NotNull
            expo.modules.updates.loader.LoaderTask.LoaderTaskCallback $this, @org.jetbrains.annotations.NotNull
            expo.modules.updates.loader.LoaderTask.RemoteCheckResult result) {
            }
            
            public static void onRemoteUpdateLoadStarted(@org.jetbrains.annotations.NotNull
            expo.modules.updates.loader.LoaderTask.LoaderTaskCallback $this) {
            }
            
            public static void onRemoteUpdateAssetLoaded(@org.jetbrains.annotations.NotNull
            expo.modules.updates.loader.LoaderTask.LoaderTaskCallback $this, @org.jetbrains.annotations.NotNull
            expo.modules.updates.db.entity.AssetEntity asset, int successfulAssetCount, int failedAssetCount, int totalAssetCount) {
            }
        }
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u001c\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bb\u0018\u00002\u00020\u0001J\u0014\u0010\u0002\u001a\u00020\u00032\n\u0010\u0004\u001a\u00060\u0005j\u0002`\u0006H&J\b\u0010\u0007\u001a\u00020\u0003H&\u00a8\u0006\b"}, d2 = {"Lexpo/modules/updates/loader/LoaderTask$LaunchUpdateCallback;", "", "onFailure", "", "e", "Ljava/lang/Exception;", "Lkotlin/Exception;", "onSuccess", "expo-updates_debug"})
    static abstract interface LaunchUpdateCallback {
        
        public abstract void onFailure(@org.jetbrains.annotations.NotNull
        java.lang.Exception e);
        
        public abstract void onSuccess();
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u0014\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0002\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002R\u0016\u0010\u0003\u001a\n \u0005*\u0004\u0018\u00010\u00040\u0004X\u0082\u0004\u00a2\u0006\u0002\n\u0000\u00a8\u0006\u0006"}, d2 = {"Lexpo/modules/updates/loader/LoaderTask$Companion;", "", "()V", "TAG", "", "kotlin.jvm.PlatformType", "expo-updates_debug"})
    public static final class Companion {
        
        private Companion() {
            super();
        }
    }
}