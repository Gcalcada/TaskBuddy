package expo.modules.updates.selectionpolicy;

import java.lang.System;

/**
 * ReaperSelectionPolicy which chooses which updates to delete taking into account manifest filters
 * originating from the server. If an older update is available, it will choose to keep one older
 * update in addition to the one currently running, preferring updates that match the same filters
 * if available.
 *
 * Uses `commitTime` to determine ordering of updates.
 *
 * Chooses only to delete updates whose scope matches that of `launchedUpdate`.
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u001e\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J0\u0010\u0003\u001a\b\u0012\u0004\u0012\u00020\u00050\u00042\f\u0010\u0006\u001a\b\u0012\u0004\u0012\u00020\u00050\u00042\b\u0010\u0007\u001a\u0004\u0018\u00010\u00052\b\u0010\b\u001a\u0004\u0018\u00010\tH\u0016\u00a8\u0006\n"}, d2 = {"Lexpo/modules/updates/selectionpolicy/ReaperSelectionPolicyFilterAware;", "Lexpo/modules/updates/selectionpolicy/ReaperSelectionPolicy;", "()V", "selectUpdatesToDelete", "", "Lexpo/modules/updates/db/entity/UpdateEntity;", "updates", "launchedUpdate", "filters", "Lorg/json/JSONObject;", "expo-updates_debug"})
public final class ReaperSelectionPolicyFilterAware implements expo.modules.updates.selectionpolicy.ReaperSelectionPolicy {
    
    public ReaperSelectionPolicyFilterAware() {
        super();
    }
    
    @org.jetbrains.annotations.NotNull
    @java.lang.Override
    public java.util.List<expo.modules.updates.db.entity.UpdateEntity> selectUpdatesToDelete(@org.jetbrains.annotations.NotNull
    java.util.List<expo.modules.updates.db.entity.UpdateEntity> updates, @org.jetbrains.annotations.Nullable
    expo.modules.updates.db.entity.UpdateEntity launchedUpdate, @org.jetbrains.annotations.Nullable
    org.json.JSONObject filters) {
        return null;
    }
}