package expo.modules.updates.loader;

import java.lang.System;

/**
 * Utility class for Loader and its subclasses, to allow for easy mocking
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000:\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u0012\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\b\u0016\u0018\u0000 \u00152\u00020\u0001:\u0001\u0015B\u0005\u00a2\u0006\u0002\u0010\u0002J\u001e\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u00062\u0006\u0010\u0007\u001a\u00020\b2\u0006\u0010\t\u001a\u00020\nJ%\u0010\u000b\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u00062\u0006\u0010\u0007\u001a\u00020\b2\u0006\u0010\t\u001a\u00020\nH\u0000\u00a2\u0006\u0002\b\fJ%\u0010\r\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u00062\u0006\u0010\u0007\u001a\u00020\b2\u0006\u0010\t\u001a\u00020\nH\u0000\u00a2\u0006\u0002\b\u000eJ\u000e\u0010\u000f\u001a\u00020\u00102\u0006\u0010\u0007\u001a\u00020\bJ\u0018\u0010\u0011\u001a\u0004\u0018\u00010\u00122\u0006\u0010\t\u001a\u00020\n2\u0006\u0010\u0013\u001a\u00020\u0014\u00a8\u0006\u0016"}, d2 = {"Lexpo/modules/updates/loader/LoaderFiles;", "", "()V", "copyAssetAndGetHash", "", "asset", "Lexpo/modules/updates/db/entity/AssetEntity;", "destination", "Ljava/io/File;", "context", "Landroid/content/Context;", "copyContextAssetAndGetHash", "copyContextAssetAndGetHash$expo_updates_debug", "copyResourceAndGetHash", "copyResourceAndGetHash$expo_updates_debug", "fileExists", "", "readEmbeddedManifest", "Lexpo/modules/updates/manifest/UpdateManifest;", "configuration", "Lexpo/modules/updates/UpdatesConfiguration;", "Companion", "expo-updates_debug"})
public class LoaderFiles {
    @org.jetbrains.annotations.NotNull
    public static final expo.modules.updates.loader.LoaderFiles.Companion Companion = null;
    private static final java.lang.String TAG = null;
    
    public LoaderFiles() {
        super();
    }
    
    public final boolean fileExists(@org.jetbrains.annotations.NotNull
    java.io.File destination) {
        return false;
    }
    
    @org.jetbrains.annotations.Nullable
    public final expo.modules.updates.manifest.UpdateManifest readEmbeddedManifest(@org.jetbrains.annotations.NotNull
    android.content.Context context, @org.jetbrains.annotations.NotNull
    expo.modules.updates.UpdatesConfiguration configuration) {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    @kotlin.jvm.Throws(exceptionClasses = {java.security.NoSuchAlgorithmException.class, java.io.IOException.class})
    public final byte[] copyAssetAndGetHash(@org.jetbrains.annotations.NotNull
    expo.modules.updates.db.entity.AssetEntity asset, @org.jetbrains.annotations.NotNull
    java.io.File destination, @org.jetbrains.annotations.NotNull
    android.content.Context context) throws java.security.NoSuchAlgorithmException, java.io.IOException {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    @kotlin.jvm.Throws(exceptionClasses = {java.security.NoSuchAlgorithmException.class, java.io.IOException.class})
    public final byte[] copyContextAssetAndGetHash$expo_updates_debug(@org.jetbrains.annotations.NotNull
    expo.modules.updates.db.entity.AssetEntity asset, @org.jetbrains.annotations.NotNull
    java.io.File destination, @org.jetbrains.annotations.NotNull
    android.content.Context context) throws java.security.NoSuchAlgorithmException, java.io.IOException {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    @kotlin.jvm.Throws(exceptionClasses = {java.security.NoSuchAlgorithmException.class, java.io.IOException.class})
    public final byte[] copyResourceAndGetHash$expo_updates_debug(@org.jetbrains.annotations.NotNull
    expo.modules.updates.db.entity.AssetEntity asset, @org.jetbrains.annotations.NotNull
    java.io.File destination, @org.jetbrains.annotations.NotNull
    android.content.Context context) throws java.security.NoSuchAlgorithmException, java.io.IOException {
        return null;
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u0014\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0002\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002R\u0016\u0010\u0003\u001a\n \u0005*\u0004\u0018\u00010\u00040\u0004X\u0082\u0004\u00a2\u0006\u0002\n\u0000\u00a8\u0006\u0006"}, d2 = {"Lexpo/modules/updates/loader/LoaderFiles$Companion;", "", "()V", "TAG", "", "kotlin.jvm.PlatformType", "expo-updates_debug"})
    public static final class Companion {
        
        private Companion() {
            super();
        }
    }
}