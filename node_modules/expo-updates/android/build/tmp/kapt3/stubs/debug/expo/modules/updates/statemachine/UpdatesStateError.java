package expo.modules.updates.statemachine;

import java.lang.System;

/**
 * For the state machine, errors are stored as data objects.
 * For now, we just have the "message" property.
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000*\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\b\u0007\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0002\b\u0086\b\u0018\u00002\u00020\u0001B\r\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0004J\t\u0010\u000b\u001a\u00020\u0003H\u00c6\u0003J\u0013\u0010\f\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u0003H\u00c6\u0001J\u0013\u0010\r\u001a\u00020\u000e2\b\u0010\u000f\u001a\u0004\u0018\u00010\u0001H\u00d6\u0003J\t\u0010\u0010\u001a\u00020\u0011H\u00d6\u0001J\t\u0010\u0012\u001a\u00020\u0003H\u00d6\u0001R\u001d\u0010\u0005\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00030\u00068F\u00a2\u0006\u0006\u001a\u0004\b\u0007\u0010\bR\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\t\u0010\n\u00a8\u0006\u0013"}, d2 = {"Lexpo/modules/updates/statemachine/UpdatesStateError;", "", "message", "", "(Ljava/lang/String;)V", "json", "", "getJson", "()Ljava/util/Map;", "getMessage", "()Ljava/lang/String;", "component1", "copy", "equals", "", "other", "hashCode", "", "toString", "expo-updates_debug"})
public final class UpdatesStateError {
    @org.jetbrains.annotations.NotNull
    private final java.lang.String message = null;
    
    /**
     * For the state machine, errors are stored as data objects.
     * For now, we just have the "message" property.
     */
    @org.jetbrains.annotations.NotNull
    public final expo.modules.updates.statemachine.UpdatesStateError copy(@org.jetbrains.annotations.NotNull
    java.lang.String message) {
        return null;
    }
    
    /**
     * For the state machine, errors are stored as data objects.
     * For now, we just have the "message" property.
     */
    @java.lang.Override
    public boolean equals(@org.jetbrains.annotations.Nullable
    java.lang.Object other) {
        return false;
    }
    
    /**
     * For the state machine, errors are stored as data objects.
     * For now, we just have the "message" property.
     */
    @java.lang.Override
    public int hashCode() {
        return 0;
    }
    
    /**
     * For the state machine, errors are stored as data objects.
     * For now, we just have the "message" property.
     */
    @org.jetbrains.annotations.NotNull
    @java.lang.Override
    public java.lang.String toString() {
        return null;
    }
    
    public UpdatesStateError(@org.jetbrains.annotations.NotNull
    java.lang.String message) {
        super();
    }
    
    @org.jetbrains.annotations.NotNull
    public final java.lang.String component1() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    public final java.lang.String getMessage() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    public final java.util.Map<java.lang.String, java.lang.String> getJson() {
        return null;
    }
}