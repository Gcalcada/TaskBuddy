package expo.modules.updates.launcher;

import java.lang.System;

/**
 * Implementation of [Launcher] which always uses the update embedded in the application package,
 * avoiding SQLite and the expo-updates file store entirely.
 *
 * This is only used in rare cases when the database/file system is corrupt or otherwise
 * inaccessible, but we still want to avoid crashing. The exported property `isEmergencyLaunch`
 * on [UpdatesModule] should be `true` whenever this class is used.
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0003\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\u0001\n\u0002\b\u0007\n\u0002\u0010\u0002\n\u0002\b\u0002\u0018\u0000 \u00192\u00020\u0001:\u0001\u0019B!\b\u0007\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0010\b\u0002\u0010\u0004\u001a\n\u0018\u00010\u0005j\u0004\u0018\u0001`\u0006\u00a2\u0006\u0002\u0010\u0007J\u001c\u0010\u0017\u001a\u00020\u00182\u0006\u0010\u0002\u001a\u00020\u00032\n\u0010\u0004\u001a\u00060\u0005j\u0002`\u0006H\u0002R\u0014\u0010\b\u001a\u00020\tX\u0096D\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u0014\u0010\f\u001a\u00020\rX\u0096D\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\u000eR\u0016\u0010\u000f\u001a\u0004\u0018\u00010\u0010X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0011\u0010\u0012R\u0016\u0010\u0013\u001a\u0004\u0018\u00010\u0010X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0014\u0010\u0012R\u0016\u0010\u0015\u001a\u0004\u0018\u00010\u0010X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0016\u0010\u0012\u00a8\u0006\u001a"}, d2 = {"Lexpo/modules/updates/launcher/NoDatabaseLauncher;", "Lexpo/modules/updates/launcher/Launcher;", "context", "Landroid/content/Context;", "fatalException", "Ljava/lang/Exception;", "Lkotlin/Exception;", "(Landroid/content/Context;Ljava/lang/Exception;)V", "bundleAssetName", "", "getBundleAssetName", "()Ljava/lang/String;", "isUsingEmbeddedAssets", "", "()Z", "launchAssetFile", "", "getLaunchAssetFile", "()Ljava/lang/Void;", "launchedUpdate", "getLaunchedUpdate", "localAssetFiles", "getLocalAssetFiles", "writeErrorToLog", "", "Companion", "expo-updates_debug"})
public final class NoDatabaseLauncher implements expo.modules.updates.launcher.Launcher {
    @org.jetbrains.annotations.NotNull
    private final java.lang.String bundleAssetName = "index.android.bundle";
    @org.jetbrains.annotations.Nullable
    private final java.lang.Void launchedUpdate = null;
    @org.jetbrains.annotations.Nullable
    private final java.lang.Void launchAssetFile = null;
    @org.jetbrains.annotations.Nullable
    private final java.lang.Void localAssetFiles = null;
    private final boolean isUsingEmbeddedAssets = true;
    @org.jetbrains.annotations.NotNull
    public static final expo.modules.updates.launcher.NoDatabaseLauncher.Companion Companion = null;
    private static final java.lang.String TAG = null;
    private static final java.lang.String ERROR_LOG_FILENAME = "expo-error.log";
    
    @kotlin.jvm.JvmOverloads
    public NoDatabaseLauncher(@org.jetbrains.annotations.NotNull
    android.content.Context context) {
        super();
    }
    
    @kotlin.jvm.JvmOverloads
    public NoDatabaseLauncher(@org.jetbrains.annotations.NotNull
    android.content.Context context, @org.jetbrains.annotations.Nullable
    java.lang.Exception fatalException) {
        super();
    }
    
    @org.jetbrains.annotations.NotNull
    @java.lang.Override
    public java.lang.String getBundleAssetName() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    @java.lang.Override
    public java.lang.Void getLaunchedUpdate() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    @java.lang.Override
    public java.lang.Void getLaunchAssetFile() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    @java.lang.Override
    public java.lang.Void getLocalAssetFiles() {
        return null;
    }
    
    @java.lang.Override
    public boolean isUsingEmbeddedAssets() {
        return false;
    }
    
    private final void writeErrorToLog(android.content.Context context, java.lang.Exception fatalException) {
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u001a\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002J\u0010\u0010\u0007\u001a\u0004\u0018\u00010\u00042\u0006\u0010\b\u001a\u00020\tR\u000e\u0010\u0003\u001a\u00020\u0004X\u0082T\u00a2\u0006\u0002\n\u0000R\u0016\u0010\u0005\u001a\n \u0006*\u0004\u0018\u00010\u00040\u0004X\u0082\u0004\u00a2\u0006\u0002\n\u0000\u00a8\u0006\n"}, d2 = {"Lexpo/modules/updates/launcher/NoDatabaseLauncher$Companion;", "", "()V", "ERROR_LOG_FILENAME", "", "TAG", "kotlin.jvm.PlatformType", "consumeErrorLog", "context", "Landroid/content/Context;", "expo-updates_debug"})
    public static final class Companion {
        
        private Companion() {
            super();
        }
        
        @org.jetbrains.annotations.Nullable
        public final java.lang.String consumeErrorLog(@org.jetbrains.annotations.NotNull
        android.content.Context context) {
            return null;
        }
    }
}