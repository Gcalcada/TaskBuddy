package expo.modules.updates.codesigning;

import java.lang.System;

/**
 * Contains all information about code signing.
 * @param embeddedCertificateString Implicitly trusted self-signed root certificate. May be the code signing certificate if only using embedded certificate (no chain).
 * @param codeSigningMetadata Metadata about the code signing certificate. May be the root certificate or a leaf certificate.
 * @param includeManifestResponseCertificateChain Should a certificate chain in the manifest response be evaluated when validating the signature. If true, ignores codeSigningMetadata when evaluating cert chain.
 * @param allowUnsignedManifests Should unsigned manifest responses be allowed. Used during Expo Go transition when not all expo-cli versions know how to sign using the new method yet the new Expo Go clients have certificates.
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000>\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u000e\n\u0000\n\u0002\u0010$\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\n\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0012\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\u0018\u0000 \u001e2\u00020\u0001:\u0001\u001eB3\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0014\u0010\u0004\u001a\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u0003\u0018\u00010\u0005\u0012\u0006\u0010\u0006\u001a\u00020\u0007\u0012\u0006\u0010\b\u001a\u00020\u0007\u00a2\u0006\u0002\u0010\tJ\u0006\u0010\u0014\u001a\u00020\u0003J\"\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u00032\u0006\u0010\u0018\u001a\u00020\u00192\b\u0010\u001a\u001a\u0004\u0018\u00010\u0003J\"\u0010\u001b\u001a\u00020\u00162\u0006\u0010\u001c\u001a\u00020\u001d2\u0006\u0010\u0018\u001a\u00020\u00192\b\u0010\u001a\u001a\u0004\u0018\u00010\u0003H\u0002R\u001b\u0010\n\u001a\u00020\u000b8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u000e\u0010\u000f\u001a\u0004\b\f\u0010\rR\u000e\u0010\b\u001a\u00020\u0007X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u001c\u0010\u0004\u001a\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u0003\u0018\u00010\u0005X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0002\u001a\u00020\u0003X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0006\u001a\u00020\u0007X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u001b\u0010\u0010\u001a\u00020\u00038BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0013\u0010\u000f\u001a\u0004\b\u0011\u0010\u0012\u00a8\u0006\u001f"}, d2 = {"Lexpo/modules/updates/codesigning/CodeSigningConfiguration;", "", "embeddedCertificateString", "", "codeSigningMetadata", "", "includeManifestResponseCertificateChain", "", "allowUnsignedManifests", "(Ljava/lang/String;Ljava/util/Map;ZZ)V", "algorithmFromMetadata", "Lexpo/modules/updates/codesigning/CodeSigningAlgorithm;", "getAlgorithmFromMetadata", "()Lexpo/modules/updates/codesigning/CodeSigningAlgorithm;", "algorithmFromMetadata$delegate", "Lkotlin/Lazy;", "keyIdFromMetadata", "getKeyIdFromMetadata", "()Ljava/lang/String;", "keyIdFromMetadata$delegate", "getAcceptSignatureHeader", "validateSignature", "Lexpo/modules/updates/codesigning/SignatureValidationResult;", "signature", "bodyBytes", "", "manifestResponseCertificateChain", "validateSignatureInternal", "info", "Lexpo/modules/updates/codesigning/SignatureHeaderInfo;", "Companion", "expo-updates_debug"})
public final class CodeSigningConfiguration {
    private final java.lang.String embeddedCertificateString = null;
    private final java.util.Map<java.lang.String, java.lang.String> codeSigningMetadata = null;
    private final boolean includeManifestResponseCertificateChain = false;
    private final boolean allowUnsignedManifests = false;
    private final kotlin.Lazy algorithmFromMetadata$delegate = null;
    private final kotlin.Lazy keyIdFromMetadata$delegate = null;
    @org.jetbrains.annotations.NotNull
    public static final expo.modules.updates.codesigning.CodeSigningConfiguration.Companion Companion = null;
    
    public CodeSigningConfiguration(@org.jetbrains.annotations.NotNull
    java.lang.String embeddedCertificateString, @org.jetbrains.annotations.Nullable
    java.util.Map<java.lang.String, java.lang.String> codeSigningMetadata, boolean includeManifestResponseCertificateChain, boolean allowUnsignedManifests) {
        super();
    }
    
    private final expo.modules.updates.codesigning.CodeSigningAlgorithm getAlgorithmFromMetadata() {
        return null;
    }
    
    private final java.lang.String getKeyIdFromMetadata() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    public final expo.modules.updates.codesigning.SignatureValidationResult validateSignature(@org.jetbrains.annotations.Nullable
    java.lang.String signature, @org.jetbrains.annotations.NotNull
    byte[] bodyBytes, @org.jetbrains.annotations.Nullable
    java.lang.String manifestResponseCertificateChain) {
        return null;
    }
    
    private final expo.modules.updates.codesigning.SignatureValidationResult validateSignatureInternal(expo.modules.updates.codesigning.SignatureHeaderInfo info, byte[] bodyBytes, java.lang.String manifestResponseCertificateChain) {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    public final java.lang.String getAcceptSignatureHeader() {
        return null;
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u0018\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\u0010\u000e\n\u0002\b\u0002\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002J\u0014\u0010\u0003\u001a\b\u0012\u0004\u0012\u00020\u00050\u00042\u0006\u0010\u0006\u001a\u00020\u0005\u00a8\u0006\u0007"}, d2 = {"Lexpo/modules/updates/codesigning/CodeSigningConfiguration$Companion;", "", "()V", "separateCertificateChain", "", "", "certificateChainInManifestResponse", "expo-updates_debug"})
    public static final class Companion {
        
        private Companion() {
            super();
        }
        
        @org.jetbrains.annotations.NotNull
        public final java.util.List<java.lang.String> separateCertificateChain(@org.jetbrains.annotations.NotNull
        java.lang.String certificateChainInManifestResponse) {
            return null;
        }
    }
}