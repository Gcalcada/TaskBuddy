package expo.modules.updates.statemachine;

import java.lang.System;

/**
 * The Updates state machine class. There should be only one instance of this class
 * in a production app, instantiated as a property of UpdatesController.
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000P\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u000b\n\u0002\b\u0002\u0018\u0000 \u001d2\u00020\u0001:\u0001\u001dB\u0015\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0005\u00a2\u0006\u0002\u0010\u0006J\u0010\u0010\u0012\u001a\u00020\u00132\u0006\u0010\u0014\u001a\u00020\u0015H\u0002J\u000e\u0010\u0016\u001a\u00020\u00132\u0006\u0010\u0017\u001a\u00020\u0018J\b\u0010\u0019\u001a\u00020\u0013H\u0002J\u0010\u0010\u001a\u001a\u00020\u00132\u0006\u0010\u0014\u001a\u00020\u0015H\u0002J\u0010\u0010\u001b\u001a\u00020\u001c2\u0006\u0010\u0014\u001a\u00020\u0015H\u0002R\u000e\u0010\u0004\u001a\u00020\u0005X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u001e\u0010\t\u001a\u00020\b2\u0006\u0010\u0007\u001a\u00020\b@BX\u0086\u000e\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u000e\u0010\f\u001a\u00020\rX\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u000e\u001a\u00020\u000fX\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0010\u001a\u00020\u0011X\u0082\u000e\u00a2\u0006\u0002\n\u0000\u00a8\u0006\u001e"}, d2 = {"Lexpo/modules/updates/statemachine/UpdatesStateMachine;", "", "androidContext", "Landroid/content/Context;", "changeEventSender", "Lexpo/modules/updates/statemachine/UpdatesStateChangeEventSender;", "(Landroid/content/Context;Lexpo/modules/updates/statemachine/UpdatesStateChangeEventSender;)V", "<set-?>", "Lexpo/modules/updates/statemachine/UpdatesStateContext;", "context", "getContext", "()Lexpo/modules/updates/statemachine/UpdatesStateContext;", "logger", "Lexpo/modules/updates/logging/UpdatesLogger;", "serialExecutorQueue", "Lexpo/modules/updates/procedures/StateMachineSerialExecutorQueue;", "state", "Lexpo/modules/updates/statemachine/UpdatesStateValue;", "processEvent", "", "event", "Lexpo/modules/updates/statemachine/UpdatesStateEvent;", "queueExecution", "stateMachineProcedure", "Lexpo/modules/updates/procedures/StateMachineProcedure;", "reset", "sendChangeEventToJS", "transition", "", "Companion", "expo-updates_debug"})
public final class UpdatesStateMachine {
    private final expo.modules.updates.statemachine.UpdatesStateChangeEventSender changeEventSender = null;
    private final expo.modules.updates.procedures.StateMachineSerialExecutorQueue serialExecutorQueue = null;
    private final expo.modules.updates.logging.UpdatesLogger logger = null;
    
    /**
     * The current state
     */
    private expo.modules.updates.statemachine.UpdatesStateValue state = expo.modules.updates.statemachine.UpdatesStateValue.Idle;
    
    /**
     * The context
     */
    @org.jetbrains.annotations.NotNull
    private expo.modules.updates.statemachine.UpdatesStateContext context;
    @org.jetbrains.annotations.NotNull
    public static final expo.modules.updates.statemachine.UpdatesStateMachine.Companion Companion = null;
    
    /**
     * For a particular machine state, only certain events may be processed.
     */
    @org.jetbrains.annotations.NotNull
    private static final java.util.Map<expo.modules.updates.statemachine.UpdatesStateValue, java.util.Set<expo.modules.updates.statemachine.UpdatesStateEventType>> updatesStateAllowedEvents = null;
    
    /**
     * For this state machine, each event has only one destination state that the
     * machine will transition to.
     */
    @org.jetbrains.annotations.NotNull
    private static final java.util.Map<expo.modules.updates.statemachine.UpdatesStateEventType, expo.modules.updates.statemachine.UpdatesStateValue> updatesStateTransitions = null;
    
    public UpdatesStateMachine(@org.jetbrains.annotations.NotNull
    android.content.Context androidContext, @org.jetbrains.annotations.NotNull
    expo.modules.updates.statemachine.UpdatesStateChangeEventSender changeEventSender) {
        super();
    }
    
    /**
     * Queue a StateMachineProcedure procedure for serial execution.
     */
    public final void queueExecution(@org.jetbrains.annotations.NotNull
    expo.modules.updates.procedures.StateMachineProcedure stateMachineProcedure) {
    }
    
    @org.jetbrains.annotations.NotNull
    public final expo.modules.updates.statemachine.UpdatesStateContext getContext() {
        return null;
    }
    
    /**
     * Reset the machine to its starting state. Should only be called after the app restarts (reloadAsync()).
     */
    private final void reset() {
    }
    
    /**
     * Transition the state machine forward to a new state.
     */
    private final void processEvent(expo.modules.updates.statemachine.UpdatesStateEvent event) {
    }
    
    /**
     * Make sure the state transition is allowed, and then update the state.
     */
    private final boolean transition(expo.modules.updates.statemachine.UpdatesStateEvent event) {
        return false;
    }
    
    private final void sendChangeEventToJS(expo.modules.updates.statemachine.UpdatesStateEvent event) {
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000.\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\u0018\u0002\n\u0002\u0010\"\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002J\u0018\u0010\f\u001a\u00020\r2\u0006\u0010\u000e\u001a\u00020\r2\u0006\u0010\u000f\u001a\u00020\u0010H\u0002R#\u0010\u0003\u001a\u0014\u0012\u0004\u0012\u00020\u0005\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00070\u00060\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\tR\u001d\u0010\n\u001a\u000e\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\u00050\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\t\u00a8\u0006\u0011"}, d2 = {"Lexpo/modules/updates/statemachine/UpdatesStateMachine$Companion;", "", "()V", "updatesStateAllowedEvents", "", "Lexpo/modules/updates/statemachine/UpdatesStateValue;", "", "Lexpo/modules/updates/statemachine/UpdatesStateEventType;", "getUpdatesStateAllowedEvents", "()Ljava/util/Map;", "updatesStateTransitions", "getUpdatesStateTransitions", "reduceContext", "Lexpo/modules/updates/statemachine/UpdatesStateContext;", "context", "event", "Lexpo/modules/updates/statemachine/UpdatesStateEvent;", "expo-updates_debug"})
    public static final class Companion {
        
        private Companion() {
            super();
        }
        
        @org.jetbrains.annotations.NotNull
        public final java.util.Map<expo.modules.updates.statemachine.UpdatesStateValue, java.util.Set<expo.modules.updates.statemachine.UpdatesStateEventType>> getUpdatesStateAllowedEvents() {
            return null;
        }
        
        @org.jetbrains.annotations.NotNull
        public final java.util.Map<expo.modules.updates.statemachine.UpdatesStateEventType, expo.modules.updates.statemachine.UpdatesStateValue> getUpdatesStateTransitions() {
            return null;
        }
        
        /**
         * Given an allowed event and a context, return a new context with the changes
         * made by processing the event.
         */
        private final expo.modules.updates.statemachine.UpdatesStateContext reduceContext(expo.modules.updates.statemachine.UpdatesStateContext context, expo.modules.updates.statemachine.UpdatesStateEvent event) {
            return null;
        }
    }
}