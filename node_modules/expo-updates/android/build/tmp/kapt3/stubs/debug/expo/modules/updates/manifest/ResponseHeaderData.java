package expo.modules.updates.manifest;

import java.lang.System;

/**
 * Data from the update response headers.
 * For non-multipart responses, this is the data from the headers in the response.
 * For multipart responses, this is the data from the headers in the outer response (as opposed to the headers in a part).
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000*\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\b\n\u0002\b\f\n\u0002\u0010\u000b\n\u0002\b\u0005\b\u0086\b\u0018\u0000 \"2\u00020\u0001:\u0001\"B5\u0012\n\b\u0002\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010\u0004\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010\u0005\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010\u0006\u001a\u0004\u0018\u00010\u0003\u00a2\u0006\u0002\u0010\u0007J\u000b\u0010\u0018\u001a\u0004\u0018\u00010\u0003H\u00c2\u0003J\u000b\u0010\u0019\u001a\u0004\u0018\u00010\u0003H\u00c2\u0003J\u000b\u0010\u001a\u001a\u0004\u0018\u00010\u0003H\u00c2\u0003J\u000b\u0010\u001b\u001a\u0004\u0018\u00010\u0003H\u00c6\u0003J9\u0010\u001c\u001a\u00020\u00002\n\b\u0002\u0010\u0002\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010\u0004\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010\u0005\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010\u0006\u001a\u0004\u0018\u00010\u0003H\u00c6\u0001J\u0013\u0010\u001d\u001a\u00020\u001e2\b\u0010\u001f\u001a\u0004\u0018\u00010\u0001H\u00d6\u0003J\t\u0010 \u001a\u00020\u0011H\u00d6\u0001J\t\u0010!\u001a\u00020\u0003H\u00d6\u0001R\u001d\u0010\b\u001a\u0004\u0018\u00010\t8FX\u0086\u0084\u0002\u00a2\u0006\f\n\u0004\b\f\u0010\r\u001a\u0004\b\n\u0010\u000bR\u0010\u0010\u0005\u001a\u0004\u0018\u00010\u0003X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u0013\u0010\u0006\u001a\u0004\u0018\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000e\u0010\u000fR\u0015\u0010\u0010\u001a\u0004\u0018\u00010\u0011\u00a2\u0006\n\n\u0002\u0010\u0014\u001a\u0004\b\u0012\u0010\u0013R\u0010\u0010\u0002\u001a\u0004\u0018\u00010\u0003X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u001d\u0010\u0015\u001a\u0004\u0018\u00010\t8FX\u0086\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0017\u0010\r\u001a\u0004\b\u0016\u0010\u000bR\u0010\u0010\u0004\u001a\u0004\u0018\u00010\u0003X\u0082\u0004\u00a2\u0006\u0002\n\u0000\u00a8\u0006#"}, d2 = {"Lexpo/modules/updates/manifest/ResponseHeaderData;", "", "protocolVersionRaw", "", "serverDefinedHeadersRaw", "manifestFiltersRaw", "manifestSignature", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "manifestFilters", "Lorg/json/JSONObject;", "getManifestFilters", "()Lorg/json/JSONObject;", "manifestFilters$delegate", "Lkotlin/Lazy;", "getManifestSignature", "()Ljava/lang/String;", "protocolVersion", "", "getProtocolVersion", "()Ljava/lang/Integer;", "Ljava/lang/Integer;", "serverDefinedHeaders", "getServerDefinedHeaders", "serverDefinedHeaders$delegate", "component1", "component2", "component3", "component4", "copy", "equals", "", "other", "hashCode", "toString", "Companion", "expo-updates_debug"})
public final class ResponseHeaderData {
    
    /**
     * expo-protocol-version header. Indicates which version of the expo-updates protocol the response is.
     */
    private final java.lang.String protocolVersionRaw = null;
    
    /**
     * expo-server-defined-headers header.  It defines headers that this library must store until overwritten by a newer dictionary.
     * They must be included in every subsequent update request.
     */
    private final java.lang.String serverDefinedHeadersRaw = null;
    
    /**
     * expo-manifest-filters header. It is used to filter updates stored by the client library by the
     * `metadata` attribute found in the manifest. If a field is mentioned in the filter, the corresponding
     * field in the metadata must either be missing or equal for the update to be included.
     * The client library must store the manifest filters until it is overwritten by a newer response.
     */
    private final java.lang.String manifestFiltersRaw = null;
    
    /**
     * Classic updates Expo Go manifest signature
     */
    @org.jetbrains.annotations.Nullable
    private final java.lang.String manifestSignature = null;
    @org.jetbrains.annotations.Nullable
    private final java.lang.Integer protocolVersion = null;
    @org.jetbrains.annotations.Nullable
    private final kotlin.Lazy serverDefinedHeaders$delegate = null;
    @org.jetbrains.annotations.Nullable
    private final kotlin.Lazy manifestFilters$delegate = null;
    @org.jetbrains.annotations.NotNull
    public static final expo.modules.updates.manifest.ResponseHeaderData.Companion Companion = null;
    private static final java.lang.String TAG = null;
    
    /**
     * Data from the update response headers.
     * For non-multipart responses, this is the data from the headers in the response.
     * For multipart responses, this is the data from the headers in the outer response (as opposed to the headers in a part).
     */
    @org.jetbrains.annotations.NotNull
    public final expo.modules.updates.manifest.ResponseHeaderData copy(@org.jetbrains.annotations.Nullable
    java.lang.String protocolVersionRaw, @org.jetbrains.annotations.Nullable
    java.lang.String serverDefinedHeadersRaw, @org.jetbrains.annotations.Nullable
    java.lang.String manifestFiltersRaw, @org.jetbrains.annotations.Nullable
    java.lang.String manifestSignature) {
        return null;
    }
    
    /**
     * Data from the update response headers.
     * For non-multipart responses, this is the data from the headers in the response.
     * For multipart responses, this is the data from the headers in the outer response (as opposed to the headers in a part).
     */
    @java.lang.Override
    public boolean equals(@org.jetbrains.annotations.Nullable
    java.lang.Object other) {
        return false;
    }
    
    /**
     * Data from the update response headers.
     * For non-multipart responses, this is the data from the headers in the response.
     * For multipart responses, this is the data from the headers in the outer response (as opposed to the headers in a part).
     */
    @java.lang.Override
    public int hashCode() {
        return 0;
    }
    
    /**
     * Data from the update response headers.
     * For non-multipart responses, this is the data from the headers in the response.
     * For multipart responses, this is the data from the headers in the outer response (as opposed to the headers in a part).
     */
    @org.jetbrains.annotations.NotNull
    @java.lang.Override
    public java.lang.String toString() {
        return null;
    }
    
    public ResponseHeaderData() {
        super();
    }
    
    public ResponseHeaderData(@org.jetbrains.annotations.Nullable
    java.lang.String protocolVersionRaw, @org.jetbrains.annotations.Nullable
    java.lang.String serverDefinedHeadersRaw, @org.jetbrains.annotations.Nullable
    java.lang.String manifestFiltersRaw, @org.jetbrains.annotations.Nullable
    java.lang.String manifestSignature) {
        super();
    }
    
    /**
     * expo-protocol-version header. Indicates which version of the expo-updates protocol the response is.
     */
    private final java.lang.String component1() {
        return null;
    }
    
    /**
     * expo-server-defined-headers header.  It defines headers that this library must store until overwritten by a newer dictionary.
     * They must be included in every subsequent update request.
     */
    private final java.lang.String component2() {
        return null;
    }
    
    /**
     * expo-manifest-filters header. It is used to filter updates stored by the client library by the
     * `metadata` attribute found in the manifest. If a field is mentioned in the filter, the corresponding
     * field in the metadata must either be missing or equal for the update to be included.
     * The client library must store the manifest filters until it is overwritten by a newer response.
     */
    private final java.lang.String component3() {
        return null;
    }
    
    /**
     * Classic updates Expo Go manifest signature
     */
    @org.jetbrains.annotations.Nullable
    public final java.lang.String component4() {
        return null;
    }
    
    /**
     * Classic updates Expo Go manifest signature
     */
    @org.jetbrains.annotations.Nullable
    public final java.lang.String getManifestSignature() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    public final java.lang.Integer getProtocolVersion() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    public final org.json.JSONObject getServerDefinedHeaders() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    public final org.json.JSONObject getManifestFilters() {
        return null;
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u001c\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002J\u0012\u0010\u0006\u001a\u0004\u0018\u00010\u00072\b\u0010\b\u001a\u0004\u0018\u00010\u0004R\u0016\u0010\u0003\u001a\n \u0005*\u0004\u0018\u00010\u00040\u0004X\u0082\u0004\u00a2\u0006\u0002\n\u0000\u00a8\u0006\t"}, d2 = {"Lexpo/modules/updates/manifest/ResponseHeaderData$Companion;", "", "()V", "TAG", "", "kotlin.jvm.PlatformType", "headerDictionaryToJSONObject", "Lorg/json/JSONObject;", "headerDictionary", "expo-updates_debug"})
    public static final class Companion {
        
        private Companion() {
            super();
        }
        
        @org.jetbrains.annotations.Nullable
        public final org.json.JSONObject headerDictionaryToJSONObject(@org.jetbrains.annotations.Nullable
        java.lang.String headerDictionary) {
            return null;
        }
    }
}