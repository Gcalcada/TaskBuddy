package expo.modules.updates.selectionpolicy;

import java.lang.System;

/**
 * LauncherSelectionPolicy which chooses an update to launch based on the manifest filters
 * provided by the server. If multiple updates meet the criteria, the newest one (using `commitTime`
 * for ordering) is chosen, but the manifest filters are always taken into account before the
 * `commitTime`.
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000(\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\u0018\u00002\u00020\u0001B\u000f\b\u0016\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0004B\u0013\u0012\f\u0010\u0005\u001a\b\u0012\u0004\u0012\u00020\u00030\u0006\u00a2\u0006\u0002\u0010\u0007J\"\u0010\b\u001a\u0004\u0018\u00010\t2\f\u0010\n\u001a\b\u0012\u0004\u0012\u00020\t0\u00062\b\u0010\u000b\u001a\u0004\u0018\u00010\fH\u0016R\u0014\u0010\u0005\u001a\b\u0012\u0004\u0012\u00020\u00030\u0006X\u0082\u0004\u00a2\u0006\u0002\n\u0000\u00a8\u0006\r"}, d2 = {"Lexpo/modules/updates/selectionpolicy/LauncherSelectionPolicyFilterAware;", "Lexpo/modules/updates/selectionpolicy/LauncherSelectionPolicy;", "runtimeVersion", "", "(Ljava/lang/String;)V", "runtimeVersions", "", "(Ljava/util/List;)V", "selectUpdateToLaunch", "Lexpo/modules/updates/db/entity/UpdateEntity;", "updates", "filters", "Lorg/json/JSONObject;", "expo-updates_debug"})
public final class LauncherSelectionPolicyFilterAware implements expo.modules.updates.selectionpolicy.LauncherSelectionPolicy {
    private final java.util.List<java.lang.String> runtimeVersions = null;
    
    public LauncherSelectionPolicyFilterAware(@org.jetbrains.annotations.NotNull
    java.util.List<java.lang.String> runtimeVersions) {
        super();
    }
    
    public LauncherSelectionPolicyFilterAware(@org.jetbrains.annotations.NotNull
    java.lang.String runtimeVersion) {
        super();
    }
    
    @org.jetbrains.annotations.Nullable
    @java.lang.Override
    public expo.modules.updates.db.entity.UpdateEntity selectUpdateToLaunch(@org.jetbrains.annotations.NotNull
    java.util.List<expo.modules.updates.db.entity.UpdateEntity> updates, @org.jetbrains.annotations.Nullable
    org.json.JSONObject filters) {
        return null;
    }
}