package expo.modules.updates.db.dao;

import java.lang.System;

/**
 * Utility class for accessing and modifying data in SQLite relating to assets.
 */
@androidx.room.Dao
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000J\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0000\n\u0002\u0010\t\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u000b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\r\b\'\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J\b\u0010\u0003\u001a\u00020\u0004H\'J\u0010\u0010\u0005\u001a\u00020\u00062\u0006\u0010\u0007\u001a\u00020\bH\'J\u0010\u0010\t\u001a\u00020\u00042\u0006\u0010\n\u001a\u00020\u000bH\'J\u0018\u0010\f\u001a\b\u0012\u0004\u0012\u00020\b0\r2\b\u0010\u000e\u001a\u0004\u0018\u00010\u000fH\'J\u000e\u0010\u0010\u001a\b\u0012\u0004\u0012\u00020\b0\rH\'J\b\u0010\u0011\u001a\u00020\u0004H\'J\u0018\u0010\u0012\u001a\u00020\u00042\u0006\u0010\u0013\u001a\u00020\u00062\u0006\u0010\u0014\u001a\u00020\u0015H\'J\b\u0010\u0016\u001a\u00020\u0004H\'J\b\u0010\u0017\u001a\u00020\u0004H\'J \u0010\u0018\u001a\u00020\u00192\u0006\u0010\u001a\u001a\u00020\u001b2\u0006\u0010\u0007\u001a\u00020\b2\u0006\u0010\u001c\u001a\u00020\u0019H\u0017J\u000e\u0010\u001d\u001a\b\u0012\u0004\u0012\u00020\b0\rH\u0017J\u001e\u0010\u001e\u001a\u00020\u00042\f\u0010\u001f\u001a\b\u0012\u0004\u0012\u00020\b0\r2\u0006\u0010\u001a\u001a\u00020\u001bH\u0017J\u000e\u0010 \u001a\b\u0012\u0004\u0012\u00020\b0\rH\'J\u0012\u0010!\u001a\u0004\u0018\u00010\b2\b\u0010\u000e\u001a\u0004\u0018\u00010\u000fJ\u0016\u0010\"\u001a\b\u0012\u0004\u0012\u00020\b0\r2\u0006\u0010#\u001a\u00020\u0015H\'J\u0016\u0010$\u001a\u00020\u00042\u0006\u0010%\u001a\u00020\b2\u0006\u0010&\u001a\u00020\bJ\u0010\u0010\n\u001a\u00020\u00042\u0006\u0010\'\u001a\u00020\bH\'\u00a8\u0006("}, d2 = {"Lexpo/modules/updates/db/dao/AssetDao;", "", "()V", "_deleteAssetsMarkedForDeletion", "", "_insertAsset", "", "asset", "Lexpo/modules/updates/db/entity/AssetEntity;", "_insertUpdateAsset", "updateAsset", "Lexpo/modules/updates/db/entity/UpdateAssetEntity;", "_loadAssetWithKey", "", "key", "", "_loadAssetsMarkedForDeletion", "_markAllAssetsForDeletion", "_setUpdateLaunchAsset", "assetId", "updateId", "Ljava/util/UUID;", "_unmarkDuplicateUsedAssetsFromDeletion", "_unmarkUsedAssetsFromDeletion", "addExistingAssetToUpdate", "", "update", "Lexpo/modules/updates/db/entity/UpdateEntity;", "isLaunchAsset", "deleteUnusedAssets", "insertAssets", "assets", "loadAllAssets", "loadAssetWithKey", "loadAssetsForUpdate", "id", "mergeAndUpdateAsset", "existingEntity", "newEntity", "assetEntity", "expo-updates_debug"})
public abstract class AssetDao {
    
    public AssetDao() {
        super();
    }
    
    /**
     * for private use only
     * must be marked public for Room
     * so we use the underscore to discourage use
     */
    @androidx.room.Insert(onConflict = androidx.room.OnConflictStrategy.REPLACE)
    public abstract long _insertAsset(@org.jetbrains.annotations.NotNull
    expo.modules.updates.db.entity.AssetEntity asset);
    
    @androidx.room.Insert(onConflict = androidx.room.OnConflictStrategy.REPLACE)
    public abstract void _insertUpdateAsset(@org.jetbrains.annotations.NotNull
    expo.modules.updates.db.entity.UpdateAssetEntity updateAsset);
    
    @androidx.room.Query(value = "UPDATE updates SET launch_asset_id = :assetId WHERE id = :updateId;")
    public abstract void _setUpdateLaunchAsset(long assetId, @org.jetbrains.annotations.NotNull
    java.util.UUID updateId);
    
    @androidx.room.Query(value = "UPDATE assets SET marked_for_deletion = 1;")
    public abstract void _markAllAssetsForDeletion();
    
    @androidx.room.Query(value = "UPDATE assets SET marked_for_deletion = 0 WHERE id IN ( SELECT asset_id FROM updates_assets INNER JOIN updates ON updates_assets.update_id = updates.id WHERE updates.keep);")
    public abstract void _unmarkUsedAssetsFromDeletion();
    
    @androidx.room.Query(value = "UPDATE assets SET marked_for_deletion = 0 WHERE relative_path IN ( SELECT relative_path FROM assets WHERE marked_for_deletion = 0);")
    public abstract void _unmarkDuplicateUsedAssetsFromDeletion();
    
    @org.jetbrains.annotations.NotNull
    @androidx.room.Query(value = "SELECT * FROM assets WHERE marked_for_deletion = 1;")
    public abstract java.util.List<expo.modules.updates.db.entity.AssetEntity> _loadAssetsMarkedForDeletion();
    
    @androidx.room.Query(value = "DELETE FROM assets WHERE marked_for_deletion = 1;")
    public abstract void _deleteAssetsMarkedForDeletion();
    
    @org.jetbrains.annotations.NotNull
    @androidx.room.Query(value = "SELECT * FROM assets WHERE `key` = :key LIMIT 1;")
    public abstract java.util.List<expo.modules.updates.db.entity.AssetEntity> _loadAssetWithKey(@org.jetbrains.annotations.Nullable
    java.lang.String key);
    
    /**
     * for public use
     */
    @org.jetbrains.annotations.NotNull
    @androidx.room.Query(value = "SELECT * FROM assets;")
    public abstract java.util.List<expo.modules.updates.db.entity.AssetEntity> loadAllAssets();
    
    @org.jetbrains.annotations.NotNull
    @androidx.room.Query(value = "SELECT assets.* FROM assets INNER JOIN updates_assets ON updates_assets.asset_id = assets.id INNER JOIN updates ON updates_assets.update_id = updates.id WHERE updates.id = :id;")
    public abstract java.util.List<expo.modules.updates.db.entity.AssetEntity> loadAssetsForUpdate(@org.jetbrains.annotations.NotNull
    java.util.UUID id);
    
    @androidx.room.Update
    public abstract void updateAsset(@org.jetbrains.annotations.NotNull
    expo.modules.updates.db.entity.AssetEntity assetEntity);
    
    @androidx.room.Transaction
    public void insertAssets(@org.jetbrains.annotations.NotNull
    java.util.List<expo.modules.updates.db.entity.AssetEntity> assets, @org.jetbrains.annotations.NotNull
    expo.modules.updates.db.entity.UpdateEntity update) {
    }
    
    @org.jetbrains.annotations.Nullable
    public final expo.modules.updates.db.entity.AssetEntity loadAssetWithKey(@org.jetbrains.annotations.Nullable
    java.lang.String key) {
        return null;
    }
    
    public final void mergeAndUpdateAsset(@org.jetbrains.annotations.NotNull
    expo.modules.updates.db.entity.AssetEntity existingEntity, @org.jetbrains.annotations.NotNull
    expo.modules.updates.db.entity.AssetEntity newEntity) {
    }
    
    @androidx.room.Transaction
    public boolean addExistingAssetToUpdate(@org.jetbrains.annotations.NotNull
    expo.modules.updates.db.entity.UpdateEntity update, @org.jetbrains.annotations.NotNull
    expo.modules.updates.db.entity.AssetEntity asset, boolean isLaunchAsset) {
        return false;
    }
    
    @org.jetbrains.annotations.NotNull
    @androidx.room.Transaction
    public java.util.List<expo.modules.updates.db.entity.AssetEntity> deleteUnusedAssets() {
        return null;
    }
}