package expo.modules.updates.db.entity;

import java.lang.System;

/**
 * Data class that represents a (potential) row in the `updates` table in SQLite. The table schema
 * is autogenerated from this file.
 *
 * expo-updates treats most fields (other than `status`, `keep`, `lastAccessed`, and the launch
 * counts) as effectively immutable once in the database. This means an update server should never
 * host two manifests with the same `id` that differ in any other field, as expo-updates will not
 * take the difference into account.
 *
 * The `scopeKey` field is only relevant in environments such as Expo Go in which updates from
 * multiple scopes can be launched.
 */
@androidx.room.Entity(tableName = "updates", foreignKeys = {@androidx.room.ForeignKey(entity = expo.modules.updates.db.entity.AssetEntity.class, childColumns = {"launch_asset_id"}, onDelete = 5, parentColumns = {"id"})}, indices = {@androidx.room.Index(value = {"launch_asset_id"}), @androidx.room.Index(unique = true, value = {"scope_key", "commit_time"})})
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000F\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\t\n\u0002\u0010\u000b\n\u0002\b\b\n\u0002\u0010\t\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\b\b\b\u0007\u0018\u00002\u00020\u0001B-\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0005\u0012\u0006\u0010\u0006\u001a\u00020\u0007\u0012\u0006\u0010\b\u001a\u00020\u0007\u0012\u0006\u0010\t\u001a\u00020\n\u00a2\u0006\u0002\u0010\u000bR\u001e\u0010\u0004\u001a\u00020\u00058\u0006@\u0006X\u0087\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\f\u0010\r\"\u0004\b\u000e\u0010\u000fR\u001e\u0010\u0010\u001a\u00020\u00118\u0006@\u0006X\u0087\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u0012\u0010\u0013\"\u0004\b\u0014\u0010\u0015R\u001e\u0010\u0002\u001a\u00020\u00038\u0006@\u0006X\u0087\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u0016\u0010\u0017\"\u0004\b\u0018\u0010\u0019R\u001a\u0010\u001a\u001a\u00020\u001bX\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u001c\u0010\u001d\"\u0004\b\u001e\u0010\u001fR\u001e\u0010 \u001a\u00020\u00058\u0006@\u0006X\u0087\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b!\u0010\r\"\u0004\b\"\u0010\u000fR\"\u0010#\u001a\u0004\u0018\u00010$8\u0006@\u0006X\u0087\u000e\u00a2\u0006\u0010\n\u0002\u0010)\u001a\u0004\b%\u0010&\"\u0004\b\'\u0010(R\u0011\u0010*\u001a\u00020\u00078F\u00a2\u0006\u0006\u001a\u0004\b+\u0010,R\u001e\u0010\t\u001a\u00020\n8\u0006@\u0006X\u0087\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b-\u0010.\"\u0004\b/\u00100R\u001e\u0010\u0006\u001a\u00020\u00078\u0006@\u0006X\u0087\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b1\u0010,\"\u0004\b2\u00103R\u001e\u0010\b\u001a\u00020\u00078\u0006@\u0006X\u0087\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b4\u0010,\"\u0004\b5\u00103R\u001a\u00106\u001a\u000207X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b8\u00109\"\u0004\b:\u0010;R\u001e\u0010<\u001a\u00020\u00118\u0006@\u0006X\u0087\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b=\u0010\u0013\"\u0004\b>\u0010\u0015\u00a8\u0006?"}, d2 = {"Lexpo/modules/updates/db/entity/UpdateEntity;", "", "id", "Ljava/util/UUID;", "commitTime", "Ljava/util/Date;", "runtimeVersion", "", "scopeKey", "manifest", "Lorg/json/JSONObject;", "(Ljava/util/UUID;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;Lorg/json/JSONObject;)V", "getCommitTime", "()Ljava/util/Date;", "setCommitTime", "(Ljava/util/Date;)V", "failedLaunchCount", "", "getFailedLaunchCount", "()I", "setFailedLaunchCount", "(I)V", "getId", "()Ljava/util/UUID;", "setId", "(Ljava/util/UUID;)V", "keep", "", "getKeep", "()Z", "setKeep", "(Z)V", "lastAccessed", "getLastAccessed", "setLastAccessed", "launchAssetId", "", "getLaunchAssetId", "()Ljava/lang/Long;", "setLaunchAssetId", "(Ljava/lang/Long;)V", "Ljava/lang/Long;", "loggingId", "getLoggingId", "()Ljava/lang/String;", "getManifest", "()Lorg/json/JSONObject;", "setManifest", "(Lorg/json/JSONObject;)V", "getRuntimeVersion", "setRuntimeVersion", "(Ljava/lang/String;)V", "getScopeKey", "setScopeKey", "status", "Lexpo/modules/updates/db/enums/UpdateStatus;", "getStatus", "()Lexpo/modules/updates/db/enums/UpdateStatus;", "setStatus", "(Lexpo/modules/updates/db/enums/UpdateStatus;)V", "successfulLaunchCount", "getSuccessfulLaunchCount", "setSuccessfulLaunchCount", "expo-updates_debug"})
public final class UpdateEntity {
    @org.jetbrains.annotations.NotNull
    @androidx.room.PrimaryKey
    @androidx.room.ColumnInfo(typeAffinity = androidx.room.ColumnInfo.BLOB)
    private java.util.UUID id;
    @org.jetbrains.annotations.NotNull
    @androidx.room.ColumnInfo(name = "commit_time")
    private java.util.Date commitTime;
    @org.jetbrains.annotations.NotNull
    @androidx.room.ColumnInfo(name = "runtime_version")
    private java.lang.String runtimeVersion;
    @org.jetbrains.annotations.NotNull
    @androidx.room.ColumnInfo(name = "scope_key")
    private java.lang.String scopeKey;
    @org.jetbrains.annotations.NotNull
    @androidx.room.ColumnInfo(name = "manifest")
    private org.json.JSONObject manifest;
    @org.jetbrains.annotations.Nullable
    @androidx.room.ColumnInfo(name = "launch_asset_id")
    private java.lang.Long launchAssetId;
    @org.jetbrains.annotations.NotNull
    private expo.modules.updates.db.enums.UpdateStatus status = expo.modules.updates.db.enums.UpdateStatus.PENDING;
    private boolean keep = false;
    @org.jetbrains.annotations.NotNull
    @androidx.room.ColumnInfo(name = "last_accessed")
    private java.util.Date lastAccessed;
    @androidx.room.ColumnInfo(name = "successful_launch_count", defaultValue = "0")
    private int successfulLaunchCount = 0;
    @androidx.room.ColumnInfo(name = "failed_launch_count", defaultValue = "0")
    private int failedLaunchCount = 0;
    
    public UpdateEntity(@org.jetbrains.annotations.NotNull
    java.util.UUID id, @org.jetbrains.annotations.NotNull
    java.util.Date commitTime, @org.jetbrains.annotations.NotNull
    java.lang.String runtimeVersion, @org.jetbrains.annotations.NotNull
    java.lang.String scopeKey, @org.jetbrains.annotations.NotNull
    org.json.JSONObject manifest) {
        super();
    }
    
    @org.jetbrains.annotations.NotNull
    public final java.util.UUID getId() {
        return null;
    }
    
    public final void setId(@org.jetbrains.annotations.NotNull
    java.util.UUID p0) {
    }
    
    @org.jetbrains.annotations.NotNull
    public final java.util.Date getCommitTime() {
        return null;
    }
    
    public final void setCommitTime(@org.jetbrains.annotations.NotNull
    java.util.Date p0) {
    }
    
    @org.jetbrains.annotations.NotNull
    public final java.lang.String getRuntimeVersion() {
        return null;
    }
    
    public final void setRuntimeVersion(@org.jetbrains.annotations.NotNull
    java.lang.String p0) {
    }
    
    @org.jetbrains.annotations.NotNull
    public final java.lang.String getScopeKey() {
        return null;
    }
    
    public final void setScopeKey(@org.jetbrains.annotations.NotNull
    java.lang.String p0) {
    }
    
    @org.jetbrains.annotations.NotNull
    public final org.json.JSONObject getManifest() {
        return null;
    }
    
    public final void setManifest(@org.jetbrains.annotations.NotNull
    org.json.JSONObject p0) {
    }
    
    @org.jetbrains.annotations.Nullable
    public final java.lang.Long getLaunchAssetId() {
        return null;
    }
    
    public final void setLaunchAssetId(@org.jetbrains.annotations.Nullable
    java.lang.Long p0) {
    }
    
    @org.jetbrains.annotations.NotNull
    public final expo.modules.updates.db.enums.UpdateStatus getStatus() {
        return null;
    }
    
    public final void setStatus(@org.jetbrains.annotations.NotNull
    expo.modules.updates.db.enums.UpdateStatus p0) {
    }
    
    public final boolean getKeep() {
        return false;
    }
    
    public final void setKeep(boolean p0) {
    }
    
    @org.jetbrains.annotations.NotNull
    public final java.lang.String getLoggingId() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    public final java.util.Date getLastAccessed() {
        return null;
    }
    
    public final void setLastAccessed(@org.jetbrains.annotations.NotNull
    java.util.Date p0) {
    }
    
    public final int getSuccessfulLaunchCount() {
        return 0;
    }
    
    public final void setSuccessfulLaunchCount(int p0) {
    }
    
    public final int getFailedLaunchCount() {
        return 0;
    }
    
    public final void setFailedLaunchCount(int p0) {
    }
}