package expo.modules.updates;

import java.lang.System;

/**
 * Holds global, immutable configuration values for updates, as well as doing some rudimentary
 * validation.
 *
 * In most apps, these configuration values are baked into the build, and this class functions as a
 * utility for reading and memoizing the values.
 *
 * In development clients (including Expo Go) where this configuration is intended to be dynamic at
 * runtime and updates from multiple scopes can potentially be opened, multiple instances of this
 * class may be created over the lifetime of the app, but only one should be active at a time.
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000B\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\r\n\u0002\u0018\u0002\n\u0002\b,\b\u0086\b\u0018\u0000 L2\u00020\u0001:\u0002KLB\'\b\u0016\u0012\b\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u0012\u0014\u0010\u0004\u001a\u0010\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u0001\u0018\u00010\u0005\u00a2\u0006\u0002\u0010\u0007B\u009d\u0001\u0012\u0006\u0010\b\u001a\u00020\t\u0012\u0006\u0010\n\u001a\u00020\u0006\u0012\u0006\u0010\u000b\u001a\u00020\f\u0012\b\u0010\r\u001a\u0004\u0018\u00010\u0006\u0012\b\u0010\u000e\u001a\u0004\u0018\u00010\u0006\u0012\u0006\u0010\u000f\u001a\u00020\u0006\u0012\u0006\u0010\u0010\u001a\u00020\u0011\u0012\u0006\u0010\u0012\u001a\u00020\u0013\u0012\u0006\u0010\u0014\u001a\u00020\t\u0012\u0012\u0010\u0015\u001a\u000e\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00060\u0005\u0012\b\u0010\u0016\u001a\u0004\u0018\u00010\u0006\u0012\u0014\u0010\u0017\u001a\u0010\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u0006\u0018\u00010\u0005\u0012\u0006\u0010\u0018\u001a\u00020\t\u0012\u0006\u0010\u0019\u001a\u00020\t\u0012\u0006\u0010\u001a\u001a\u00020\t\u00a2\u0006\u0002\u0010\u001bJ\t\u00106\u001a\u00020\tH\u00c6\u0003J\u0015\u00107\u001a\u000e\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00060\u0005H\u00c6\u0003J\u000b\u00108\u001a\u0004\u0018\u00010\u0006H\u00c6\u0003J\u0017\u00109\u001a\u0010\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u0006\u0018\u00010\u0005H\u00c6\u0003J\t\u0010:\u001a\u00020\tH\u00c6\u0003J\t\u0010;\u001a\u00020\tH\u00c2\u0003J\t\u0010<\u001a\u00020\tH\u00c6\u0003J\t\u0010=\u001a\u00020\u0006H\u00c6\u0003J\t\u0010>\u001a\u00020\fH\u00c6\u0003J\u000b\u0010?\u001a\u0004\u0018\u00010\u0006H\u00c6\u0003J\u000b\u0010@\u001a\u0004\u0018\u00010\u0006H\u00c6\u0003J\t\u0010A\u001a\u00020\u0006H\u00c6\u0003J\t\u0010B\u001a\u00020\u0011H\u00c6\u0003J\t\u0010C\u001a\u00020\u0013H\u00c6\u0003J\t\u0010D\u001a\u00020\tH\u00c6\u0003J\u00bf\u0001\u0010E\u001a\u00020\u00002\b\b\u0002\u0010\b\u001a\u00020\t2\b\b\u0002\u0010\n\u001a\u00020\u00062\b\b\u0002\u0010\u000b\u001a\u00020\f2\n\b\u0002\u0010\r\u001a\u0004\u0018\u00010\u00062\n\b\u0002\u0010\u000e\u001a\u0004\u0018\u00010\u00062\b\b\u0002\u0010\u000f\u001a\u00020\u00062\b\b\u0002\u0010\u0010\u001a\u00020\u00112\b\b\u0002\u0010\u0012\u001a\u00020\u00132\b\b\u0002\u0010\u0014\u001a\u00020\t2\u0014\b\u0002\u0010\u0015\u001a\u000e\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00060\u00052\n\b\u0002\u0010\u0016\u001a\u0004\u0018\u00010\u00062\u0016\b\u0002\u0010\u0017\u001a\u0010\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u0006\u0018\u00010\u00052\b\b\u0002\u0010\u0018\u001a\u00020\t2\b\b\u0002\u0010\u0019\u001a\u00020\t2\b\b\u0002\u0010\u001a\u001a\u00020\tH\u00c6\u0001J\u0013\u0010F\u001a\u00020\t2\b\u0010G\u001a\u0004\u0018\u00010\u0001H\u00d6\u0003J\u0006\u0010H\u001a\u00020\u0006J\t\u0010I\u001a\u00020\u0011H\u00d6\u0001J\t\u0010J\u001a\u00020\u0006H\u00d6\u0001R\u0011\u0010\u0012\u001a\u00020\u0013\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001c\u0010\u001dR\u000e\u0010\u0019\u001a\u00020\tX\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u0013\u0010\u0016\u001a\u0004\u0018\u00010\u0006\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001e\u0010\u001fR\u001d\u0010 \u001a\u0004\u0018\u00010!8FX\u0086\u0084\u0002\u00a2\u0006\f\n\u0004\b$\u0010%\u001a\u0004\b\"\u0010#R\u0011\u0010\u0018\u001a\u00020\t\u00a2\u0006\b\n\u0000\u001a\u0004\b&\u0010\'R\u001f\u0010\u0017\u001a\u0010\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u0006\u0018\u00010\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b(\u0010)R\u0011\u0010\u001a\u001a\u00020\t\u00a2\u0006\b\n\u0000\u001a\u0004\b*\u0010\'R\u0011\u0010\b\u001a\u00020\t\u00a2\u0006\b\n\u0000\u001a\u0004\b+\u0010\'R\u0011\u0010\u0014\u001a\u00020\t\u00a2\u0006\b\n\u0000\u001a\u0004\b,\u0010\'R\u0011\u0010\u0010\u001a\u00020\u0011\u00a2\u0006\b\n\u0000\u001a\u0004\b-\u0010.R\u0011\u0010\u000f\u001a\u00020\u0006\u00a2\u0006\b\n\u0000\u001a\u0004\b/\u0010\u001fR\u001d\u0010\u0015\u001a\u000e\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00060\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b0\u0010)R\u0013\u0010\u000e\u001a\u0004\u0018\u00010\u0006\u00a2\u0006\b\n\u0000\u001a\u0004\b1\u0010\u001fR\u0011\u0010\n\u001a\u00020\u0006\u00a2\u0006\b\n\u0000\u001a\u0004\b2\u0010\u001fR\u0013\u0010\r\u001a\u0004\u0018\u00010\u0006\u00a2\u0006\b\n\u0000\u001a\u0004\b3\u0010\u001fR\u0011\u0010\u000b\u001a\u00020\f\u00a2\u0006\b\n\u0000\u001a\u0004\b4\u00105\u00a8\u0006M"}, d2 = {"Lexpo/modules/updates/UpdatesConfiguration;", "", "context", "Landroid/content/Context;", "overrideMap", "", "", "(Landroid/content/Context;Ljava/util/Map;)V", "expectsSignedManifest", "", "scopeKey", "updateUrl", "Landroid/net/Uri;", "sdkVersion", "runtimeVersionRaw", "releaseChannel", "launchWaitMs", "", "checkOnLaunch", "Lexpo/modules/updates/UpdatesConfiguration$CheckAutomaticallyConfiguration;", "hasEmbeddedUpdate", "requestHeaders", "codeSigningCertificate", "codeSigningMetadata", "codeSigningIncludeManifestResponseCertificateChain", "codeSigningAllowUnsignedManifests", "enableExpoUpdatesProtocolV0CompatibilityMode", "(ZLjava/lang/String;Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILexpo/modules/updates/UpdatesConfiguration$CheckAutomaticallyConfiguration;ZLjava/util/Map;Ljava/lang/String;Ljava/util/Map;ZZZ)V", "getCheckOnLaunch", "()Lexpo/modules/updates/UpdatesConfiguration$CheckAutomaticallyConfiguration;", "getCodeSigningCertificate", "()Ljava/lang/String;", "codeSigningConfiguration", "Lexpo/modules/updates/codesigning/CodeSigningConfiguration;", "getCodeSigningConfiguration", "()Lexpo/modules/updates/codesigning/CodeSigningConfiguration;", "codeSigningConfiguration$delegate", "Lkotlin/Lazy;", "getCodeSigningIncludeManifestResponseCertificateChain", "()Z", "getCodeSigningMetadata", "()Ljava/util/Map;", "getEnableExpoUpdatesProtocolV0CompatibilityMode", "getExpectsSignedManifest", "getHasEmbeddedUpdate", "getLaunchWaitMs", "()I", "getReleaseChannel", "getRequestHeaders", "getRuntimeVersionRaw", "getScopeKey", "getSdkVersion", "getUpdateUrl", "()Landroid/net/Uri;", "component1", "component10", "component11", "component12", "component13", "component14", "component15", "component2", "component3", "component4", "component5", "component6", "component7", "component8", "component9", "copy", "equals", "other", "getRuntimeVersion", "hashCode", "toString", "CheckAutomaticallyConfiguration", "Companion", "expo-updates_debug"})
public final class UpdatesConfiguration {
    private final boolean expectsSignedManifest = false;
    @org.jetbrains.annotations.NotNull
    private final java.lang.String scopeKey = null;
    @org.jetbrains.annotations.NotNull
    private final android.net.Uri updateUrl = null;
    @org.jetbrains.annotations.Nullable
    private final java.lang.String sdkVersion = null;
    @org.jetbrains.annotations.Nullable
    private final java.lang.String runtimeVersionRaw = null;
    @org.jetbrains.annotations.NotNull
    private final java.lang.String releaseChannel = null;
    private final int launchWaitMs = 0;
    @org.jetbrains.annotations.NotNull
    private final expo.modules.updates.UpdatesConfiguration.CheckAutomaticallyConfiguration checkOnLaunch = null;
    private final boolean hasEmbeddedUpdate = false;
    @org.jetbrains.annotations.NotNull
    private final java.util.Map<java.lang.String, java.lang.String> requestHeaders = null;
    @org.jetbrains.annotations.Nullable
    private final java.lang.String codeSigningCertificate = null;
    @org.jetbrains.annotations.Nullable
    private final java.util.Map<java.lang.String, java.lang.String> codeSigningMetadata = null;
    private final boolean codeSigningIncludeManifestResponseCertificateChain = false;
    private final boolean codeSigningAllowUnsignedManifests = false;
    private final boolean enableExpoUpdatesProtocolV0CompatibilityMode = false;
    @org.jetbrains.annotations.Nullable
    private final kotlin.Lazy codeSigningConfiguration$delegate = null;
    @org.jetbrains.annotations.NotNull
    public static final expo.modules.updates.UpdatesConfiguration.Companion Companion = null;
    private static final java.lang.String TAG = null;
    @org.jetbrains.annotations.NotNull
    public static final java.lang.String UPDATES_CONFIGURATION_ENABLED_KEY = "enabled";
    @org.jetbrains.annotations.NotNull
    public static final java.lang.String UPDATES_CONFIGURATION_SCOPE_KEY_KEY = "scopeKey";
    @org.jetbrains.annotations.NotNull
    public static final java.lang.String UPDATES_CONFIGURATION_UPDATE_URL_KEY = "updateUrl";
    @org.jetbrains.annotations.NotNull
    public static final java.lang.String UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY = "requestHeaders";
    @org.jetbrains.annotations.NotNull
    public static final java.lang.String UPDATES_CONFIGURATION_RELEASE_CHANNEL_KEY = "releaseChannel";
    @org.jetbrains.annotations.NotNull
    public static final java.lang.String UPDATES_CONFIGURATION_SDK_VERSION_KEY = "sdkVersion";
    @org.jetbrains.annotations.NotNull
    public static final java.lang.String UPDATES_CONFIGURATION_RUNTIME_VERSION_KEY = "runtimeVersion";
    @org.jetbrains.annotations.NotNull
    public static final java.lang.String UPDATES_CONFIGURATION_CHECK_ON_LAUNCH_KEY = "checkOnLaunch";
    @org.jetbrains.annotations.NotNull
    public static final java.lang.String UPDATES_CONFIGURATION_LAUNCH_WAIT_MS_KEY = "launchWaitMs";
    @org.jetbrains.annotations.NotNull
    public static final java.lang.String UPDATES_CONFIGURATION_HAS_EMBEDDED_UPDATE_KEY = "hasEmbeddedUpdate";
    @org.jetbrains.annotations.NotNull
    public static final java.lang.String UPDATES_CONFIGURATION_EXPECTS_EXPO_SIGNED_MANIFEST = "expectsSignedManifest";
    @org.jetbrains.annotations.NotNull
    public static final java.lang.String UPDATES_CONFIGURATION_ENABLE_EXPO_UPDATES_PROTOCOL_V0_COMPATIBILITY_MODE = "enableExpoUpdatesProtocolCompatibilityMode";
    @org.jetbrains.annotations.NotNull
    public static final java.lang.String UPDATES_CONFIGURATION_CODE_SIGNING_CERTIFICATE = "codeSigningCertificate";
    @org.jetbrains.annotations.NotNull
    public static final java.lang.String UPDATES_CONFIGURATION_CODE_SIGNING_METADATA = "codeSigningMetadata";
    @org.jetbrains.annotations.NotNull
    public static final java.lang.String UPDATES_CONFIGURATION_CODE_SIGNING_INCLUDE_MANIFEST_RESPONSE_CERTIFICATE_CHAIN = "codeSigningIncludeManifestResponseCertificateChain";
    @org.jetbrains.annotations.NotNull
    public static final java.lang.String UPDATES_CONFIGURATION_CODE_SIGNING_ALLOW_UNSIGNED_MANIFESTS = "codeSigningAllowUnsignedManifests";
    @org.jetbrains.annotations.NotNull
    public static final java.lang.String UPDATES_CONFIGURATION_RELEASE_CHANNEL_DEFAULT_VALUE = "default";
    private static final int UPDATES_CONFIGURATION_LAUNCH_WAIT_MS_DEFAULT_VALUE = 0;
    
    /**
     * Holds global, immutable configuration values for updates, as well as doing some rudimentary
     * validation.
     *
     * In most apps, these configuration values are baked into the build, and this class functions as a
     * utility for reading and memoizing the values.
     *
     * In development clients (including Expo Go) where this configuration is intended to be dynamic at
     * runtime and updates from multiple scopes can potentially be opened, multiple instances of this
     * class may be created over the lifetime of the app, but only one should be active at a time.
     */
    @org.jetbrains.annotations.NotNull
    public final expo.modules.updates.UpdatesConfiguration copy(boolean expectsSignedManifest, @org.jetbrains.annotations.NotNull
    java.lang.String scopeKey, @org.jetbrains.annotations.NotNull
    android.net.Uri updateUrl, @org.jetbrains.annotations.Nullable
    java.lang.String sdkVersion, @org.jetbrains.annotations.Nullable
    java.lang.String runtimeVersionRaw, @org.jetbrains.annotations.NotNull
    java.lang.String releaseChannel, int launchWaitMs, @org.jetbrains.annotations.NotNull
    expo.modules.updates.UpdatesConfiguration.CheckAutomaticallyConfiguration checkOnLaunch, boolean hasEmbeddedUpdate, @org.jetbrains.annotations.NotNull
    java.util.Map<java.lang.String, java.lang.String> requestHeaders, @org.jetbrains.annotations.Nullable
    java.lang.String codeSigningCertificate, @org.jetbrains.annotations.Nullable
    java.util.Map<java.lang.String, java.lang.String> codeSigningMetadata, boolean codeSigningIncludeManifestResponseCertificateChain, boolean codeSigningAllowUnsignedManifests, boolean enableExpoUpdatesProtocolV0CompatibilityMode) {
        return null;
    }
    
    /**
     * Holds global, immutable configuration values for updates, as well as doing some rudimentary
     * validation.
     *
     * In most apps, these configuration values are baked into the build, and this class functions as a
     * utility for reading and memoizing the values.
     *
     * In development clients (including Expo Go) where this configuration is intended to be dynamic at
     * runtime and updates from multiple scopes can potentially be opened, multiple instances of this
     * class may be created over the lifetime of the app, but only one should be active at a time.
     */
    @java.lang.Override
    public boolean equals(@org.jetbrains.annotations.Nullable
    java.lang.Object other) {
        return false;
    }
    
    /**
     * Holds global, immutable configuration values for updates, as well as doing some rudimentary
     * validation.
     *
     * In most apps, these configuration values are baked into the build, and this class functions as a
     * utility for reading and memoizing the values.
     *
     * In development clients (including Expo Go) where this configuration is intended to be dynamic at
     * runtime and updates from multiple scopes can potentially be opened, multiple instances of this
     * class may be created over the lifetime of the app, but only one should be active at a time.
     */
    @java.lang.Override
    public int hashCode() {
        return 0;
    }
    
    /**
     * Holds global, immutable configuration values for updates, as well as doing some rudimentary
     * validation.
     *
     * In most apps, these configuration values are baked into the build, and this class functions as a
     * utility for reading and memoizing the values.
     *
     * In development clients (including Expo Go) where this configuration is intended to be dynamic at
     * runtime and updates from multiple scopes can potentially be opened, multiple instances of this
     * class may be created over the lifetime of the app, but only one should be active at a time.
     */
    @org.jetbrains.annotations.NotNull
    @java.lang.Override
    public java.lang.String toString() {
        return null;
    }
    
    public UpdatesConfiguration(boolean expectsSignedManifest, @org.jetbrains.annotations.NotNull
    java.lang.String scopeKey, @org.jetbrains.annotations.NotNull
    android.net.Uri updateUrl, @org.jetbrains.annotations.Nullable
    java.lang.String sdkVersion, @org.jetbrains.annotations.Nullable
    java.lang.String runtimeVersionRaw, @org.jetbrains.annotations.NotNull
    java.lang.String releaseChannel, int launchWaitMs, @org.jetbrains.annotations.NotNull
    expo.modules.updates.UpdatesConfiguration.CheckAutomaticallyConfiguration checkOnLaunch, boolean hasEmbeddedUpdate, @org.jetbrains.annotations.NotNull
    java.util.Map<java.lang.String, java.lang.String> requestHeaders, @org.jetbrains.annotations.Nullable
    java.lang.String codeSigningCertificate, @org.jetbrains.annotations.Nullable
    java.util.Map<java.lang.String, java.lang.String> codeSigningMetadata, boolean codeSigningIncludeManifestResponseCertificateChain, boolean codeSigningAllowUnsignedManifests, boolean enableExpoUpdatesProtocolV0CompatibilityMode) {
        super();
    }
    
    public final boolean component1() {
        return false;
    }
    
    public final boolean getExpectsSignedManifest() {
        return false;
    }
    
    @org.jetbrains.annotations.NotNull
    public final java.lang.String component2() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    public final java.lang.String getScopeKey() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    public final android.net.Uri component3() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    public final android.net.Uri getUpdateUrl() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    public final java.lang.String component4() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    public final java.lang.String getSdkVersion() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    public final java.lang.String component5() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    public final java.lang.String getRuntimeVersionRaw() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    public final java.lang.String component6() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    public final java.lang.String getReleaseChannel() {
        return null;
    }
    
    public final int component7() {
        return 0;
    }
    
    public final int getLaunchWaitMs() {
        return 0;
    }
    
    @org.jetbrains.annotations.NotNull
    public final expo.modules.updates.UpdatesConfiguration.CheckAutomaticallyConfiguration component8() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    public final expo.modules.updates.UpdatesConfiguration.CheckAutomaticallyConfiguration getCheckOnLaunch() {
        return null;
    }
    
    public final boolean component9() {
        return false;
    }
    
    public final boolean getHasEmbeddedUpdate() {
        return false;
    }
    
    @org.jetbrains.annotations.NotNull
    public final java.util.Map<java.lang.String, java.lang.String> component10() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    public final java.util.Map<java.lang.String, java.lang.String> getRequestHeaders() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    public final java.lang.String component11() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    public final java.lang.String getCodeSigningCertificate() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    public final java.util.Map<java.lang.String, java.lang.String> component12() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    public final java.util.Map<java.lang.String, java.lang.String> getCodeSigningMetadata() {
        return null;
    }
    
    public final boolean component13() {
        return false;
    }
    
    public final boolean getCodeSigningIncludeManifestResponseCertificateChain() {
        return false;
    }
    
    private final boolean component14() {
        return false;
    }
    
    public final boolean component15() {
        return false;
    }
    
    public final boolean getEnableExpoUpdatesProtocolV0CompatibilityMode() {
        return false;
    }
    
    public UpdatesConfiguration(@org.jetbrains.annotations.Nullable
    android.content.Context context, @org.jetbrains.annotations.Nullable
    java.util.Map<java.lang.String, ? extends java.lang.Object> overrideMap) {
        super();
    }
    
    @org.jetbrains.annotations.Nullable
    public final expo.modules.updates.codesigning.CodeSigningConfiguration getCodeSigningConfiguration() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    public final java.lang.String getRuntimeVersion() {
        return null;
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u0014\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0005\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002J\b\u0010\u0003\u001a\u00020\u0004H\u0016j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b\u00a8\u0006\t"}, d2 = {"Lexpo/modules/updates/UpdatesConfiguration$CheckAutomaticallyConfiguration;", "", "(Ljava/lang/String;I)V", "toJSString", "", "NEVER", "ERROR_RECOVERY_ONLY", "WIFI_ONLY", "ALWAYS", "expo-updates_debug"})
    public static enum CheckAutomaticallyConfiguration {
        /*public static final*/ NEVER /* = new @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u0010\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0000\b\u00c6\u0001\u0018\u00002\u00020\u0001J\b\u0010\u0002\u001a\u00020\u0003H\u0016\u00a8\u0006\u0004"}, d2 = {"Lexpo/modules/updates/UpdatesConfiguration$CheckAutomaticallyConfiguration$NEVER;", "Lexpo/modules/updates/UpdatesConfiguration$CheckAutomaticallyConfiguration;", "toJSString", "", "expo-updates_debug"}) NEVER(){
    
    NEVER() {
        super();
    }
    
    @org.jetbrains.annotations.NotNull
    @java.lang.Override
    public java.lang.String toJSString() {
        return null;
    }
} */,
        /*public static final*/ ERROR_RECOVERY_ONLY /* = new @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u0010\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0000\b\u00c6\u0001\u0018\u00002\u00020\u0001J\b\u0010\u0002\u001a\u00020\u0003H\u0016\u00a8\u0006\u0004"}, d2 = {"Lexpo/modules/updates/UpdatesConfiguration$CheckAutomaticallyConfiguration$ERROR_RECOVERY_ONLY;", "Lexpo/modules/updates/UpdatesConfiguration$CheckAutomaticallyConfiguration;", "toJSString", "", "expo-updates_debug"}) ERROR_RECOVERY_ONLY(){
    
    ERROR_RECOVERY_ONLY() {
        super();
    }
    
    @org.jetbrains.annotations.NotNull
    @java.lang.Override
    public java.lang.String toJSString() {
        return null;
    }
} */,
        /*public static final*/ WIFI_ONLY /* = new @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u0010\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0000\b\u00c6\u0001\u0018\u00002\u00020\u0001J\b\u0010\u0002\u001a\u00020\u0003H\u0016\u00a8\u0006\u0004"}, d2 = {"Lexpo/modules/updates/UpdatesConfiguration$CheckAutomaticallyConfiguration$WIFI_ONLY;", "Lexpo/modules/updates/UpdatesConfiguration$CheckAutomaticallyConfiguration;", "toJSString", "", "expo-updates_debug"}) WIFI_ONLY(){
    
    WIFI_ONLY() {
        super();
    }
    
    @org.jetbrains.annotations.NotNull
    @java.lang.Override
    public java.lang.String toJSString() {
        return null;
    }
} */,
        /*public static final*/ ALWAYS /* = new @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u0010\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0000\b\u00c6\u0001\u0018\u00002\u00020\u0001J\b\u0010\u0002\u001a\u00020\u0003H\u0016\u00a8\u0006\u0004"}, d2 = {"Lexpo/modules/updates/UpdatesConfiguration$CheckAutomaticallyConfiguration$ALWAYS;", "Lexpo/modules/updates/UpdatesConfiguration$CheckAutomaticallyConfiguration;", "toJSString", "", "expo-updates_debug"}) ALWAYS(){
    
    ALWAYS() {
        super();
    }
    
    @org.jetbrains.annotations.NotNull
    @java.lang.Override
    public java.lang.String toJSString() {
        return null;
    }
} */;
        
        CheckAutomaticallyConfiguration() {
        }
        
        @org.jetbrains.annotations.NotNull
        public java.lang.String toJSString() {
            return null;
        }
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000>\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u000b\n\u0002\u0010\b\n\u0002\b\t\n\u0002\u0010\u000b\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002J(\u0010\u0019\u001a\u00020\u001a2\b\u0010\u001b\u001a\u0004\u0018\u00010\u001c2\u0014\u0010\u001d\u001a\u0010\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u0001\u0018\u00010\u001eH\u0002J*\u0010\u001f\u001a\u0004\u0018\u00010\u00042\b\u0010\u001b\u001a\u0004\u0018\u00010\u001c2\u0014\u0010\u001d\u001a\u0010\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u0001\u0018\u00010\u001eH\u0002J*\u0010 \u001a\u0004\u0018\u00010\u00042\b\u0010\u001b\u001a\u0004\u0018\u00010\u001c2\u0014\u0010\u001d\u001a\u0010\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u0001\u0018\u00010\u001eH\u0002J&\u0010!\u001a\u00020\"2\b\u0010\u001b\u001a\u0004\u0018\u00010\u001c2\u0014\u0010\u001d\u001a\u0010\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u0001\u0018\u00010\u001eJ*\u0010#\u001a\u0004\u0018\u00010$2\b\u0010\u001b\u001a\u0004\u0018\u00010\u001c2\u0014\u0010\u001d\u001a\u0010\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u0001\u0018\u00010\u001eH\u0002J&\u0010%\u001a\u00020\u001a2\b\u0010\u001b\u001a\u0004\u0018\u00010\u001c2\u0014\u0010\u001d\u001a\u0010\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u0001\u0018\u00010\u001eR\u0016\u0010\u0003\u001a\n \u0005*\u0004\u0018\u00010\u00040\u0004X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0006\u001a\u00020\u0004X\u0086T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0007\u001a\u00020\u0004X\u0086T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\b\u001a\u00020\u0004X\u0086T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\t\u001a\u00020\u0004X\u0086T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\n\u001a\u00020\u0004X\u0086T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u000b\u001a\u00020\u0004X\u0086T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\f\u001a\u00020\u0004X\u0086T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\r\u001a\u00020\u0004X\u0086T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u000e\u001a\u00020\u0004X\u0086T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u000f\u001a\u00020\u0010X\u0082T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0011\u001a\u00020\u0004X\u0086T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0012\u001a\u00020\u0004X\u0086T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0013\u001a\u00020\u0004X\u0086T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0014\u001a\u00020\u0004X\u0086T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0015\u001a\u00020\u0004X\u0086T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0016\u001a\u00020\u0004X\u0086T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0017\u001a\u00020\u0004X\u0086T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0018\u001a\u00020\u0004X\u0086T\u00a2\u0006\u0002\n\u0000\u00a8\u0006&"}, d2 = {"Lexpo/modules/updates/UpdatesConfiguration$Companion;", "", "()V", "TAG", "", "kotlin.jvm.PlatformType", "UPDATES_CONFIGURATION_CHECK_ON_LAUNCH_KEY", "UPDATES_CONFIGURATION_CODE_SIGNING_ALLOW_UNSIGNED_MANIFESTS", "UPDATES_CONFIGURATION_CODE_SIGNING_CERTIFICATE", "UPDATES_CONFIGURATION_CODE_SIGNING_INCLUDE_MANIFEST_RESPONSE_CERTIFICATE_CHAIN", "UPDATES_CONFIGURATION_CODE_SIGNING_METADATA", "UPDATES_CONFIGURATION_ENABLED_KEY", "UPDATES_CONFIGURATION_ENABLE_EXPO_UPDATES_PROTOCOL_V0_COMPATIBILITY_MODE", "UPDATES_CONFIGURATION_EXPECTS_EXPO_SIGNED_MANIFEST", "UPDATES_CONFIGURATION_HAS_EMBEDDED_UPDATE_KEY", "UPDATES_CONFIGURATION_LAUNCH_WAIT_MS_DEFAULT_VALUE", "", "UPDATES_CONFIGURATION_LAUNCH_WAIT_MS_KEY", "UPDATES_CONFIGURATION_RELEASE_CHANNEL_DEFAULT_VALUE", "UPDATES_CONFIGURATION_RELEASE_CHANNEL_KEY", "UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY", "UPDATES_CONFIGURATION_RUNTIME_VERSION_KEY", "UPDATES_CONFIGURATION_SCOPE_KEY_KEY", "UPDATES_CONFIGURATION_SDK_VERSION_KEY", "UPDATES_CONFIGURATION_UPDATE_URL_KEY", "getIsEnabled", "", "context", "Landroid/content/Context;", "overrideMap", "", "getRuntimeVersion", "getSDKVersion", "getUpdatesConfigurationValidationResult", "Lexpo/modules/updates/UpdatesConfigurationValidationResult;", "getUpdatesUrl", "Landroid/net/Uri;", "isMissingRuntimeVersion", "expo-updates_debug"})
    public static final class Companion {
        
        private Companion() {
            super();
        }
        
        private final android.net.Uri getUpdatesUrl(android.content.Context context, java.util.Map<java.lang.String, ? extends java.lang.Object> overrideMap) {
            return null;
        }
        
        private final boolean getIsEnabled(android.content.Context context, java.util.Map<java.lang.String, ? extends java.lang.Object> overrideMap) {
            return false;
        }
        
        private final java.lang.String getSDKVersion(android.content.Context context, java.util.Map<java.lang.String, ? extends java.lang.Object> overrideMap) {
            return null;
        }
        
        private final java.lang.String getRuntimeVersion(android.content.Context context, java.util.Map<java.lang.String, ? extends java.lang.Object> overrideMap) {
            return null;
        }
        
        public final boolean isMissingRuntimeVersion(@org.jetbrains.annotations.Nullable
        android.content.Context context, @org.jetbrains.annotations.Nullable
        java.util.Map<java.lang.String, ? extends java.lang.Object> overrideMap) {
            return false;
        }
        
        @org.jetbrains.annotations.NotNull
        public final expo.modules.updates.UpdatesConfigurationValidationResult getUpdatesConfigurationValidationResult(@org.jetbrains.annotations.Nullable
        android.content.Context context, @org.jetbrains.annotations.Nullable
        java.util.Map<java.lang.String, ? extends java.lang.Object> overrideMap) {
            return null;
        }
    }
}