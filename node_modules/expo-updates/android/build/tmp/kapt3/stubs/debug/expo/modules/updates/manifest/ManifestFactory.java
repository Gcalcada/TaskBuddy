package expo.modules.updates.manifest;

import java.lang.System;

/**
 * Utility methods for parsing a JSON manifest using the correct [UpdateManifest] implementation.
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u00004\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\b\u00c6\u0002\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002J\u0016\u0010\u0006\u001a\u00020\u00072\u0006\u0010\b\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000bJ(\u0010\f\u001a\u00020\r2\u0006\u0010\b\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\u0010\u0010\u001a\u0004\u0018\u00010\t2\u0006\u0010\n\u001a\u00020\u000bR\u0016\u0010\u0003\u001a\n \u0005*\u0004\u0018\u00010\u00040\u0004X\u0082\u0004\u00a2\u0006\u0002\n\u0000\u00a8\u0006\u0011"}, d2 = {"Lexpo/modules/updates/manifest/ManifestFactory;", "", "()V", "TAG", "", "kotlin.jvm.PlatformType", "getEmbeddedManifest", "Lexpo/modules/updates/manifest/BareUpdateManifest;", "manifestJson", "Lorg/json/JSONObject;", "configuration", "Lexpo/modules/updates/UpdatesConfiguration;", "getManifest", "Lexpo/modules/updates/manifest/UpdateManifest;", "responseHeaderData", "Lexpo/modules/updates/manifest/ResponseHeaderData;", "extensions", "expo-updates_debug"})
public final class ManifestFactory {
    @org.jetbrains.annotations.NotNull
    public static final expo.modules.updates.manifest.ManifestFactory INSTANCE = null;
    private static final java.lang.String TAG = null;
    
    private ManifestFactory() {
        super();
    }
    
    @org.jetbrains.annotations.NotNull
    @kotlin.jvm.Throws(exceptionClasses = {java.lang.Exception.class})
    public final expo.modules.updates.manifest.UpdateManifest getManifest(@org.jetbrains.annotations.NotNull
    org.json.JSONObject manifestJson, @org.jetbrains.annotations.NotNull
    expo.modules.updates.manifest.ResponseHeaderData responseHeaderData, @org.jetbrains.annotations.Nullable
    org.json.JSONObject extensions, @org.jetbrains.annotations.NotNull
    expo.modules.updates.UpdatesConfiguration configuration) throws java.lang.Exception {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    @kotlin.jvm.Throws(exceptionClasses = {org.json.JSONException.class})
    public final expo.modules.updates.manifest.BareUpdateManifest getEmbeddedManifest(@org.jetbrains.annotations.NotNull
    org.json.JSONObject manifestJson, @org.jetbrains.annotations.NotNull
    expo.modules.updates.UpdatesConfiguration configuration) throws org.json.JSONException {
        return null;
    }
}