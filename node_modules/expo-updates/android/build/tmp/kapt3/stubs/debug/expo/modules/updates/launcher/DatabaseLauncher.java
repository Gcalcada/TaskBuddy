package expo.modules.updates.launcher;

import java.lang.System;

/**
 * Implementation of [Launcher] that uses the SQLite database and expo-updates file store as the
 * source of updates.
 *
 * Uses the [SelectionPolicy] to choose an update from SQLite to launch, then ensures that the
 * update is safe and ready to launch (i.e. all the assets that SQLite expects to be stored on disk
 * are actually there).
 *
 * This class also includes failsafe code to attempt to re-download any assets unexpectedly missing
 * from disk (since it isn't necessarily safe to just revert to an older update in this case).
 * Distinct from the [Loader] classes, though, this class does *not* make any major modifications to
 * the database; its role is mostly to read the database and ensure integrity with the file system.
 *
 * It's important that the update to launch is selected *before* any other checks, e.g. the above
 * check for assets on disk. This is to preserve the invariant that no older update should ever be
 * launched after a newer one has been launched.
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u0086\u0001\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\u0010%\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0004\u0018\u0000 62\u00020\u0001:\u00016B\'\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\b\u0010\u0004\u001a\u0004\u0018\u00010\u0005\u0012\u0006\u0010\u0006\u001a\u00020\u0007\u0012\u0006\u0010\b\u001a\u00020\t\u00a2\u0006\u0002\u0010\nJ\u001c\u0010*\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u00020\u000f0#2\u0006\u0010+\u001a\u00020,H\u0002J \u0010-\u001a\u0004\u0018\u00010\u00052\u0006\u0010.\u001a\u00020$2\u0006\u0010/\u001a\u0002002\u0006\u0010+\u001a\u00020,J\u0018\u00101\u001a\u0004\u0018\u00010\u001d2\u0006\u0010/\u001a\u0002002\u0006\u0010+\u001a\u00020,J \u00102\u001a\u0002032\u0006\u0010/\u001a\u0002002\u0006\u0010+\u001a\u00020,2\b\u0010\u0013\u001a\u0004\u0018\u00010\u0014J\u001a\u00104\u001a\u0002032\u0006\u0010.\u001a\u00020$2\b\u00105\u001a\u0004\u0018\u00010\u0005H\u0002R\u000e\u0010\u000b\u001a\u00020\fX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010\r\u001a\u00020\fX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\"\u0010\u0010\u001a\u0004\u0018\u00010\u000f2\b\u0010\u000e\u001a\u0004\u0018\u00010\u000f@RX\u0096\u000e\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0011\u0010\u0012R\u0010\u0010\u0013\u001a\u0004\u0018\u00010\u0014X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0002\u001a\u00020\u0003X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0006\u001a\u00020\u0007X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u0014\u0010\u0015\u001a\u00020\u00168VX\u0096\u0004\u00a2\u0006\u0006\u001a\u0004\b\u0015\u0010\u0017R\u0016\u0010\u0018\u001a\n\u0018\u00010\u0019j\u0004\u0018\u0001`\u001aX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\"\u0010\u001b\u001a\u0004\u0018\u00010\u000f2\b\u0010\u000e\u001a\u0004\u0018\u00010\u000f@RX\u0096\u000e\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001c\u0010\u0012R\"\u0010\u001e\u001a\u0004\u0018\u00010\u001d2\b\u0010\u000e\u001a\u0004\u0018\u00010\u001d@RX\u0096\u000e\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001f\u0010 R\u000e\u0010!\u001a\u00020\"X\u0082\u0004\u00a2\u0006\u0002\n\u0000R:\u0010%\u001a\u0010\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u00020\u000f\u0018\u00010#2\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u00020\u000f\u0018\u00010#@RX\u0096\u000e\u00a2\u0006\b\n\u0000\u001a\u0004\b&\u0010\'R\u0010\u0010(\u001a\u0004\u0018\u00010)X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010\b\u001a\u00020\tX\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u0010\u0010\u0004\u001a\u0004\u0018\u00010\u0005X\u0082\u0004\u00a2\u0006\u0002\n\u0000\u00a8\u00067"}, d2 = {"Lexpo/modules/updates/launcher/DatabaseLauncher;", "Lexpo/modules/updates/launcher/Launcher;", "configuration", "Lexpo/modules/updates/UpdatesConfiguration;", "updatesDirectory", "Ljava/io/File;", "fileDownloader", "Lexpo/modules/updates/loader/FileDownloader;", "selectionPolicy", "Lexpo/modules/updates/selectionpolicy/SelectionPolicy;", "(Lexpo/modules/updates/UpdatesConfiguration;Ljava/io/File;Lexpo/modules/updates/loader/FileDownloader;Lexpo/modules/updates/selectionpolicy/SelectionPolicy;)V", "assetsToDownload", "", "assetsToDownloadFinished", "<set-?>", "", "bundleAssetName", "getBundleAssetName", "()Ljava/lang/String;", "callback", "Lexpo/modules/updates/launcher/Launcher$LauncherCallback;", "isUsingEmbeddedAssets", "", "()Z", "launchAssetException", "Ljava/lang/Exception;", "Lkotlin/Exception;", "launchAssetFile", "getLaunchAssetFile", "Lexpo/modules/updates/db/entity/UpdateEntity;", "launchedUpdate", "getLaunchedUpdate", "()Lexpo/modules/updates/db/entity/UpdateEntity;", "loaderFiles", "Lexpo/modules/updates/loader/LoaderFiles;", "", "Lexpo/modules/updates/db/entity/AssetEntity;", "localAssetFiles", "getLocalAssetFiles", "()Ljava/util/Map;", "logger", "Lexpo/modules/updates/logging/UpdatesLogger;", "embeddedAssetFileMap", "context", "Landroid/content/Context;", "ensureAssetExists", "asset", "database", "Lexpo/modules/updates/db/UpdatesDatabase;", "getLaunchableUpdate", "launch", "", "maybeFinish", "assetFile", "Companion", "expo-updates_debug"})
public final class DatabaseLauncher implements expo.modules.updates.launcher.Launcher {
    private final expo.modules.updates.UpdatesConfiguration configuration = null;
    private final java.io.File updatesDirectory = null;
    private final expo.modules.updates.loader.FileDownloader fileDownloader = null;
    private final expo.modules.updates.selectionpolicy.SelectionPolicy selectionPolicy = null;
    private final expo.modules.updates.loader.LoaderFiles loaderFiles = null;
    @org.jetbrains.annotations.Nullable
    private expo.modules.updates.db.entity.UpdateEntity launchedUpdate;
    @org.jetbrains.annotations.Nullable
    private java.lang.String launchAssetFile;
    @org.jetbrains.annotations.Nullable
    private java.lang.String bundleAssetName;
    @org.jetbrains.annotations.Nullable
    private java.util.Map<expo.modules.updates.db.entity.AssetEntity, java.lang.String> localAssetFiles;
    private int assetsToDownload = 0;
    private int assetsToDownloadFinished = 0;
    private java.lang.Exception launchAssetException;
    private expo.modules.updates.launcher.Launcher.LauncherCallback callback;
    private expo.modules.updates.logging.UpdatesLogger logger;
    @org.jetbrains.annotations.NotNull
    public static final expo.modules.updates.launcher.DatabaseLauncher.Companion Companion = null;
    private static final java.lang.String TAG = null;
    
    public DatabaseLauncher(@org.jetbrains.annotations.NotNull
    expo.modules.updates.UpdatesConfiguration configuration, @org.jetbrains.annotations.Nullable
    java.io.File updatesDirectory, @org.jetbrains.annotations.NotNull
    expo.modules.updates.loader.FileDownloader fileDownloader, @org.jetbrains.annotations.NotNull
    expo.modules.updates.selectionpolicy.SelectionPolicy selectionPolicy) {
        super();
    }
    
    @org.jetbrains.annotations.Nullable
    @java.lang.Override
    public expo.modules.updates.db.entity.UpdateEntity getLaunchedUpdate() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    @java.lang.Override
    public java.lang.String getLaunchAssetFile() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    @java.lang.Override
    public java.lang.String getBundleAssetName() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    @java.lang.Override
    public java.util.Map<expo.modules.updates.db.entity.AssetEntity, java.lang.String> getLocalAssetFiles() {
        return null;
    }
    
    @java.lang.Override
    public boolean isUsingEmbeddedAssets() {
        return false;
    }
    
    @kotlin.jvm.Synchronized
    public final synchronized void launch(@org.jetbrains.annotations.NotNull
    expo.modules.updates.db.UpdatesDatabase database, @org.jetbrains.annotations.NotNull
    android.content.Context context, @org.jetbrains.annotations.Nullable
    expo.modules.updates.launcher.Launcher.LauncherCallback callback) {
    }
    
    @org.jetbrains.annotations.Nullable
    public final expo.modules.updates.db.entity.UpdateEntity getLaunchableUpdate(@org.jetbrains.annotations.NotNull
    expo.modules.updates.db.UpdatesDatabase database, @org.jetbrains.annotations.NotNull
    android.content.Context context) {
        return null;
    }
    
    private final java.util.Map<expo.modules.updates.db.entity.AssetEntity, java.lang.String> embeddedAssetFileMap(android.content.Context context) {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    public final java.io.File ensureAssetExists(@org.jetbrains.annotations.NotNull
    expo.modules.updates.db.entity.AssetEntity asset, @org.jetbrains.annotations.NotNull
    expo.modules.updates.db.UpdatesDatabase database, @org.jetbrains.annotations.NotNull
    android.content.Context context) {
        return null;
    }
    
    @kotlin.jvm.Synchronized
    private final synchronized void maybeFinish(expo.modules.updates.db.entity.AssetEntity asset, java.io.File assetFile) {
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u0014\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0002\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002R\u0016\u0010\u0003\u001a\n \u0005*\u0004\u0018\u00010\u00040\u0004X\u0082\u0004\u00a2\u0006\u0002\n\u0000\u00a8\u0006\u0006"}, d2 = {"Lexpo/modules/updates/launcher/DatabaseLauncher$Companion;", "", "()V", "TAG", "", "kotlin.jvm.PlatformType", "expo-updates_debug"})
    public static final class Companion {
        
        private Companion() {
            super();
        }
    }
}