"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EasJsonReader = void 0;
const tslib_1 = require("tslib");
const json_file_1 = tslib_1.__importDefault(require("@expo/json-file"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
const resolver_1 = require("./build/resolver");
const errors_1 = require("./errors");
const schema_1 = require("./schema");
const resolver_2 = require("./submit/resolver");
class EasJsonReader {
    constructor(projectDir) {
        this.projectDir = projectDir;
    }
    static formatEasJsonPath(projectDir) {
        return path_1.default.join(projectDir, 'eas.json');
    }
    async readAsync() {
        if (this.easJson) {
            return this.easJson;
        }
        try {
            const easJsonPath = EasJsonReader.formatEasJsonPath(this.projectDir);
            if (!(await fs_extra_1.default.pathExists(easJsonPath))) {
                throw new errors_1.MissingEasJsonError(`eas.json could not be found at ${easJsonPath}. Learn more at https://expo.fyi/eas-json`);
            }
            const contents = json_file_1.default.read(easJsonPath);
            const { value, error } = schema_1.EasJsonSchema.validate(contents, {
                allowUnknown: false,
                abortEarly: false,
                convert: true,
                noDefaults: true,
            });
            if (error) {
                throw new errors_1.InvalidEasJsonError(`eas.json is not valid [${error.toString()}]`);
            }
            this.easJson = value;
            return value;
        }
        catch (err) {
            if (err.code === 'EJSONPARSE') {
                err.message = `Found invalid JSON in eas.json. ${err.message}`;
            }
            throw err;
        }
    }
    async getBuildProfileNamesAsync() {
        var _a;
        const easJson = await this.readAsync();
        return Object.keys((_a = easJson === null || easJson === void 0 ? void 0 : easJson.build) !== null && _a !== void 0 ? _a : {});
    }
    async getBuildProfileAsync(platform, profileName) {
        const easJson = await this.readAsync();
        return (0, resolver_1.resolveBuildProfile)({ easJson, platform, profileName });
    }
    async getCliConfigAsync() {
        var _a;
        try {
            const easJson = await this.readAsync();
            return (_a = easJson.cli) !== null && _a !== void 0 ? _a : null;
        }
        catch (err) {
            if (err instanceof errors_1.MissingEasJsonError) {
                return null;
            }
            throw err;
        }
    }
    async getSubmitProfileNamesAsync() {
        var _a;
        const easJson = await this.readAsync();
        return Object.keys((_a = easJson === null || easJson === void 0 ? void 0 : easJson.submit) !== null && _a !== void 0 ? _a : {});
    }
    async getSubmitProfileAsync(platform, profileName) {
        const easJson = await this.readAsync();
        return (0, resolver_2.resolveSubmitProfile)({ easJson, platform, profileName });
    }
}
exports.EasJsonReader = EasJsonReader;
