"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultProfile = exports.resolveSubmitProfile = void 0;
const tslib_1 = require("tslib");
const eas_build_job_1 = require("@expo/eas-build-job");
const env_string_1 = tslib_1.__importDefault(require("env-string"));
const errors_1 = require("../errors");
const schema_1 = require("./schema");
const types_1 = require("./types");
function resolveSubmitProfile({ easJson, platform, profileName, }) {
    const submitProfile = resolveProfile({
        easJson,
        platform,
        profileName,
    });
    const unevaluatedProfile = mergeProfiles(getDefaultProfile(platform), submitProfile);
    return evaluateFields(platform, unevaluatedProfile);
}
exports.resolveSubmitProfile = resolveSubmitProfile;
function resolveProfile({ easJson, profileName, depth = 0, platform, }) {
    var _a;
    if (depth >= 2) {
        throw new Error('Too long chain of profile extensions, make sure "extends" keys do not make a cycle');
    }
    const profile = (_a = easJson.submit) === null || _a === void 0 ? void 0 : _a[profileName];
    if (!profile) {
        if (depth === 0) {
            throw new errors_1.MissingProfileError(`Missing submit profile in eas.json: ${profileName}`);
        }
        else {
            throw new errors_1.MissingParentProfileError(`Extending non-existent submit profile in eas.json: ${profileName}`);
        }
    }
    const { extends: baseProfileName, ...rest } = profile;
    const platformProfile = rest[platform];
    if (baseProfileName) {
        const baseProfile = resolveProfile({
            easJson,
            platform,
            profileName: baseProfileName,
            depth: depth + 1,
        });
        return mergeProfiles(baseProfile, platformProfile);
    }
    else {
        return platformProfile;
    }
}
function mergeProfiles(base, update) {
    if (!update) {
        return base;
    }
    return { ...base, ...update };
}
function getDefaultProfile(platform) {
    const Schema = platform === eas_build_job_1.Platform.ANDROID ? schema_1.AndroidSubmitProfileSchema : schema_1.IosSubmitProfileSchema;
    return Schema.validate({}, { allowUnknown: false, abortEarly: false, convert: true }).value;
}
exports.getDefaultProfile = getDefaultProfile;
function evaluateFields(platform, profile) {
    const fields = platform === eas_build_job_1.Platform.ANDROID
        ? types_1.AndroidSubmitProfileFieldsToEvaluate
        : types_1.IosSubmitProfileFieldsToEvaluate;
    const evaluatedProfile = { ...profile };
    for (const field of fields) {
        if (field in evaluatedProfile) {
            // @ts-ignore
            evaluatedProfile[field] = (0, env_string_1.default)(evaluatedProfile[field], process.env);
        }
    }
    return evaluatedProfile;
}
