"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveBuildProfile = void 0;
const errors_1 = require("../errors");
const schema_1 = require("./schema");
function resolveBuildProfile({ easJson, platform, profileName, }) {
    var _a;
    const easJsonProfile = resolveProfile({
        easJson,
        profileName,
    });
    const { android, ios, ...base } = easJsonProfile;
    const withoutDefaults = mergeProfiles(base, (_a = easJsonProfile[platform]) !== null && _a !== void 0 ? _a : {});
    return mergeProfiles(getDefaultProfile(platform), withoutDefaults);
}
exports.resolveBuildProfile = resolveBuildProfile;
function resolveProfile({ easJson, profileName, depth = 0, }) {
    var _a;
    if (depth >= 2) {
        throw new Error('Too long chain of profile extensions, make sure "extends" keys do not make a cycle');
    }
    const profile = (_a = easJson.build) === null || _a === void 0 ? void 0 : _a[profileName];
    if (!profile) {
        if (depth === 0) {
            throw new errors_1.MissingProfileError(`Missing build profile in eas.json: ${profileName}`);
        }
        else {
            throw new errors_1.MissingParentProfileError(`Extending non-existent build profile in eas.json: ${profileName}`);
        }
    }
    const { extends: baseProfileName, ...rest } = profile;
    if (baseProfileName) {
        const baseProfile = resolveProfile({
            easJson,
            profileName: baseProfileName,
            depth: depth + 1,
        });
        return mergeProfiles(baseProfile, rest);
    }
    else {
        return rest;
    }
}
function mergeProfiles(base, update) {
    const result = {
        ...base,
        ...update,
    };
    if (base.env && update.env) {
        result.env = {
            ...base.env,
            ...update.env,
        };
    }
    if (base.android && update.android) {
        result.android = mergeProfiles(base.android, update.android);
    }
    if (base.ios && update.ios) {
        result.ios = mergeProfiles(base.ios, update.ios);
    }
    return result;
}
function getDefaultProfile(platform) {
    const defaultProfile = schema_1.BuildProfileSchema.validate({}, { allowUnknown: false, abortEarly: false, convert: true }).value;
    const { android, ios, ...base } = defaultProfile;
    return mergeProfiles(base, defaultProfile[platform]);
}
