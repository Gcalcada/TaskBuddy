{"version":3,"file":"metadata.js","sourceRoot":"","sources":["../src/metadata.ts"],"names":[],"mappings":";;;;;;AAAA,8CAAsB;AAsHT,QAAA,cAAc,GAAG,aAAG,CAAC,MAAM,CAAC;IACvC,eAAe,EAAE,aAAG,CAAC,MAAM,EAAE;SAC1B,OAAO,CAAC,aAAG,CAAC,MAAM,EAAE,EAAE,CAAC,aAAG,CAAC,MAAM,EAAE,EAAE,aAAG,CAAC,MAAM,EAAE,EAAE,aAAG,CAAC,OAAO,EAAE,CAAC,CAAC;SAClE,QAAQ,EAAE;IACb,UAAU,EAAE,aAAG,CAAC,MAAM,EAAE;IACxB,eAAe,EAAE,aAAG,CAAC,MAAM,EAAE;IAC7B,UAAU,EAAE,aAAG,CAAC,MAAM,EAAE;IACxB,QAAQ,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC;IAClD,YAAY,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE,UAAU,EAAE,WAAW,CAAC;IAClE,iBAAiB,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC;IACxD,UAAU,EAAE,aAAG,CAAC,MAAM,EAAE;IACxB,cAAc,EAAE,aAAG,CAAC,MAAM,EAAE;IAC5B,kBAAkB,EAAE,aAAG,CAAC,MAAM,EAAE;IAChC,cAAc,EAAE,aAAG,CAAC,MAAM,EAAE;IAC5B,OAAO,EAAE,aAAG,CAAC,MAAM,EAAE;IACrB,OAAO,EAAE,aAAG,CAAC,MAAM,EAAE;IACrB,aAAa,EAAE,aAAG,CAAC,MAAM,EAAE;IAC3B,YAAY,EAAE,aAAG,CAAC,MAAM,EAAE;IAC1B,aAAa,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE;IAC5C,qBAAqB,EAAE,aAAG,CAAC,OAAO,EAAE;IACpC,QAAQ,EAAE,aAAG,CAAC,MAAM,EAAE;IACtB,yBAAyB,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE,WAAW,CAAC;CACpE,CAAC,CAAC;AAEH,SAAgB,gBAAgB,CAAC,QAAgB;IAC/C,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,sBAAc,CAAC,QAAQ,CAAC,QAAQ,EAAE;QACzD,YAAY,EAAE,IAAI;QAClB,OAAO,EAAE,IAAI;QACb,UAAU,EAAE,KAAK;KAClB,CAAC,CAAC;IACH,IAAI,KAAK,EAAE;QACT,MAAM,KAAK,CAAC;KACb;SAAM;QACL,OAAO,KAAK,CAAC;KACd;AACH,CAAC;AAXD,4CAWC","sourcesContent":["import Joi from 'joi';\n\nimport { Workflow } from './common';\n\nexport type Metadata = {\n  /**\n   * Tracking context\n   * It's used to track build process across different Expo services and tools.\n   */\n  trackingContext: Record<string, string | number | boolean>;\n\n  /**\n   * Application version:\n   * - managed projects: expo.version in app.json/app.config.js\n   * - generic projects:\n   *   * iOS: CFBundleShortVersionString in Info.plist\n   *   * Android: versionName in build.gradle\n   */\n  appVersion?: string;\n\n  /**\n   * Application build version:\n   * - Android: version code\n   * - iOS: build number\n   */\n  appBuildVersion?: string;\n\n  /**\n   * EAS CLI version\n   */\n  cliVersion?: string;\n\n  /**\n   * Build workflow\n   * It's either 'generic' or 'managed'\n   */\n  workflow?: Workflow;\n\n  /**\n   * Credentials source\n   * Credentials could be obtained either from credential.json or EAS servers.\n   */\n  credentialsSource?: 'local' | 'remote';\n\n  /**\n   * Expo SDK version\n   * It's determined by the expo package version in package.json.\n   * It's undefined if the expo package is not installed for the project.\n   */\n  sdkVersion?: string;\n\n  /**\n   * Runtime version (for Expo Updates)\n   */\n  runtimeVersion?: string;\n\n  /**\n   * Release channel (for classic expo-updates)\n   * It's undefined if the classic expo-updates package is not installed for the project.\n   */\n  releaseChannel?: string;\n\n  /**\n   * Version of the react-native package used in the project.\n   */\n  reactNativeVersion?: string;\n\n  /**\n   * Channel (for Expo Updates when it is configured for for use with EAS)\n   * It's undefined if the expo-updates package is not configured for use with EAS.\n   */\n  channel?: string;\n\n  /**\n   * Distribution type\n   * Indicates whether this is a build for store, internal distribution, or simulator (iOS).\n   */\n  distribution?: 'store' | 'internal' | 'simulator';\n\n  /**\n   * App name (expo.name in app.json/app.config.js)\n   */\n  appName?: string;\n\n  /**\n   * App identifier:\n   * - iOS builds: the bundle identifier (expo.ios.bundleIdentifier in app.json/app.config.js)\n   * - Android builds: the application id (expo.android.package in app.json/app.config.js)\n   */\n  appIdentifier?: string;\n\n  /**\n   * Build profile name (e.g. release)\n   */\n  buildProfile?: string;\n\n  /**\n   * Git commit hash (e.g. aab03fbdabb6e536ea78b28df91575ad488f5f21)\n   */\n  gitCommitHash?: string;\n\n  /**\n   * State of the git working tree\n   */\n  isGitWorkingTreeDirty?: boolean;\n\n  /**\n   * Username of the initiating user\n   */\n  username?: string;\n\n  /**\n   * Indicates what type of an enterprise provisioning profile was used to build the app.\n   * It's either adhoc or universal\n   */\n  iosEnterpriseProvisioning?: 'adhoc' | 'universal';\n};\n\nexport const MetadataSchema = Joi.object({\n  trackingContext: Joi.object()\n    .pattern(Joi.string(), [Joi.string(), Joi.number(), Joi.boolean()])\n    .required(),\n  appVersion: Joi.string(),\n  appBuildVersion: Joi.string(),\n  cliVersion: Joi.string(),\n  workflow: Joi.string().valid('generic', 'managed'),\n  distribution: Joi.string().valid('store', 'internal', 'simulator'),\n  credentialsSource: Joi.string().valid('local', 'remote'),\n  sdkVersion: Joi.string(),\n  runtimeVersion: Joi.string(),\n  reactNativeVersion: Joi.string(),\n  releaseChannel: Joi.string(),\n  channel: Joi.string(),\n  appName: Joi.string(),\n  appIdentifier: Joi.string(),\n  buildProfile: Joi.string(),\n  gitCommitHash: Joi.string().length(40).hex(),\n  isGitWorkingTreeDirty: Joi.boolean(),\n  username: Joi.string(),\n  iosEnterpriseProvisioning: Joi.string().valid('adhoc', 'universal'),\n});\n\nexport function sanitizeMetadata(metadata: object): Metadata {\n  const { value, error } = MetadataSchema.validate(metadata, {\n    stripUnknown: true,\n    convert: true,\n    abortEarly: false,\n  });\n  if (error) {\n    throw error;\n  } else {\n    return value;\n  }\n}\n"]}