"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.promptForUDIDAsync = exports.runInputMethodAsync = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const cli_table3_1 = tslib_1.__importDefault(require("cli-table3"));
const AppleDeviceMutation_1 = require("../../../credentials/ios/api/graphql/mutations/AppleDeviceMutation");
const generated_1 = require("../../../graphql/generated");
const log_1 = tslib_1.__importDefault(require("../../../log"));
const ora_1 = require("../../../ora");
const prompts_1 = require("../../../prompts");
const udids_1 = require("../../udids");
const DEVICE_CLASS_DISPLAY_NAMES = {
    [generated_1.AppleDeviceClass.Iphone]: 'iPhone',
    [generated_1.AppleDeviceClass.Ipad]: 'iPad',
};
async function runInputMethodAsync(accountId, appleTeam) {
    log_1.default.newLine();
    log_1.default.log(chalk_1.default.yellow('This is an advanced option. Use at your own risk.'));
    log_1.default.newLine();
    let registerNextDevice = true;
    while (registerNextDevice) {
        await collectDataAndRegisterDeviceAsync({ accountId, appleTeam });
        log_1.default.newLine();
        registerNextDevice = await (0, prompts_1.confirmAsync)({
            message: 'Do you want to register another device?',
        });
    }
}
exports.runInputMethodAsync = runInputMethodAsync;
async function collectDataAndRegisterDeviceAsync({ accountId, appleTeam, }) {
    const { udid, deviceClass, name } = await collectDeviceDataAsync(appleTeam);
    const spinner = (0, ora_1.ora)(`Registering Apple device on Expo`).start();
    try {
        await AppleDeviceMutation_1.AppleDeviceMutation.createAppleDeviceAsync({
            appleTeamId: appleTeam.id,
            identifier: udid,
            name,
            deviceClass: deviceClass !== null && deviceClass !== void 0 ? deviceClass : undefined,
        }, accountId);
    }
    catch (err) {
        spinner.fail();
        throw err;
    }
    spinner.succeed();
}
async function collectDeviceDataAsync(appleTeam, initialValues = {}) {
    const udid = await promptForUDIDAsync(initialValues.udid);
    const name = await promptForNameAsync(initialValues.name);
    const deviceClass = await promptForDeviceClassAsync(initialValues.deviceClass);
    const deviceData = {
        udid,
        name,
        deviceClass,
    };
    log_1.default.newLine();
    log_1.default.log(`We are going to register the following device in our database.
This will ${chalk_1.default.bold('not')} register the device on the Apple Developer Portal yet.`);
    log_1.default.newLine();
    printDeviceDataSummary(deviceData, appleTeam);
    log_1.default.newLine();
    const registrationConfirmed = await (0, prompts_1.confirmAsync)({
        message: 'Is this what you want to register?',
    });
    if (!registrationConfirmed) {
        log_1.default.log('No worries, just try again.');
        log_1.default.newLine();
        return await collectDeviceDataAsync(appleTeam, deviceData);
    }
    else {
        return deviceData;
    }
}
async function promptForUDIDAsync(initial) {
    const { udid } = await (0, prompts_1.promptAsync)({
        type: 'text',
        name: 'udid',
        message: 'UDID:',
        initial,
        validate: (rawVal) => {
            const val = (0, udids_1.normalizeUDID)(rawVal);
            if (!val || val === '') {
                return 'UDID cannot be empty';
            }
            else if (val.length !== 25 && val.length !== 40) {
                return 'UDID should be a 25 or 40-character string';
            }
            else if (!(0, udids_1.isValidUDID)(val)) {
                return 'UDID is invalid';
            }
            else {
                return true;
            }
        },
        format: (val) => (0, udids_1.normalizeUDID)(val),
    });
    return udid;
}
exports.promptForUDIDAsync = promptForUDIDAsync;
async function promptForNameAsync(initial) {
    const { name } = await (0, prompts_1.promptAsync)({
        type: 'text',
        name: 'name',
        message: 'Device name (optional):',
        initial,
    });
    return name;
}
async function promptForDeviceClassAsync(initial) {
    const choices = [
        { title: 'iPhone', value: generated_1.AppleDeviceClass.Iphone },
        { title: 'iPad', value: generated_1.AppleDeviceClass.Ipad },
        { title: 'Not sure (leave empty)', value: null },
    ];
    const values = choices.map(({ value }) => value);
    const { deviceClass } = await (0, prompts_1.promptAsync)({
        type: 'select',
        name: 'deviceClass',
        message: 'Device class (optional):',
        choices,
        initial: initial !== undefined && values.indexOf(initial),
    });
    return deviceClass;
}
function printDeviceDataSummary({ udid, name, deviceClass }, appleTeam) {
    var _a;
    const deviceSummary = new cli_table3_1.default({
        colWidths: [25, 55],
        wordWrap: true,
    });
    deviceSummary.push(['Apple Team ID', appleTeam.appleTeamIdentifier], ['Apple Team Name', (_a = appleTeam.appleTeamName) !== null && _a !== void 0 ? _a : '(unknown)'], ['Device UDID', udid], ['Device Name', name !== null && name !== void 0 ? name : '(empty)'], ['Device Class', deviceClass ? DEVICE_CLASS_DISPLAY_NAMES[deviceClass] : '(unknown)']);
    log_1.default.log(deviceSummary.toString());
}
