"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadWithPresignedPostAsync = exports.uploadAsync = void 0;
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const form_data_1 = tslib_1.__importDefault(require("form-data"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const fetch_1 = tslib_1.__importDefault(require("./fetch"));
const UploadSessionMutation_1 = require("./graphql/mutations/UploadSessionMutation");
async function uploadAsync(type, path, handleProgressEvent) {
    const presignedPost = await UploadSessionMutation_1.UploadSessionMutation.createUploadSessionAsync(type);
    const url = await uploadWithPresignedPostAsync(path, presignedPost, handleProgressEvent);
    (0, assert_1.default)(presignedPost.fields.key, 'key is not specified in in presigned post');
    return { url, bucketKey: presignedPost.fields.key };
}
exports.uploadAsync = uploadAsync;
async function uploadWithPresignedPostAsync(file, presignedPost, handleProgressEvent) {
    const fileStat = await fs_extra_1.default.stat(file);
    const fileSize = fileStat.size;
    const form = new form_data_1.default();
    for (const [fieldKey, fieldValue] of Object.entries(presignedPost.fields)) {
        form.append(fieldKey, fieldValue);
    }
    form.append('file', fs_extra_1.default.createReadStream(file), { knownLength: fileSize });
    const formHeaders = form.getHeaders();
    const uploadPromise = (0, fetch_1.default)(presignedPost.url, {
        method: 'POST',
        body: form,
        headers: {
            ...formHeaders,
        },
    });
    let currentSize = 0;
    if (handleProgressEvent) {
        form.addListener('data', (chunk) => {
            currentSize += Buffer.byteLength(chunk);
            handleProgressEvent({
                progress: {
                    total: fileSize,
                    percent: currentSize / fileSize,
                    transferred: currentSize,
                },
            });
        });
        try {
            const response = await uploadPromise;
            handleProgressEvent({ isComplete: true });
            return String(response.headers.get('location'));
        }
        catch (error) {
            handleProgressEvent({ isComplete: true, error });
            throw error;
        }
    }
    else {
        const response = await uploadPromise;
        return String(response.headers.get('location'));
    }
}
exports.uploadWithPresignedPostAsync = uploadWithPresignedPostAsync;
