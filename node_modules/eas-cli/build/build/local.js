"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runLocalBuildAsync = void 0;
const tslib_1 = require("tslib");
const spawn_async_1 = tslib_1.__importDefault(require("@expo/spawn-async"));
const semver_1 = tslib_1.__importDefault(require("semver"));
const ora_1 = require("../ora");
const PLUGIN_PACKAGE_NAME = 'eas-cli-local-build-plugin';
const PLUGIN_PACKAGE_VERSION = '0.0.74';
async function runLocalBuildAsync(job, options) {
    var _a;
    const { command, args } = await getCommandAndArgsAsync(job);
    let spinner;
    if (!options.verbose) {
        spinner = (0, ora_1.ora)().start(options.skipNativeBuild ? 'Preparing project' : 'Building project');
    }
    let childProcess;
    const interruptHandler = () => {
        if (childProcess) {
            childProcess.kill();
        }
    };
    process.on('SIGINT', interruptHandler);
    try {
        const spawnPromise = (0, spawn_async_1.default)(command, args, {
            stdio: options.verbose ? 'inherit' : 'pipe',
            env: {
                ...process.env,
                EAS_LOCAL_BUILD_WORKINGDIR: (_a = options.workingdir) !== null && _a !== void 0 ? _a : process.env.EAS_LOCAL_BUILD_WORKINGDIR,
                ...(options.skipCleanup || options.skipNativeBuild
                    ? { EAS_LOCAL_BUILD_SKIP_CLEANUP: '1' }
                    : {}),
                ...(options.skipNativeBuild ? { EAS_LOCAL_BUILD_SKIP_NATIVE_BUILD: '1' } : {}),
                ...(options.artifactsDir ? { EAS_LOCAL_BUILD_ARTIFACTS_DIR: options.artifactsDir } : {}),
                ...(options.artifactPath ? { EAS_LOCAL_BUILD_ARTIFACT_PATH: options.artifactPath } : {}),
            },
        });
        childProcess = spawnPromise.child;
        await spawnPromise;
    }
    finally {
        process.removeListener('SIGINT', interruptHandler);
        spinner === null || spinner === void 0 ? void 0 : spinner.stop();
    }
}
exports.runLocalBuildAsync = runLocalBuildAsync;
async function getCommandAndArgsAsync(job) {
    const jobBase64 = Buffer.from(JSON.stringify({ job })).toString('base64');
    if (process.env.EAS_LOCAL_BUILD_PLUGIN_PATH) {
        return {
            command: process.env.EAS_LOCAL_BUILD_PLUGIN_PATH,
            args: [jobBase64],
        };
    }
    else {
        const args = [`${PLUGIN_PACKAGE_NAME}@${PLUGIN_PACKAGE_VERSION}`, jobBase64];
        if (await isAtLeastNpm7Async()) {
            // npx shipped with npm >= 7.0.0 requires the "-y" flag to run commands without
            // prompting the user to install a package that is used for the first time
            args.unshift('-y');
        }
        return {
            command: 'npx',
            args,
        };
    }
}
async function isAtLeastNpm7Async() {
    const version = (await (0, spawn_async_1.default)('npm', ['--version'])).stdout.trim();
    return semver_1.default.gte(version, '7.0.0');
}
