"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureProjectConfiguredAsync = void 0;
const tslib_1 = require("tslib");
const eas_build_job_1 = require("@expo/eas-build-job");
const eas_json_1 = require("@expo/eas-json");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const log_1 = tslib_1.__importDefault(require("../log"));
const workflow_1 = require("../project/workflow");
const easCli_1 = require("../utils/easCli");
const vcs_1 = require("../vcs");
const repository_1 = require("./utils/repository");
/**
 * Creates eas.json if it does not exist.
 *
 * Returns:
 * - false - if eas.json already exists
 * - true - if eas.json was created by the function
 */
async function ensureProjectConfiguredAsync(configureParams) {
    if (await fs_extra_1.default.pathExists(eas_json_1.EasJsonReader.formatEasJsonPath(configureParams.projectDir))) {
        return false;
    }
    await configureAsync(configureParams);
    return true;
}
exports.ensureProjectConfiguredAsync = ensureProjectConfiguredAsync;
async function configureAsync({ projectDir, nonInteractive }) {
    await (0, repository_1.maybeBailOnRepoStatusAsync)();
    await createEasJsonAsync(projectDir);
    if (await (0, vcs_1.getVcsClient)().isCommitRequiredAsync()) {
        log_1.default.newLine();
        await (0, repository_1.reviewAndCommitChangesAsync)('Configure EAS Build', {
            nonInteractive,
        });
    }
}
const EAS_JSON_MANAGED_DEFAULT = {
    cli: {
        version: `>= ${easCli_1.easCliVersion}`,
    },
    build: {
        development: {
            developmentClient: true,
            distribution: 'internal',
        },
        preview: {
            distribution: 'internal',
        },
        production: {},
    },
    submit: {
        production: {},
    },
};
const EAS_JSON_BARE_DEFAULT = {
    cli: {
        version: `>= ${easCli_1.easCliVersion}`,
    },
    build: {
        development: {
            distribution: 'internal',
            android: {
                gradleCommand: ':app:assembleDebug',
            },
            ios: {
                buildConfiguration: 'Debug',
            },
        },
        preview: {
            distribution: 'internal',
        },
        production: {},
    },
    submit: {
        production: {},
    },
};
async function createEasJsonAsync(projectDir) {
    const easJsonPath = eas_json_1.EasJsonReader.formatEasJsonPath(projectDir);
    const hasAndroidNativeProject = (await (0, workflow_1.resolveWorkflowAsync)(projectDir, eas_build_job_1.Platform.ANDROID)) === eas_build_job_1.Workflow.GENERIC;
    const hasIosNativeProject = (await (0, workflow_1.resolveWorkflowAsync)(projectDir, eas_build_job_1.Platform.IOS)) === eas_build_job_1.Workflow.GENERIC;
    const easJson = hasAndroidNativeProject || hasIosNativeProject
        ? EAS_JSON_BARE_DEFAULT
        : EAS_JSON_MANAGED_DEFAULT;
    await fs_extra_1.default.writeFile(easJsonPath, `${JSON.stringify(easJson, null, 2)}\n`);
    await (0, vcs_1.getVcsClient)().trackFileAsync(easJsonPath);
    log_1.default.withTick(`Generated ${chalk_1.default.bold('eas.json')}`);
}
