"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatGraphQLBuild = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const generated_1 = require("../../graphql/generated");
const platform_1 = require("../../platform");
const formatFields_1 = tslib_1.__importDefault(require("../../utils/formatFields"));
const url_1 = require("./url");
function formatGraphQLBuild(build) {
    var _a, _b;
    const actor = getActorName(build);
    const fields = [
        { label: 'ID', value: build.id },
        {
            label: 'Platform',
            value: platform_1.appPlatformDisplayNames[build.platform],
        },
        {
            label: 'Status',
            get value() {
                switch (build.status) {
                    case generated_1.BuildStatus.New:
                        return chalk_1.default.blue('new');
                    case generated_1.BuildStatus.InQueue:
                        return chalk_1.default.blue('in queue');
                    case generated_1.BuildStatus.InProgress:
                        return chalk_1.default.blue('in progress');
                    case generated_1.BuildStatus.Canceled:
                        return chalk_1.default.gray('canceled');
                    case generated_1.BuildStatus.Finished:
                        return chalk_1.default.green('finished');
                    case generated_1.BuildStatus.Errored:
                        return chalk_1.default.red('errored');
                    default:
                        return 'unknown';
                }
            },
        },
        {
            label: 'Distribution',
            value: (_a = build.distribution) === null || _a === void 0 ? void 0 : _a.toLowerCase(),
        },
        {
            label: 'Enterprise Provisioning',
            value: (_b = build.iosEnterpriseProvisioning) === null || _b === void 0 ? void 0 : _b.toLowerCase(),
        },
        {
            label: 'Release Channel',
            value: build.releaseChannel,
        },
        {
            label: 'Channel',
            value: build.channel,
        },
        {
            label: 'SDK Version',
            value: build.sdkVersion,
        },
        {
            label: 'Runtime Version',
            value: build.runtimeVersion,
        },
        {
            label: 'Version',
            value: build.appVersion,
        },
        {
            label: build.platform === generated_1.AppPlatform.Android ? 'Version code' : 'Build number',
            value: build.appBuildVersion,
        },
        {
            label: 'Commit',
            value: build.gitCommitHash,
        },
        {
            label: 'Logs',
            value: (0, url_1.getBuildLogsUrl)(build),
        },
        {
            label: 'Artifact',
            get value() {
                var _a;
                switch (build.status) {
                    case generated_1.BuildStatus.New:
                    case generated_1.BuildStatus.InQueue:
                    case generated_1.BuildStatus.InProgress:
                        return '<in progress>';
                    case generated_1.BuildStatus.Canceled:
                    case generated_1.BuildStatus.Errored:
                        return null;
                    case generated_1.BuildStatus.Finished: {
                        const url = (_a = build.artifacts) === null || _a === void 0 ? void 0 : _a.buildUrl;
                        return url ? url : chalk_1.default.red('not found');
                    }
                    default:
                        return null;
                }
            },
        },
        { label: 'Started at', value: new Date(build.createdAt).toLocaleString() },
        {
            label: 'Finished at',
            value: [
                generated_1.BuildStatus.New,
                generated_1.BuildStatus.InQueue,
                generated_1.BuildStatus.InProgress,
            ].includes(build.status)
                ? '<in progress>'
                : new Date(build.updatedAt).toLocaleString(),
        },
        { label: 'Started by', value: actor !== null && actor !== void 0 ? actor : 'unknown' },
    ];
    const filteredFields = fields.filter(({ value }) => value !== undefined && value !== null);
    return (0, formatFields_1.default)(filteredFields);
}
exports.formatGraphQLBuild = formatGraphQLBuild;
const getActorName = (build) => {
    var _a;
    return ((_a = build.initiatingActor) === null || _a === void 0 ? void 0 : _a.displayName) || 'unknown';
};
