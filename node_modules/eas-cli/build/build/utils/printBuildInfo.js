"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printUserError = exports.printDeprecationWarnings = exports.printBuildResults = exports.printLogsUrls = void 0;
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const indent_string_1 = tslib_1.__importDefault(require("indent-string"));
const qrcode_terminal_1 = tslib_1.__importDefault(require("qrcode-terminal"));
const generated_1 = require("../../graphql/generated");
const log_1 = tslib_1.__importStar(require("../../log"));
const platform_1 = require("../../platform");
const json_1 = require("../../utils/json");
const url_1 = require("./url");
function printLogsUrls(builds) {
    if (builds.length === 1) {
        log_1.default.log(`Build details: ${chalk_1.default.underline((0, url_1.getBuildLogsUrl)(builds[0]))}`);
    }
    else {
        builds.forEach(build => {
            const logsUrl = (0, url_1.getBuildLogsUrl)(build);
            log_1.default.log(`${platform_1.appPlatformEmojis[build.platform]} ${platform_1.appPlatformDisplayNames[build.platform]} build details: ${chalk_1.default.underline(logsUrl)}`);
        });
    }
}
exports.printLogsUrls = printLogsUrls;
function printBuildResults(builds, json) {
    if (json) {
        (0, json_1.printJsonOnlyOutput)(builds);
    }
    else {
        log_1.default.newLine();
        if (builds.length === 1) {
            const [build] = builds;
            (0, assert_1.default)(build, 'Build should be defined');
            printBuildResult(build);
        }
        else {
            builds.filter(i => i).forEach(build => printBuildResult(build));
        }
    }
}
exports.printBuildResults = printBuildResults;
function printBuildResult(build) {
    var _a, _b;
    log_1.default.addNewLineIfNone();
    if (build.status === generated_1.BuildStatus.Errored) {
        const userError = build.error;
        log_1.default.error(`${platform_1.appPlatformEmojis[build.platform]} ${platform_1.appPlatformDisplayNames[build.platform]} build failed${userError ? ':' : ''}`);
        if (userError) {
            printUserError(userError);
        }
        return;
    }
    if (build.status === generated_1.BuildStatus.Canceled) {
        log_1.default.error(`${platform_1.appPlatformEmojis[build.platform]} ${platform_1.appPlatformDisplayNames[build.platform]} build was canceled`);
        return;
    }
    if (build.distribution === generated_1.DistributionType.Internal) {
        const logsUrl = (0, url_1.getBuildLogsUrl)(build);
        // It's tricky to install the .apk file directly on Android so let's fallback
        // to the build details page and let people press the button to download there
        const qrcodeUrl = build.platform === generated_1.AppPlatform.Ios ? (0, url_1.getInternalDistributionInstallUrl)(build) : logsUrl;
        qrcode_terminal_1.default.generate(qrcodeUrl, { small: true }, code => log_1.default.log(`${(0, indent_string_1.default)(code, 2)}\n`));
        log_1.default.log(`${platform_1.appPlatformEmojis[build.platform]} Open this link on your ${platform_1.appPlatformDisplayNames[build.platform]} devices (or scan the QR code) to install the app:`);
        log_1.default.log(`${chalk_1.default.underline(logsUrl)}`);
    }
    else {
        // TODO: it looks like buildUrl could possibly be undefined, based on the code below.
        // we should account for this case better if it is possible
        const url = (_b = (_a = build.artifacts) === null || _a === void 0 ? void 0 : _a.buildUrl) !== null && _b !== void 0 ? _b : '';
        log_1.default.log(`${platform_1.appPlatformEmojis[build.platform]} ${platform_1.appPlatformDisplayNames[build.platform]} app:`);
        log_1.default.log(`${chalk_1.default.underline(url)}`);
    }
}
function printDeprecationWarnings(deprecationInfo) {
    if (!deprecationInfo) {
        return;
    }
    if (deprecationInfo.type === generated_1.EasBuildDeprecationInfoType.Internal) {
        log_1.default.warn('This command is using API that soon will be deprecated, please update eas-cli.');
        log_1.default.warn("Changes won't affect your project config.");
        log_1.default.warn(deprecationInfo.message);
    }
    else if (deprecationInfo.type === generated_1.EasBuildDeprecationInfoType.UserFacing) {
        log_1.default.warn('This command is using API that soon will be deprecated.');
        log_1.default.warn(deprecationInfo.message);
    }
    else {
        log_1.default.warn('An unexpected warning was encountered. Please report it as a bug:');
        log_1.default.warn(deprecationInfo);
    }
}
exports.printDeprecationWarnings = printDeprecationWarnings;
function printUserError(error) {
    log_1.default.error(error.message);
    if (error.docsUrl) {
        log_1.default.error((0, log_1.learnMore)(error.docsUrl, { dim: false }));
    }
}
exports.printUserError = printUserError;
