"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureIosCredentialsAsync = void 0;
const tslib_1 = require("tslib");
const eas_build_job_1 = require("@expo/eas-build-job");
const IosCredentialsProvider_1 = tslib_1.__importDefault(require("../../credentials/ios/IosCredentialsProvider"));
const BuildCredentialsUtils_1 = require("../../credentials/ios/actions/BuildCredentialsUtils");
const entitlements_1 = require("../../credentials/ios/appstore/entitlements");
const credentials_1 = require("../utils/credentials");
async function ensureIosCredentialsAsync(buildCtx, targets) {
    var _a, _b;
    if (!shouldProvideCredentials(buildCtx)) {
        return;
    }
    const provider = new IosCredentialsProvider_1.default(buildCtx.credentialsCtx, {
        app: (0, BuildCredentialsUtils_1.getAppFromContext)(buildCtx.credentialsCtx),
        targets,
        iosCapabilitiesOptions: {
            entitlements: await (0, entitlements_1.resolveEntitlementsJsonAsync)(buildCtx.projectDir, buildCtx.workflow, (_a = buildCtx.buildProfile.env) !== null && _a !== void 0 ? _a : {}),
        },
        distribution: (_b = buildCtx.buildProfile.distribution) !== null && _b !== void 0 ? _b : 'store',
        enterpriseProvisioning: buildCtx.buildProfile.enterpriseProvisioning,
    });
    const { credentialsSource } = buildCtx.buildProfile;
    (0, credentials_1.logCredentialsSource)(credentialsSource, eas_build_job_1.Platform.IOS);
    return {
        credentials: await provider.getCredentialsAsync(credentialsSource),
        source: credentialsSource,
    };
}
exports.ensureIosCredentialsAsync = ensureIosCredentialsAsync;
function shouldProvideCredentials(buildCtx) {
    return !buildCtx.buildProfile.simulator;
}
