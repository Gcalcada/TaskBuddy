"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareIosBuildAsync = exports.createIosContextAsync = void 0;
const config_plugins_1 = require("@expo/config-plugins");
const eas_build_job_1 = require("@expo/eas-build-job");
const BuildMutation_1 = require("../../graphql/mutations/BuildMutation");
const bundleIdentifier_1 = require("../../project/ios/bundleIdentifier");
const scheme_1 = require("../../project/ios/scheme");
const target_1 = require("../../project/ios/target");
const build_1 = require("../build");
const graphql_1 = require("../graphql");
const validate_1 = require("../validate");
const credentials_1 = require("./credentials");
const graphql_2 = require("./graphql");
const prepareJob_1 = require("./prepareJob");
const syncProjectConfiguration_1 = require("./syncProjectConfiguration");
async function createIosContextAsync(ctx) {
    const { buildProfile } = ctx;
    if (ctx.workflow === eas_build_job_1.Workflow.MANAGED) {
        await (0, bundleIdentifier_1.ensureBundleIdentifierIsDefinedForManagedProjectAsync)(ctx.projectDir, ctx.exp);
    }
    (0, validate_1.checkNodeEnvVariable)(ctx);
    await (0, validate_1.checkGoogleServicesFileAsync)(ctx);
    const xcodeBuildContext = await (0, scheme_1.resolveXcodeBuildContextAsync)({
        projectDir: ctx.projectDir,
        nonInteractive: ctx.nonInteractive,
        exp: ctx.exp,
    }, buildProfile);
    const targets = await (0, target_1.resolveTargetsAsync)({
        projectDir: ctx.projectDir,
        exp: ctx.exp,
    }, xcodeBuildContext);
    const applicationTarget = (0, target_1.findApplicationTarget)(targets);
    const applicationTargetBuildSettings = resolveBuildSettings(ctx, applicationTarget);
    return {
        bundleIdentifier: applicationTarget.bundleIdentifier,
        applicationTarget,
        applicationTargetBuildSettings,
        targets,
        xcodeBuildContext,
    };
}
exports.createIosContextAsync = createIosContextAsync;
async function prepareIosBuildAsync(ctx) {
    return await (0, build_1.prepareBuildRequestForPlatformAsync)({
        ctx,
        ensureCredentialsAsync: async (ctx) => {
            return (0, credentials_1.ensureIosCredentialsAsync)(ctx, ctx.ios.targets);
        },
        syncProjectConfigurationAsync: async () => {
            await (0, syncProjectConfiguration_1.syncProjectConfigurationAsync)({
                projectDir: ctx.projectDir,
                exp: ctx.exp,
                buildProfile: ctx.buildProfile,
                buildSettings: ctx.ios.applicationTargetBuildSettings,
            });
        },
        prepareJobAsync: async (ctx, jobData) => {
            return await (0, prepareJob_1.prepareJobAsync)(ctx, {
                ...jobData,
                buildScheme: ctx.ios.xcodeBuildContext.buildScheme,
            });
        },
        sendBuildRequestAsync: async (appId, job, metadata) => {
            const graphqlMetadata = (0, graphql_1.transformMetadata)(metadata);
            const graphqlJob = (0, graphql_2.transformJob)(job);
            return await BuildMutation_1.BuildMutation.createIosBuildAsync({
                appId,
                job: graphqlJob,
                metadata: graphqlMetadata,
            });
        },
    });
}
exports.prepareIosBuildAsync = prepareIosBuildAsync;
function resolveBuildSettings(ctx, applicationTarget) {
    var _a;
    if (ctx.workflow === eas_build_job_1.Workflow.MANAGED) {
        return {};
    }
    const project = config_plugins_1.IOSConfig.XcodeUtils.getPbxproj(ctx.projectDir);
    const xcBuildConfiguration = config_plugins_1.IOSConfig.Target.getXCBuildConfigurationFromPbxproj(project, {
        targetName: applicationTarget.targetName,
        buildConfiguration: applicationTarget.buildConfiguration,
    });
    return (_a = xcBuildConfiguration === null || xcBuildConfiguration === void 0 ? void 0 : xcBuildConfiguration.buildSettings) !== null && _a !== void 0 ? _a : {};
}
