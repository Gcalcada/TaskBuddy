"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareJobAsync = void 0;
const tslib_1 = require("tslib");
const eas_build_job_1 = require("@expo/eas-build-job");
const path_1 = tslib_1.__importDefault(require("path"));
const slash_1 = tslib_1.__importDefault(require("slash"));
const projectUtils_1 = require("../../project/projectUtils");
const actions_1 = require("../../user/actions");
const vcs_1 = require("../../vcs");
const cacheDefaults = {
    disabled: false,
    customPaths: [],
    cacheDefaultPaths: true,
};
async function prepareJobAsync(ctx, jobData) {
    const projectRootDirectory = (0, slash_1.default)(path_1.default.relative(await (0, vcs_1.getVcsClient)().getRootPathAsync(), ctx.projectDir)) || '.';
    const username = (0, projectUtils_1.getUsername)(ctx.exp, await (0, actions_1.ensureLoggedInAsync)());
    const buildCredentials = {};
    if (jobData.credentials) {
        const targetNames = Object.keys(jobData.credentials);
        for (const targetName of targetNames) {
            buildCredentials[targetName] = prepareTargetCredentials(jobData.credentials[targetName]);
        }
    }
    const job = {
        type: ctx.workflow,
        platform: eas_build_job_1.Platform.IOS,
        projectArchive: jobData.projectArchive,
        projectRootDirectory,
        builderEnvironment: {
            image: ctx.buildProfile.image,
            node: ctx.buildProfile.node,
            yarn: ctx.buildProfile.yarn,
            bundler: ctx.buildProfile.bundler,
            cocoapods: ctx.buildProfile.cocoapods,
            fastlane: ctx.buildProfile.fastlane,
            expoCli: ctx.buildProfile.expoCli,
            env: ctx.buildProfile.env,
        },
        cache: {
            ...cacheDefaults,
            ...ctx.buildProfile.cache,
            clear: ctx.clearCache,
        },
        secrets: {
            buildCredentials,
        },
        releaseChannel: ctx.buildProfile.releaseChannel,
        updates: { channel: ctx.buildProfile.channel },
        developmentClient: ctx.buildProfile.developmentClient,
        simulator: ctx.buildProfile.simulator,
        scheme: jobData.buildScheme,
        buildConfiguration: ctx.buildProfile.buildConfiguration,
        artifactPath: ctx.buildProfile.artifactPath,
        username,
        experimental: {
            prebuildCommand: ctx.buildProfile.prebuildCommand,
        },
    };
    return (0, eas_build_job_1.sanitizeJob)(job);
}
exports.prepareJobAsync = prepareJobAsync;
function prepareTargetCredentials(targetCredentials) {
    return {
        provisioningProfileBase64: targetCredentials.provisioningProfile,
        distributionCertificate: {
            dataBase64: targetCredentials.distributionCertificate.certificateP12,
            password: targetCredentials.distributionCertificate.certificatePassword,
        },
    };
}
