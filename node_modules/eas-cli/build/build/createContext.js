"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBuildContextAsync = void 0;
const tslib_1 = require("tslib");
const eas_build_job_1 = require("@expo/eas-build-job");
const json_file_1 = tslib_1.__importDefault(require("@expo/json-file"));
const resolve_from_1 = tslib_1.__importDefault(require("resolve-from"));
const uuid_1 = require("uuid");
const events_1 = require("../analytics/events");
const context_1 = require("../credentials/context");
const expoConfig_1 = require("../project/expoConfig");
const projectUtils_1 = require("../project/projectUtils");
const workflow_1 = require("../project/workflow");
const Account_1 = require("../user/Account");
const actions_1 = require("../user/actions");
const build_1 = require("./android/build");
const build_2 = require("./ios/build");
async function createBuildContextAsync({ buildProfileName, buildProfile, clearCache = false, localBuildOptions, nonInteractive = false, platform, projectDir, }) {
    var _a;
    const exp = (0, expoConfig_1.getExpoConfig)(projectDir, { env: buildProfile.env });
    const user = await (0, actions_1.ensureLoggedInAsync)();
    const accountName = (0, projectUtils_1.getProjectAccountName)(exp, user);
    const projectName = exp.slug;
    const projectId = await (0, projectUtils_1.getProjectIdAsync)(exp, { env: buildProfile.env });
    const workflow = await (0, workflow_1.resolveWorkflowAsync)(projectDir, platform);
    const accountId = (_a = (0, Account_1.findAccountByName)(user.accounts, accountName)) === null || _a === void 0 ? void 0 : _a.id;
    const credentialsCtx = new context_1.CredentialsContext({
        exp,
        nonInteractive,
        projectDir,
        user,
        env: buildProfile.env,
    });
    const devClientProperties = getDevClientEventProperties({
        platform,
        projectDir,
        buildProfile,
    });
    const trackingCtx = {
        tracking_id: (0, uuid_1.v4)(),
        platform,
        ...(accountId && { account_id: accountId }),
        project_id: projectId,
        project_type: workflow,
        ...devClientProperties,
    };
    events_1.Analytics.logEvent(events_1.BuildEvent.BUILD_COMMAND, trackingCtx);
    const commonContext = {
        accountName,
        buildProfile,
        buildProfileName,
        clearCache,
        credentialsCtx,
        exp,
        localBuildOptions,
        nonInteractive,
        platform,
        projectDir,
        projectId,
        projectName,
        trackingCtx,
        user,
        workflow,
    };
    if (platform === eas_build_job_1.Platform.ANDROID) {
        const common = commonContext;
        return {
            ...common,
            android: await (0, build_1.createAndroidContextAsync)(common),
        };
    }
    else {
        const common = commonContext;
        return {
            ...common,
            ios: await (0, build_2.createIosContextAsync)(common),
        };
    }
}
exports.createBuildContextAsync = createBuildContextAsync;
function getDevClientEventProperties({ platform, projectDir, buildProfile, }) {
    var _a;
    let includesDevClient;
    const version = tryGetDevClientVersion(projectDir);
    if (platform === eas_build_job_1.Platform.ANDROID && 'gradleCommand' in buildProfile) {
        includesDevClient = Boolean(version && ((_a = buildProfile.gradleCommand) === null || _a === void 0 ? void 0 : _a.includes('Debug')));
    }
    else if (platform === eas_build_job_1.Platform.IOS && 'buildConfiguration' in buildProfile) {
        includesDevClient = Boolean(version && buildProfile.buildConfiguration === 'Debug');
    }
    else if (buildProfile.developmentClient) {
        includesDevClient = true;
    }
    else {
        includesDevClient = false;
    }
    if (version) {
        return { dev_client: includesDevClient, dev_client_version: version };
    }
    else {
        return { dev_client: includesDevClient };
    }
}
function tryGetDevClientVersion(projectDir) {
    var _a, _b;
    try {
        const pkg = json_file_1.default.read((0, resolve_from_1.default)(projectDir, 'expo-dev-client/package.json'));
        return (_b = (_a = pkg.version) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : null;
    }
    catch {
        return null;
    }
}
