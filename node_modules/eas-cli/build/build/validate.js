"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkGoogleServicesFileAsync = exports.checkNodeEnvVariable = void 0;
const tslib_1 = require("tslib");
const eas_build_job_1 = require("@expo/eas-build-job");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
const log_1 = tslib_1.__importStar(require("../log"));
const vcs_1 = require("../vcs");
function checkNodeEnvVariable(ctx) {
    var _a;
    if (((_a = ctx.buildProfile.env) === null || _a === void 0 ? void 0 : _a.NODE_ENV) === 'production') {
        log_1.default.warn('You set NODE_ENV=production in the build profile. Remember that it will be available during the entire build process. In particular, it will make yarn/npm install only production packages.');
        log_1.default.newLine();
    }
}
exports.checkNodeEnvVariable = checkNodeEnvVariable;
async function checkGoogleServicesFileAsync(ctx) {
    var _a, _b, _c;
    if (ctx.workflow === eas_build_job_1.Workflow.GENERIC || ((_b = (_a = ctx.buildProfile) === null || _a === void 0 ? void 0 : _a.env) === null || _b === void 0 ? void 0 : _b.GOOGLE_SERVICES_FILE)) {
        return;
    }
    const googleServicesFilePath = (_c = ctx.exp[ctx.platform]) === null || _c === void 0 ? void 0 : _c.googleServicesFile;
    if (!googleServicesFilePath) {
        return;
    }
    const rootDir = path_1.default.normalize(await (0, vcs_1.getVcsClient)().getRootPathAsync());
    const absGoogleServicesFilePath = path_1.default.resolve(ctx.projectDir, googleServicesFilePath);
    if ((await fs_extra_1.default.pathExists(absGoogleServicesFilePath)) &&
        (!isInsideDirectory(absGoogleServicesFilePath, rootDir) ||
            (await (0, vcs_1.getVcsClient)().isFileIgnoredAsync(path_1.default.relative(rootDir, absGoogleServicesFilePath))))) {
        log_1.default.warn(`File specified via "${ctx.platform}.googleServicesFile" field in your app.json is not checked in to your repository and won't be uploaded to the builder.`);
        log_1.default.warn(`Use EAS Secret to pass all values that you don't want to include in your version control. ${(0, log_1.learnMore)('https://docs.expo.dev/build-reference/variables/#using-secrets-in-environment-variables')}`);
        log_1.default.warn(`If you are using that file for compatibility with the classic build service (expo build) you can silence this warning by setting your build profile's env.GOOGLE_SERVICES_FILE in eas.json to any non-empty string.`);
        log_1.default.newLine();
    }
}
exports.checkGoogleServicesFileAsync = checkGoogleServicesFileAsync;
function isInsideDirectory(file, directory) {
    return file.startsWith(directory);
}
