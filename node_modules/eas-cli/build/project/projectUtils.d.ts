import { ExpoConfig } from '@expo/config';
import { Env } from '@expo/eas-build-job';
import { Actor } from '../user/User';
export declare function getProjectAccountName(exp: ExpoConfig, user: Actor): string;
export declare function getUsername(exp: ExpoConfig, user: Actor): string | undefined;
export declare function getProjectAccountNameAsync(exp: ExpoConfig): Promise<string>;
export declare function findProjectRootAsync({ cwd, defaultToProcessCwd, }?: {
    cwd?: string;
    defaultToProcessCwd?: boolean;
}): Promise<string>;
export declare function setProjectIdAsync(projectDir: string, options?: {
    env?: Env;
}): Promise<ExpoConfig | undefined>;
export declare function getProjectIdAsync(exp: ExpoConfig, options?: {
    env?: Env;
}): Promise<string>;
export declare function getProjectFullNameAsync(exp: ExpoConfig): Promise<string>;
/**
 * Return a useful name describing the project config.
 * - dynamic: app.config.js
 * - static: app.json
 * - custom path app config relative to root folder
 * - both: app.config.js or app.json
 */
export declare function getProjectConfigDescription(projectDir: string): string;
export declare function promptToCreateProjectIfNotExistsAsync(exp: ExpoConfig): Promise<string | null>;
export declare function isExpoUpdatesInstalled(projectDir: string): boolean;
export declare function isExpoUpdatesInstalledOrAvailable(projectDir: string, sdkVersion?: string): boolean;
export declare function installExpoUpdatesAsync(projectDir: string): Promise<void>;
