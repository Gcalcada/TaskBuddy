"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEASUpdateURL = exports.getExpoWebsiteBaseUrl = exports.getExpoApiBaseUrl = exports.api = exports.ApiV2Error = void 0;
const tslib_1 = require("tslib");
const fetch_1 = tslib_1.__importStar(require("./fetch"));
const sessionStorage_1 = require("./user/sessionStorage");
class ApiV2Error extends Error {
    constructor(response) {
        super(response.message);
        this.name = 'ApiV2Error';
        this.expoApiV2ErrorCode = response.code;
        this.expoApiV2ErrorDetails = response.details;
        this.expoApiV2ErrorServerStack = response.stack;
        this.expoApiV2ErrorMetadata = response.metadata;
    }
}
exports.ApiV2Error = ApiV2Error;
exports.api = {
    async putAsync(path, options) {
        return await requestAsync(path, { method: 'PUT', body: JSON.stringify(options.body) });
    },
    async postAsync(path, options) {
        return await requestAsync(path, { method: 'POST', body: JSON.stringify(options.body) });
    },
    async deleteAsync(path) {
        return await requestAsync(path, { method: 'DELETE' });
    },
    async getAsync(path) {
        return await requestAsync(path, { method: 'GET' });
    },
};
async function requestAsync(path, options) {
    try {
        const response = await (0, fetch_1.default)(`${getExpoApiBaseUrl()}/v2/${path}`, {
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...getAuthHeaders(),
            },
        });
        return await response.json();
    }
    catch (err) {
        await handleApiErrorAsync(err);
    }
}
async function handleApiErrorAsync(err) {
    var _a;
    if (err instanceof fetch_1.RequestError) {
        let result;
        try {
            result = (await err.response.json());
        }
        catch {
            throw new Error(`Malformed api response: ${await err.response.text()}`);
        }
        if ((_a = result.errors) === null || _a === void 0 ? void 0 : _a.length) {
            throw new ApiV2Error(result.errors[0]);
        }
    }
    else {
        throw err;
    }
}
function getAuthHeaders() {
    const token = (0, sessionStorage_1.getAccessToken)();
    if (token) {
        return { authorization: `Bearer ${token}` };
    }
    const sessionSecret = (0, sessionStorage_1.getSessionSecret)();
    if (sessionSecret) {
        return { 'expo-session': sessionSecret };
    }
    return {};
}
function getExpoApiBaseUrl() {
    if (process.env.EXPO_STAGING) {
        return `https://staging-api.expo.dev`;
    }
    else if (process.env.EXPO_LOCAL) {
        return `http://127.0.0.1:3000`;
    }
    else {
        return `https://api.expo.dev`;
    }
}
exports.getExpoApiBaseUrl = getExpoApiBaseUrl;
function getExpoWebsiteBaseUrl() {
    if (process.env.EXPO_STAGING) {
        return `https://staging.expo.dev`;
    }
    else if (process.env.EXPO_LOCAL) {
        return `http://expo.test`;
    }
    else {
        return `https://expo.dev`;
    }
}
exports.getExpoWebsiteBaseUrl = getExpoWebsiteBaseUrl;
function getEASUpdateURL(projectId) {
    if (process.env.EXPO_STAGING) {
        return new URL(projectId, `https://staging-u.expo.dev`).href;
    }
    else if (process.env.EXPO_LOCAL) {
        return new URL(`expo-updates/${projectId}`, `http://127.0.0.1:3000`).href;
    }
    else {
        return new URL(projectId, `https://u.expo.dev`).href;
    }
}
exports.getEASUpdateURL = getEASUpdateURL;
