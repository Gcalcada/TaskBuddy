"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logoutAsync = exports.loginAsync = exports.getUserAsync = exports.getActorDisplayName = exports.getAccessToken = exports.getSessionSecret = void 0;
const tslib_1 = require("tslib");
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const Analytics = tslib_1.__importStar(require("../analytics/rudderstackClient"));
const api_1 = require("../api");
const client_1 = require("../graphql/client");
const UserQuery_1 = require("../graphql/queries/UserQuery");
const sessionStorage_1 = require("./sessionStorage");
Object.defineProperty(exports, "getAccessToken", { enumerable: true, get: function () { return sessionStorage_1.getAccessToken; } });
Object.defineProperty(exports, "getSessionSecret", { enumerable: true, get: function () { return sessionStorage_1.getSessionSecret; } });
let currentUser;
/**
 * Resolve the name of the actor, either normal user or robot user.
 * This should be used whenever the "current user" needs to be displayed.
 * The display name CANNOT be used as project owner.
 */
function getActorDisplayName(user) {
    switch (user === null || user === void 0 ? void 0 : user.__typename) {
        case 'User':
            return user.username;
        case 'Robot':
            return user.firstName ? `${user.firstName} (robot)` : 'robot';
        default:
            return 'anonymous';
    }
}
exports.getActorDisplayName = getActorDisplayName;
async function getUserAsync() {
    if (!currentUser && ((0, sessionStorage_1.getAccessToken)() || (0, sessionStorage_1.getSessionSecret)())) {
        const user = await UserQuery_1.UserQuery.currentUserAsync();
        currentUser = user !== null && user !== void 0 ? user : undefined;
        if (user) {
            await Analytics.setUserDataAsync(user.id, {
                username: getActorDisplayName(user),
                user_id: user.id,
                user_type: user.__typename,
            });
        }
    }
    return currentUser;
}
exports.getUserAsync = getUserAsync;
async function loginAsync({ username, password, otp, }) {
    const body = await api_1.api.postAsync('auth/loginAsync', { body: { username, password, otp } });
    const { sessionSecret } = body.data;
    const result = await client_1.graphqlClient
        .query((0, graphql_tag_1.default) `
        query UserQuery {
          viewer {
            id
            username
          }
        }
      `, {}, {
        fetchOptions: {
            headers: {
                'expo-session': sessionSecret,
            },
        },
        additionalTypenames: [] /* UserQuery has immutable fields */,
    })
        .toPromise();
    const { data } = result;
    await (0, sessionStorage_1.setSessionAsync)({
        sessionSecret,
        userId: data.viewer.id,
        username: data.viewer.username,
        currentConnection: 'Username-Password-Authentication',
    });
}
exports.loginAsync = loginAsync;
async function logoutAsync() {
    currentUser = undefined;
    await (0, sessionStorage_1.setSessionAsync)(undefined);
}
exports.logoutAsync = logoutAsync;
