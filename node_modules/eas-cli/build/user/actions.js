"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureActorHasUsername = exports.ensureLoggedInAsync = exports.showLoginPromptAsync = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const nullthrows_1 = tslib_1.__importDefault(require("nullthrows"));
const api_1 = require("../api");
const log_1 = tslib_1.__importStar(require("../log"));
const prompts_1 = require("../prompts");
const User_1 = require("./User");
const otp_1 = require("./otp");
async function showLoginPromptAsync({ nonInteractive = false, printNewLine = false, } = {}) {
    if (nonInteractive) {
        core_1.Errors.error(`Either log in with ${chalk_1.default.bold('eas login')} or set the ${chalk_1.default.bold('EXPO_TOKEN')} environment variable if you're using EAS CLI on CI (${(0, log_1.learnMore)('https://docs.expo.dev/accounts/programmatic-access/', { dim: false })})`);
    }
    if (printNewLine) {
        log_1.default.newLine();
    }
    log_1.default.log('Log in to EAS');
    const { username, password } = await (0, prompts_1.promptAsync)([
        {
            type: 'text',
            name: 'username',
            message: 'Email or username',
        },
        {
            type: 'password',
            name: 'password',
            message: 'Password',
        },
    ]);
    try {
        await (0, User_1.loginAsync)({
            username,
            password,
        });
    }
    catch (e) {
        if (e instanceof api_1.ApiV2Error && e.expoApiV2ErrorCode === 'ONE_TIME_PASSWORD_REQUIRED') {
            await (0, otp_1.retryUsernamePasswordAuthWithOTPAsync)(username, password, e.expoApiV2ErrorMetadata);
        }
        else {
            throw e;
        }
    }
}
exports.showLoginPromptAsync = showLoginPromptAsync;
async function ensureLoggedInAsync({ nonInteractive = false } = {}) {
    let user;
    try {
        user = await (0, User_1.getUserAsync)();
    }
    catch (_) { }
    if (!user) {
        log_1.default.warn('An Expo user account is required to proceed.');
        await showLoginPromptAsync({ nonInteractive, printNewLine: true });
        user = await (0, User_1.getUserAsync)();
    }
    return (0, nullthrows_1.default)(user);
}
exports.ensureLoggedInAsync = ensureLoggedInAsync;
function ensureActorHasUsername(user) {
    if (user.__typename === 'User') {
        return user.username;
    }
    throw new Error('This action is not supported for robot users.');
}
exports.ensureActorHasUsername = ensureActorHasUsername;
