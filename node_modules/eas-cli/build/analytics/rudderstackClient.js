"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnalyticsEvent = exports.logEvent = exports.flushAsync = exports.setUserDataAsync = exports.initAsync = void 0;
const tslib_1 = require("tslib");
const rudder_sdk_node_1 = tslib_1.__importDefault(require("@expo/rudder-sdk-node"));
const os_1 = tslib_1.__importDefault(require("os"));
const url_1 = require("url");
const uuid_1 = require("uuid");
const UserSettings_1 = tslib_1.__importDefault(require("../user/UserSettings"));
const easCli_1 = require("../utils/easCli");
const PLATFORM_TO_ANALYTICS_PLATFORM = {
    darwin: 'Mac',
    win32: 'Windows',
    linux: 'Linux',
};
let rudderstackClient = null;
let userIdentified = false;
let identifyData = null;
async function initAsync() {
    // TODO: remove after some time
    const amplitudeEnabled = await UserSettings_1.default.getAsync('amplitudeEnabled', null);
    if (amplitudeEnabled !== null) {
        await UserSettings_1.default.setAsync('analyticsEnabled', amplitudeEnabled);
        await UserSettings_1.default.deleteKeyAsync('amplitudeEnabled');
    }
    const amplitudeDeviceId = await UserSettings_1.default.getAsync('amplitudeDeviceId', null);
    if (amplitudeDeviceId !== null) {
        await UserSettings_1.default.setAsync('analyticsDeviceId', amplitudeDeviceId);
        await UserSettings_1.default.deleteKeyAsync('amplitudeDeviceId');
    }
    // TODO: cut here
    if (process.env.DISABLE_EAS_ANALYTICS) {
        await UserSettings_1.default.setAsync('analyticsEnabled', false);
    }
    const analyticsEnabled = await UserSettings_1.default.getAsync('analyticsEnabled', true);
    if (analyticsEnabled) {
        const config = process.env.EXPO_STAGING || process.env.EXPO_LOCAL
            ? {
                // staging environment
                rudderstackWriteKey: '1wpX20Da4ltFGSXbPFYUL00Chb7',
                rudderstackDataPlaneURL: 'https://cdp.expo.dev',
            }
            : {
                // prod environment
                rudderstackWriteKey: '1wpXLFxmujq86etH6G6cc90hPcC',
                rudderstackDataPlaneURL: 'https://cdp.expo.dev',
            };
        rudderstackClient = new rudder_sdk_node_1.default(config.rudderstackWriteKey, new url_1.URL('/v1/batch', config.rudderstackDataPlaneURL).toString(), {
            flushInterval: 300,
        });
    }
}
exports.initAsync = initAsync;
async function setUserDataAsync(userId, traits) {
    const savedDeviceId = await UserSettings_1.default.getAsync('analyticsDeviceId', null);
    const deviceId = savedDeviceId !== null && savedDeviceId !== void 0 ? savedDeviceId : (0, uuid_1.v4)();
    if (!savedDeviceId) {
        await UserSettings_1.default.setAsync('analyticsDeviceId', deviceId);
    }
    identifyData = {
        userId,
        deviceId,
        traits,
    };
    ensureUserIdentified();
}
exports.setUserDataAsync = setUserDataAsync;
async function flushAsync() {
    if (rudderstackClient) {
        await rudderstackClient.flush();
    }
}
exports.flushAsync = flushAsync;
function logEvent(name, properties = {}) {
    if (!rudderstackClient) {
        return;
    }
    ensureUserIdentified();
    const { userId, deviceId } = identifyData !== null && identifyData !== void 0 ? identifyData : {};
    const commonEventProperties = { source_version: easCli_1.easCliVersion, source: 'eas cli' };
    const identity = { userId: userId !== null && userId !== void 0 ? userId : undefined, anonymousId: deviceId !== null && deviceId !== void 0 ? deviceId : (0, uuid_1.v4)() };
    rudderstackClient.track({
        event: name,
        properties: { ...properties, ...commonEventProperties },
        ...identity,
        context: getRudderStackContext(),
    });
}
exports.logEvent = logEvent;
function ensureUserIdentified() {
    if (!rudderstackClient || userIdentified || !identifyData) {
        return;
    }
    rudderstackClient.identify({
        userId: identifyData.userId,
        anonymousId: identifyData.deviceId,
        traits: identifyData.traits,
    });
    userIdentified = true;
}
function getRudderStackContext() {
    const platform = PLATFORM_TO_ANALYTICS_PLATFORM[os_1.default.platform()] || os_1.default.platform();
    return {
        os: { name: platform, version: os_1.default.release() },
        device: { type: platform, model: platform },
        app: { name: 'eas cli', version: easCli_1.easCliVersion !== null && easCli_1.easCliVersion !== void 0 ? easCli_1.easCliVersion : undefined },
    };
}
var AnalyticsEvent;
(function (AnalyticsEvent) {
    AnalyticsEvent["ACTION"] = "action";
})(AnalyticsEvent = exports.AnalyticsEvent || (exports.AnalyticsEvent = {}));
