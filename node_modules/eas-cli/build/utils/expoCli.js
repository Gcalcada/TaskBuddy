"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expoCommandAsync = void 0;
const tslib_1 = require("tslib");
const spawn_async_1 = tslib_1.__importDefault(require("@expo/spawn-async"));
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const resolve_from_1 = tslib_1.__importDefault(require("resolve-from"));
const log_1 = tslib_1.__importDefault(require("../log"));
async function expoCommandAsync(projectDir, args, { silent = false } = {}) {
    const expoCliPath = (0, resolve_from_1.default)(projectDir, 'expo/bin/cli.js');
    const spawnPromise = (0, spawn_async_1.default)(expoCliPath, args, {
        stdio: ['inherit', 'pipe', 'pipe'], // inherit stdin so user can install a missing expo-cli from inside this command
    });
    const { child: { stdout, stderr }, } = spawnPromise;
    if (!(stdout && stderr)) {
        throw new Error('Failed to spawn expo-cli');
    }
    if (!silent) {
        stdout.on('data', data => {
            for (const line of data.toString().trim().split('\n')) {
                log_1.default.log(`${chalk_1.default.gray('[expo-cli]')} ${line}`);
            }
        });
        stderr.on('data', data => {
            for (const line of data.toString().trim().split('\n')) {
                log_1.default.warn(`${chalk_1.default.gray('[expo-cli]')} ${line}`);
            }
        });
    }
    await spawnPromise;
}
exports.expoCommandAsync = expoCommandAsync;
