"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProfilesAsync = void 0;
const tslib_1 = require("tslib");
const eas_json_1 = require("@expo/eas-json");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const log_1 = tslib_1.__importDefault(require("../log"));
const prompts_1 = require("../prompts");
async function getProfilesAsync({ projectDir, platforms, profileName, type, }) {
    const results = platforms.map(async function (platform) {
        if (profileName) {
            const profile = await readProfileAsync({ projectDir, platform, type, profileName });
            return {
                profile,
                profileName,
                platform,
            };
        }
        try {
            const profile = await readProfileAsync({
                projectDir,
                platform,
                type,
                profileName: 'production',
            });
            return {
                profile,
                profileName: 'production',
                platform,
            };
        }
        catch (error) {
            if (!(error instanceof eas_json_1.errors.MissingProfileError)) {
                throw error;
            }
        }
        try {
            const profile = await readProfileAsync({
                projectDir,
                platform,
                type,
                profileName: 'release',
            });
            log_1.default.warn(`The default profile changed from ${chalk_1.default.bold('release')} to ${chalk_1.default.bold('production')}. We detected that you still have a ${chalk_1.default.bold('release')} build profile, so we are using it. Update eas.json to have a profile named ${chalk_1.default.bold('production')} under the ${chalk_1.default.bold('build')} key, or specify which profile you'd like to use with the ${chalk_1.default.bold('--profile')} flag. This fallback behavior will be removed in the next major version of EAS CLI.`);
            return {
                profile,
                profileName: 'release',
                platform,
            };
        }
        catch (error) {
            if (!(error instanceof eas_json_1.errors.MissingProfileError)) {
                throw error;
            }
        }
        const defaultProfile = getDefaultProfile({ platform, type });
        if (defaultProfile) {
            return {
                profile: defaultProfile,
                profileName: '__default__',
                platform,
            };
        }
        const profileNames = await readProfileNamesAsync({
            projectDir,
            type,
        });
        if (profileNames.length === 0) {
            throw new eas_json_1.errors.MissingProfileError(`Missing profile in eas.json: ${profileName !== null && profileName !== void 0 ? profileName : 'production'}`);
        }
        const choices = profileNames.map(profileName => ({
            title: profileName,
            value: profileName,
        }));
        const chosenProfileName = await (0, prompts_1.selectAsync)('The "production" profile is missing in eas.json. Pick another profile:', choices);
        const profile = await readProfileAsync({
            projectDir,
            platform,
            type,
            profileName: chosenProfileName,
        });
        return {
            profile,
            profileName: chosenProfileName,
            platform,
        };
    });
    return await Promise.all(results);
}
exports.getProfilesAsync = getProfilesAsync;
async function readProfileAsync({ projectDir, platform, type, profileName, }) {
    const easJsonReader = new eas_json_1.EasJsonReader(projectDir);
    if (type === 'build') {
        return (await easJsonReader.getBuildProfileAsync(platform, profileName));
    }
    else {
        return (await easJsonReader.getSubmitProfileAsync(platform, profileName));
    }
}
function getDefaultProfile({ platform, type, }) {
    if (type === 'build') {
        return null;
    }
    else {
        return (0, eas_json_1.getDefaultSubmitProfile)(platform);
    }
}
async function readProfileNamesAsync({ projectDir, type, }) {
    const easJsonReader = new eas_json_1.EasJsonReader(projectDir);
    if (type === 'build') {
        return await easJsonReader.getBuildProfileNamesAsync();
    }
    else {
        return await easJsonReader.getSubmitProfileNamesAsync();
    }
}
