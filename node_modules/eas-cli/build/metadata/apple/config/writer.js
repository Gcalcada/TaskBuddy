"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppleConfigWriter = void 0;
const apple_utils_1 = require("@expo/apple-utils");
/**
 * Serializes the Apple ASC entities into the metadata configuration schema.
 * This uses version 0 of the config schema.
 */
class AppleConfigWriter {
    constructor(schema = {}) {
        this.schema = schema;
    }
    /** Get the schema result to write it to the config file */
    toSchema() {
        return {
            configVersion: 0,
            apple: this.schema,
        };
    }
    setAgeRating(attributes) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        this.schema.advisory = {
            alcoholTobaccoOrDrugUseOrReferences: (_a = attributes.alcoholTobaccoOrDrugUseOrReferences) !== null && _a !== void 0 ? _a : apple_utils_1.Rating.NONE,
            contests: (_b = attributes.contests) !== null && _b !== void 0 ? _b : apple_utils_1.Rating.NONE,
            gamblingSimulated: (_c = attributes.gamblingSimulated) !== null && _c !== void 0 ? _c : apple_utils_1.Rating.NONE,
            horrorOrFearThemes: (_d = attributes.horrorOrFearThemes) !== null && _d !== void 0 ? _d : apple_utils_1.Rating.NONE,
            matureOrSuggestiveThemes: (_e = attributes.matureOrSuggestiveThemes) !== null && _e !== void 0 ? _e : apple_utils_1.Rating.NONE,
            medicalOrTreatmentInformation: (_f = attributes.medicalOrTreatmentInformation) !== null && _f !== void 0 ? _f : apple_utils_1.Rating.NONE,
            profanityOrCrudeHumor: (_g = attributes.profanityOrCrudeHumor) !== null && _g !== void 0 ? _g : apple_utils_1.Rating.NONE,
            sexualContentGraphicAndNudity: (_h = attributes.sexualContentGraphicAndNudity) !== null && _h !== void 0 ? _h : apple_utils_1.Rating.NONE,
            sexualContentOrNudity: (_j = attributes.sexualContentOrNudity) !== null && _j !== void 0 ? _j : apple_utils_1.Rating.NONE,
            violenceCartoonOrFantasy: (_k = attributes.violenceCartoonOrFantasy) !== null && _k !== void 0 ? _k : apple_utils_1.Rating.NONE,
            violenceRealistic: (_l = attributes.violenceRealistic) !== null && _l !== void 0 ? _l : apple_utils_1.Rating.NONE,
            violenceRealisticProlongedGraphicOrSadistic: (_m = attributes.violenceRealisticProlongedGraphicOrSadistic) !== null && _m !== void 0 ? _m : apple_utils_1.Rating.NONE,
            gambling: (_o = attributes.gambling) !== null && _o !== void 0 ? _o : false,
            unrestrictedWebAccess: (_p = attributes.unrestrictedWebAccess) !== null && _p !== void 0 ? _p : false,
            kidsAgeBand: (_q = attributes.kidsAgeBand) !== null && _q !== void 0 ? _q : null,
            seventeenPlus: (_r = attributes.seventeenPlus) !== null && _r !== void 0 ? _r : false,
        };
    }
    setInfoLocale(attributes) {
        var _a, _b, _c;
        this.schema.info = (_a = this.schema.info) !== null && _a !== void 0 ? _a : {};
        const existing = (_b = this.schema.info[attributes.locale]) !== null && _b !== void 0 ? _b : {};
        this.schema.info[attributes.locale] = {
            ...existing,
            title: (_c = attributes.name) !== null && _c !== void 0 ? _c : '',
            subtitle: optional(attributes.subtitle),
            privacyPolicyUrl: optional(attributes.privacyPolicyUrl),
            privacyPolicyText: optional(attributes.privacyPolicyText),
            privacyChoicesUrl: optional(attributes.privacyChoicesUrl),
        };
    }
    setCategories(attributes) {
        var _a, _b, _c, _d, _e, _f;
        this.schema.categories = undefined;
        if (!attributes.primaryCategory && !attributes.secondaryCategory) {
            return;
        }
        this.schema.categories = [];
        if (attributes.primaryCategory && attributes.primarySubcategoryOne) {
            this.schema.categories[0] = [
                attributes.primaryCategory.id,
                (_a = attributes.primarySubcategoryOne) === null || _a === void 0 ? void 0 : _a.id,
                (_b = attributes.primarySubcategoryTwo) === null || _b === void 0 ? void 0 : _b.id,
            ].filter(Boolean);
        }
        else {
            // If only the secondaryCategory was provided,
            // autofill with an empty string and cause a store config error.
            this.schema.categories[0] = (_d = (_c = attributes.primaryCategory) === null || _c === void 0 ? void 0 : _c.id) !== null && _d !== void 0 ? _d : '';
        }
        if (attributes.secondaryCategory && attributes.secondarySubcategoryOne) {
            this.schema.categories[1] = [
                attributes.secondaryCategory.id,
                (_e = attributes.secondarySubcategoryOne) === null || _e === void 0 ? void 0 : _e.id,
                (_f = attributes.secondarySubcategoryTwo) === null || _f === void 0 ? void 0 : _f.id,
            ].filter(Boolean);
        }
        else if (attributes.secondaryCategory) {
            this.schema.categories[1] = attributes.secondaryCategory.id;
        }
    }
    setVersion(attributes) {
        this.schema.version = optional(attributes.versionString);
        this.schema.copyright = optional(attributes.copyright);
    }
    setVersionReleaseType(attributes) {
        if (attributes.releaseType === apple_utils_1.ReleaseType.SCHEDULED && attributes.earliestReleaseDate) {
            this.schema.release = {
                ...this.schema.release,
                automaticRelease: attributes.earliestReleaseDate,
            };
        }
        if (attributes.releaseType === apple_utils_1.ReleaseType.AFTER_APPROVAL) {
            this.schema.release = {
                ...this.schema.release,
                automaticRelease: true,
            };
        }
        if (attributes.releaseType === apple_utils_1.ReleaseType.MANUAL) {
            this.schema.release = {
                ...this.schema.release,
                automaticRelease: false,
            };
        }
    }
    setVersionReleasePhased(attributes) {
        var _a;
        if (!attributes) {
            (_a = this.schema.release) === null || _a === void 0 ? true : delete _a.phasedRelease;
        }
        else {
            this.schema.release = {
                ...this.schema.release,
                phasedRelease: true,
            };
        }
    }
    setVersionLocale(attributes) {
        var _a, _b, _c;
        this.schema.info = (_a = this.schema.info) !== null && _a !== void 0 ? _a : {};
        const existing = (_b = this.schema.info[attributes.locale]) !== null && _b !== void 0 ? _b : {};
        this.schema.info[attributes.locale] = {
            ...existing,
            description: optional(attributes.description),
            keywords: (_c = optional(attributes.keywords)) === null || _c === void 0 ? void 0 : _c.split(',').map(keyword => keyword.trim()),
            releaseNotes: optional(attributes.whatsNew),
            marketingUrl: optional(attributes.marketingUrl),
            promoText: optional(attributes.promotionalText),
            supportUrl: optional(attributes.supportUrl),
        };
    }
    setReviewDetails(attributes) {
        var _a, _b, _c, _d;
        this.schema.review = {
            firstName: (_a = attributes.contactFirstName) !== null && _a !== void 0 ? _a : '',
            lastName: (_b = attributes.contactLastName) !== null && _b !== void 0 ? _b : '',
            email: (_c = attributes.contactEmail) !== null && _c !== void 0 ? _c : '',
            phone: (_d = attributes.contactPhone) !== null && _d !== void 0 ? _d : '',
            demoUsername: optional(attributes.demoAccountName),
            demoPassword: optional(attributes.demoAccountPassword),
            demoRequired: optional(attributes.demoAccountRequired),
            notes: optional(attributes.notes),
            // TODO: add attachment
        };
    }
}
exports.AppleConfigWriter = AppleConfigWriter;
/** Helper function to convert `T | null` to `T | undefined`, required for the entity properties */
function optional(value) {
    return value !== null && value !== void 0 ? value : undefined;
}
