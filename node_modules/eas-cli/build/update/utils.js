"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureValidVersions = exports.formatUpdate = exports.getPlatformsForGroup = exports.UPDATE_COLUMNS = void 0;
const tslib_1 = require("tslib");
const timeago_js_1 = require("@expo/timeago.js");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const log_1 = require("../log");
const platform_1 = require("../platform");
const User_1 = require("../user/User");
const groupBy_1 = tslib_1.__importDefault(require("../utils/expodash/groupBy"));
exports.UPDATE_COLUMNS = [
    'Update message',
    'Update runtime version',
    'Update group ID',
    'Update platforms',
];
function getPlatformsForGroup({ group, updates, }) {
    const groupedUpdates = (0, groupBy_1.default)(updates, update => update.group);
    if (Object.keys(groupedUpdates).length === 0) {
        return 'N/A';
    }
    return groupedUpdates[group]
        .map(update => update.platform)
        .sort()
        .join(', ');
}
exports.getPlatformsForGroup = getPlatformsForGroup;
function formatUpdate(update) {
    if (!update) {
        return 'N/A';
    }
    const message = update.message ? `"${update.message}" ` : '';
    return `${message}(${(0, timeago_js_1.format)(update.createdAt, 'en_US')} by ${(0, User_1.getActorDisplayName)(update.actor)})`;
}
exports.formatUpdate = formatUpdate;
function ensureValidVersions(exp, platform) {
    var _a, _b;
    const error = new Error(`Couldn't find either ${chalk_1.default.bold('runtimeVersion')} or ${chalk_1.default.bold('sdkVersion')} to configure ${chalk_1.default.bold('expo-updates')}. Please specify at least one of these properties under the ${chalk_1.default.bold('expo')} key in ${chalk_1.default.bold('app.json')}. ${(0, log_1.learnMore)('https://docs.expo.dev/eas-update/runtime-versions/')}`);
    if ([platform_1.RequestedPlatform.Android, platform_1.RequestedPlatform.All].includes(platform) &&
        !(((_a = exp.android) === null || _a === void 0 ? void 0 : _a.runtimeVersion) || exp.runtimeVersion) &&
        !exp.sdkVersion) {
        throw error;
    }
    if ([platform_1.RequestedPlatform.Ios, platform_1.RequestedPlatform.All].includes(platform) &&
        !(((_b = exp.ios) === null || _b === void 0 ? void 0 : _b.runtimeVersion) || exp.runtimeVersion) &&
        !exp.sdkVersion) {
        throw error;
    }
}
exports.ensureValidVersions = ensureValidVersions;
