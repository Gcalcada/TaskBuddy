"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readChannelSafelyAsync = exports.readReleaseChannelSafelyAsync = exports.syncUpdatesConfigurationAsync = void 0;
const config_plugins_1 = require("@expo/config-plugins");
const platform_1 = require("../../platform");
const projectUtils_1 = require("../../project/projectUtils");
const expoUpdatesCli_1 = require("../../utils/expoUpdatesCli");
const plist_1 = require("../../utils/plist");
const utils_1 = require("../utils");
async function syncUpdatesConfigurationAsync(vcsClient, projectDir, exp) {
    (0, utils_1.ensureValidVersions)(exp, platform_1.RequestedPlatform.Ios);
    if (await (0, projectUtils_1.isModernExpoUpdatesCLIWithRuntimeVersionCommandSupportedAsync)(projectDir)) {
        await (0, expoUpdatesCli_1.expoUpdatesCommandAsync)(projectDir, ['configuration:syncnative', '--platform', 'ios']);
        return;
    }
    const expoPlist = await readExpoPlistAsync(projectDir);
    // TODO(wschurman): this dependency needs to be updated for fingerprint
    const updatedExpoPlist = await config_plugins_1.IOSConfig.Updates.setUpdatesConfigAsync(projectDir, exp, expoPlist);
    await writeExpoPlistAsync(vcsClient, projectDir, updatedExpoPlist);
}
exports.syncUpdatesConfigurationAsync = syncUpdatesConfigurationAsync;
async function readExpoPlistAsync(projectDir) {
    var _a;
    const expoPlistPath = config_plugins_1.IOSConfig.Paths.getExpoPlistPath(projectDir);
    return ((_a = (await (0, plist_1.readPlistAsync)(expoPlistPath))) !== null && _a !== void 0 ? _a : {});
}
async function writeExpoPlistAsync(vcsClient, projectDir, expoPlist) {
    const expoPlistPath = config_plugins_1.IOSConfig.Paths.getExpoPlistPath(projectDir);
    await (0, plist_1.writePlistAsync)(expoPlistPath, expoPlist);
    await vcsClient.trackFileAsync(expoPlistPath);
}
async function readReleaseChannelSafelyAsync(projectDir) {
    var _a;
    try {
        const expoPlist = await readExpoPlistAsync(projectDir);
        return (_a = expoPlist[config_plugins_1.IOSConfig.Updates.Config.RELEASE_CHANNEL]) !== null && _a !== void 0 ? _a : null;
    }
    catch {
        return null;
    }
}
exports.readReleaseChannelSafelyAsync = readReleaseChannelSafelyAsync;
async function readChannelSafelyAsync(projectDir) {
    var _a;
    try {
        const expoPlist = await readExpoPlistAsync(projectDir);
        const updatesRequestHeaders = expoPlist['EXUpdatesRequestHeaders'];
        return (_a = updatesRequestHeaders === null || updatesRequestHeaders === void 0 ? void 0 : updatesRequestHeaders['expo-channel-name']) !== null && _a !== void 0 ? _a : null;
    }
    catch {
        return null;
    }
}
exports.readChannelSafelyAsync = readChannelSafelyAsync;
