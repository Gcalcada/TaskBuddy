"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readChannelSafelyAsync = exports.readReleaseChannelSafelyAsync = exports.syncUpdatesConfigurationAsync = void 0;
const config_plugins_1 = require("@expo/config-plugins");
const platform_1 = require("../../platform");
const projectUtils_1 = require("../../project/projectUtils");
const actions_1 = require("../../user/actions");
const plist_1 = require("../../utils/plist");
const vcs_1 = require("../../vcs");
const utils_1 = require("../utils");
async function syncUpdatesConfigurationAsync(projectDir, exp) {
    (0, utils_1.ensureValidVersions)(exp, platform_1.RequestedPlatform.Ios);
    const accountName = (0, projectUtils_1.getProjectAccountName)(exp, await (0, actions_1.ensureLoggedInAsync)());
    const expoPlist = await readExpoPlistAsync(projectDir);
    const updatedExpoPlist = config_plugins_1.IOSConfig.Updates.setUpdatesConfig(projectDir, exp, expoPlist, accountName);
    await writeExpoPlistAsync(projectDir, updatedExpoPlist);
}
exports.syncUpdatesConfigurationAsync = syncUpdatesConfigurationAsync;
async function readExpoPlistAsync(projectDir) {
    var _a;
    const expoPlistPath = config_plugins_1.IOSConfig.Paths.getExpoPlistPath(projectDir);
    return ((_a = (await (0, plist_1.readPlistAsync)(expoPlistPath))) !== null && _a !== void 0 ? _a : {});
}
async function writeExpoPlistAsync(projectDir, expoPlist) {
    const expoPlistPath = config_plugins_1.IOSConfig.Paths.getExpoPlistPath(projectDir);
    await (0, plist_1.writePlistAsync)(expoPlistPath, expoPlist);
    await (0, vcs_1.getVcsClient)().trackFileAsync(expoPlistPath);
}
async function readReleaseChannelSafelyAsync(projectDir) {
    var _a;
    try {
        const expoPlist = await readExpoPlistAsync(projectDir);
        return (_a = expoPlist[config_plugins_1.IOSConfig.Updates.Config.RELEASE_CHANNEL]) !== null && _a !== void 0 ? _a : null;
    }
    catch (err) {
        return null;
    }
}
exports.readReleaseChannelSafelyAsync = readReleaseChannelSafelyAsync;
async function readChannelSafelyAsync(projectDir) {
    var _a;
    try {
        const expoPlist = await readExpoPlistAsync(projectDir);
        const updatesRequestHeaders = expoPlist['EXUpdatesRequestHeaders'];
        return (_a = updatesRequestHeaders['expo-channel-name']) !== null && _a !== void 0 ? _a : null;
    }
    catch (err) {
        return null;
    }
}
exports.readChannelSafelyAsync = readChannelSafelyAsync;
