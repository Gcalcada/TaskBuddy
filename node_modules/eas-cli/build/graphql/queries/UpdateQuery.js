"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateQuery = void 0;
const tslib_1 = require("tslib");
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const client_1 = require("../client");
const PAGE_LIMIT = 10000;
exports.UpdateQuery = {
    async viewAllAsync({ appId }) {
        return (0, client_1.withErrorHandlingAsync)(client_1.graphqlClient
            .query((0, graphql_tag_1.default) `
            query ViewAllUpdates($appId: String!, $limit: Int!) {
              app {
                byId(appId: $appId) {
                  id
                  updateBranches(offset: 0, limit: $limit) {
                    id
                    name
                    updates(offset: 0, limit: $limit) {
                      id
                      group
                      message
                      createdAt
                      runtimeVersion
                      platform
                      actor {
                        id
                        ... on User {
                          username
                        }
                        ... on Robot {
                          firstName
                        }
                      }
                    }
                  }
                }
              }
            }
          `, {
            appId,
            limit: PAGE_LIMIT,
        }, { additionalTypenames: ['UpdateBranch', 'Update'] })
            .toPromise());
    },
    async viewBranchAsync({ appId, name }) {
        return (0, client_1.withErrorHandlingAsync)(client_1.graphqlClient
            .query((0, graphql_tag_1.default) `
            query ViewBranchUpdates($appId: String!, $name: String!, $limit: Int!) {
              app {
                byId(appId: $appId) {
                  id
                  updateBranchByName(name: $name) {
                    id
                    name
                    updates(offset: 0, limit: $limit) {
                      id
                      group
                      message
                      createdAt
                      runtimeVersion
                      platform
                      manifestFragment
                      actor {
                        id
                        ... on User {
                          username
                        }
                        ... on Robot {
                          firstName
                        }
                      }
                    }
                  }
                }
              }
            }
          `, {
            appId,
            name,
            limit: PAGE_LIMIT,
        }, { additionalTypenames: ['UpdateBranch', 'Update'] })
            .toPromise());
    },
};
