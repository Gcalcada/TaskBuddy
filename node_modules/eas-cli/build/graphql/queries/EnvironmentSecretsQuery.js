"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentSecretsQuery = exports.EnvironmentSecretScope = void 0;
const tslib_1 = require("tslib");
const graphql_1 = require("graphql");
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const client_1 = require("../client");
const EnvironmentSecret_1 = require("../types/EnvironmentSecret");
var EnvironmentSecretScope;
(function (EnvironmentSecretScope) {
    EnvironmentSecretScope["ACCOUNT"] = "account";
    EnvironmentSecretScope["PROJECT"] = "project";
})(EnvironmentSecretScope = exports.EnvironmentSecretScope || (exports.EnvironmentSecretScope = {}));
exports.EnvironmentSecretsQuery = {
    async byAccountNameAsync(accountName) {
        const data = await (0, client_1.withErrorHandlingAsync)(client_1.graphqlClient
            .query((0, graphql_tag_1.default) `
            query EnvironmentSecretsByAccountName($accountName: String!) {
              account {
                byName(accountName: $accountName) {
                  id
                  environmentSecrets {
                    id
                    ...EnvironmentSecretFragment
                  }
                }
              }
            }
            ${(0, graphql_1.print)(EnvironmentSecret_1.EnvironmentSecretFragmentNode)}
          `, { accountName }, {
            additionalTypenames: ['EnvironmentSecret'],
        })
            .toPromise());
        return data.account.byName.environmentSecrets;
    },
    async byAppIdAsync(appId) {
        var _a, _b;
        const data = await (0, client_1.withErrorHandlingAsync)(client_1.graphqlClient
            .query((0, graphql_tag_1.default) `
            query EnvironmentSecretsByAppId($appId: String!) {
              app {
                byId(appId: $appId) {
                  id
                  environmentSecrets {
                    id
                    ...EnvironmentSecretFragment
                  }
                }
              }
            }
            ${(0, graphql_1.print)(EnvironmentSecret_1.EnvironmentSecretFragmentNode)}
          `, { appId }, { additionalTypenames: ['EnvironmentSecret'] })
            .toPromise());
        return (_b = (_a = data.app) === null || _a === void 0 ? void 0 : _a.byId.environmentSecrets) !== null && _b !== void 0 ? _b : [];
    },
    async allAsync(projectAccountName, projectFullName) {
        const [accountSecrets, appSecrets] = await Promise.all([
            this.byAccountNameAsync(projectAccountName),
            this.byAppIdAsync(projectFullName),
        ]);
        return [
            ...appSecrets.map(s => ({ ...s, scope: EnvironmentSecretScope.PROJECT })),
            ...accountSecrets.map(s => ({ ...s, scope: EnvironmentSecretScope.ACCOUNT })),
        ];
    },
};
