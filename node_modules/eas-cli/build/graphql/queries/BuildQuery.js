"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildQuery = void 0;
const tslib_1 = require("tslib");
const graphql_1 = require("graphql");
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const client_1 = require("../client");
const Build_1 = require("../types/Build");
exports.BuildQuery = {
    async byIdAsync(buildId, { useCache = true } = {}) {
        const data = await (0, client_1.withErrorHandlingAsync)(client_1.graphqlClient
            .query((0, graphql_tag_1.default) `
            query BuildsByIdQuery($buildId: ID!) {
              builds {
                byId(buildId: $buildId) {
                  id
                  ...BuildFragment
                }
              }
            }
            ${(0, graphql_1.print)(Build_1.BuildFragmentNode)}
          `, { buildId }, {
            requestPolicy: useCache ? 'cache-first' : 'network-only',
            additionalTypenames: ['Build'],
        })
            .toPromise());
        return data.builds.byId;
    },
    async allForAppAsync(appId, { limit = 10, offset = 0, filter }) {
        var _a, _b;
        const data = await (0, client_1.withErrorHandlingAsync)(client_1.graphqlClient
            .query(
        // TODO: Change $appId: String! to ID! when fixed server-side schema
        (0, graphql_tag_1.default) `
            query GetAllBuildsForApp(
              $appId: String!
              $offset: Int!
              $limit: Int!
              $filter: BuildFilter
            ) {
              app {
                byId(appId: $appId) {
                  id
                  builds(offset: $offset, limit: $limit, filter: $filter) {
                    id
                    ...BuildFragment
                  }
                }
              }
            }
            ${(0, graphql_1.print)(Build_1.BuildFragmentNode)}
          `, { appId, offset, limit, filter }, {
            additionalTypenames: ['Build'],
        })
            .toPromise());
        return (_b = (_a = data.app) === null || _a === void 0 ? void 0 : _a.byId.builds) !== null && _b !== void 0 ? _b : [];
    },
};
