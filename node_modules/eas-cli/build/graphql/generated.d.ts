/**
 * This file was generated using GraphQL Codegen
 * Command: yarn generate-graphql-code
 * Run this during development for automatic type generation when editing GraphQL documents
 * For more info and docs, visit https://graphql-code-generator.com/
 */
export declare type Maybe<T> = T | null;
export declare type InputMaybe<T> = Maybe<T>;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    /** Date custom scalar type */
    DateTime: any;
    /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
    JSON: any;
    /** The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
    JSONObject: any;
    /** The `Upload` scalar type represents a file upload. */
    Upload: any;
};
export declare type AcceptUserInvitationResult = {
    __typename?: 'AcceptUserInvitationResult';
    success: Scalars['Boolean'];
};
/** A method of authentication for an Actor */
export declare type AccessToken = {
    __typename?: 'AccessToken';
    createdAt: Scalars['DateTime'];
    id: Scalars['ID'];
    lastUsedAt?: Maybe<Scalars['DateTime']>;
    note?: Maybe<Scalars['String']>;
    owner: Actor;
    revokedAt?: Maybe<Scalars['DateTime']>;
    updatedAt: Scalars['DateTime'];
    visibleTokenPrefix: Scalars['String'];
};
export declare type AccessTokenMutation = {
    __typename?: 'AccessTokenMutation';
    /** Create an AccessToken for an Actor */
    createAccessToken: CreateAccessTokenResponse;
    /** Delete an AccessToken */
    deleteAccessToken: DeleteAccessTokenResult;
    /** Revoke an AccessToken */
    setAccessTokenRevoked: AccessToken;
};
export declare type AccessTokenMutationCreateAccessTokenArgs = {
    createAccessTokenData: CreateAccessTokenInput;
};
export declare type AccessTokenMutationDeleteAccessTokenArgs = {
    id: Scalars['ID'];
};
export declare type AccessTokenMutationSetAccessTokenRevokedArgs = {
    id: Scalars['ID'];
    revoked?: InputMaybe<Scalars['Boolean']>;
};
/**
 * An account is a container owning projects, credentials, billing and other organization
 * data and settings. Actors may own and be members of accounts.
 */
export declare type Account = {
    __typename?: 'Account';
    /** @deprecated Legacy access tokens are deprecated */
    accessTokens: Array<Maybe<AccessToken>>;
    /** Coalesced project activity for all apps belonging to this account. */
    activityTimelineProjectActivities: Array<ActivityTimelineProjectActivity>;
    appCount: Scalars['Int'];
    appStoreConnectApiKeys: Array<AppStoreConnectApiKey>;
    appleAppIdentifiers: Array<AppleAppIdentifier>;
    appleDevices: Array<AppleDevice>;
    appleDistributionCertificates: Array<AppleDistributionCertificate>;
    appleProvisioningProfiles: Array<AppleProvisioningProfile>;
    applePushKeys: Array<ApplePushKey>;
    /** iOS credentials for account */
    appleTeams: Array<AppleTeam>;
    /** Apps associated with this account */
    apps: Array<App>;
    /** @deprecated Build packs are no longer supported */
    availableBuilds?: Maybe<Scalars['Int']>;
    /** Billing information */
    billing?: Maybe<Billing>;
    /** Build Jobs associated with this account */
    buildJobs: Array<BuildJob>;
    /**
     * Coalesced Build (EAS) or BuildJob (Classic) for all apps belonging to this account.
     * @deprecated Use activityTimelineProjectActivities with filterTypes instead
     */
    buildOrBuildJobs: Array<BuildOrBuildJob>;
    /** (EAS Build) Builds associated with this account */
    builds: Array<Build>;
    createdAt: Scalars['DateTime'];
    /** Environment secrets for an account */
    environmentSecrets: Array<EnvironmentSecret>;
    /** Android credentials for account */
    googleServiceAccountKeys: Array<GoogleServiceAccountKey>;
    id: Scalars['ID'];
    isCurrent: Scalars['Boolean'];
    name: Scalars['String'];
    /** Offers set on this account */
    offers?: Maybe<Array<Offer>>;
    /** Owning User of this account if personal account */
    owner?: Maybe<User>;
    pushSecurityEnabled: Scalars['Boolean'];
    /** @deprecated Legacy access tokens are deprecated */
    requiresAccessTokenForPushSecurity: Scalars['Boolean'];
    /** Snacks associated with this account */
    snacks: Array<Snack>;
    /** Subscription info visible to members that have VIEWER role */
    subscription?: Maybe<SubscriptionDetails>;
    /** @deprecated No longer needed */
    subscriptionChangesPending?: Maybe<Scalars['Boolean']>;
    /** @deprecated See isCurrent */
    unlimitedBuilds: Scalars['Boolean'];
    updatedAt: Scalars['DateTime'];
    /** Pending user invitations for this account */
    userInvitations: Array<UserInvitation>;
    /** Actors associated with this account and permissions they hold */
    users: Array<UserPermission>;
    /** @deprecated Build packs are no longer supported */
    willAutoRenewBuilds?: Maybe<Scalars['Boolean']>;
};
/**
 * An account is a container owning projects, credentials, billing and other organization
 * data and settings. Actors may own and be members of accounts.
 */
export declare type AccountActivityTimelineProjectActivitiesArgs = {
    createdBefore?: InputMaybe<Scalars['DateTime']>;
    filterTypes?: InputMaybe<Array<ActivityTimelineProjectActivityType>>;
    limit: Scalars['Int'];
};
/**
 * An account is a container owning projects, credentials, billing and other organization
 * data and settings. Actors may own and be members of accounts.
 */
export declare type AccountAppleAppIdentifiersArgs = {
    bundleIdentifier?: InputMaybe<Scalars['String']>;
};
/**
 * An account is a container owning projects, credentials, billing and other organization
 * data and settings. Actors may own and be members of accounts.
 */
export declare type AccountAppleDevicesArgs = {
    identifier?: InputMaybe<Scalars['String']>;
};
/**
 * An account is a container owning projects, credentials, billing and other organization
 * data and settings. Actors may own and be members of accounts.
 */
export declare type AccountAppleProvisioningProfilesArgs = {
    appleAppIdentifierId?: InputMaybe<Scalars['ID']>;
};
/**
 * An account is a container owning projects, credentials, billing and other organization
 * data and settings. Actors may own and be members of accounts.
 */
export declare type AccountAppleTeamsArgs = {
    appleTeamIdentifier?: InputMaybe<Scalars['String']>;
};
/**
 * An account is a container owning projects, credentials, billing and other organization
 * data and settings. Actors may own and be members of accounts.
 */
export declare type AccountAppsArgs = {
    includeUnpublished?: InputMaybe<Scalars['Boolean']>;
    limit: Scalars['Int'];
    offset: Scalars['Int'];
};
/**
 * An account is a container owning projects, credentials, billing and other organization
 * data and settings. Actors may own and be members of accounts.
 */
export declare type AccountBuildJobsArgs = {
    limit: Scalars['Int'];
    offset: Scalars['Int'];
    status?: InputMaybe<BuildJobStatus>;
};
/**
 * An account is a container owning projects, credentials, billing and other organization
 * data and settings. Actors may own and be members of accounts.
 */
export declare type AccountBuildOrBuildJobsArgs = {
    createdBefore?: InputMaybe<Scalars['DateTime']>;
    limit: Scalars['Int'];
};
/**
 * An account is a container owning projects, credentials, billing and other organization
 * data and settings. Actors may own and be members of accounts.
 */
export declare type AccountBuildsArgs = {
    limit: Scalars['Int'];
    offset: Scalars['Int'];
    platform?: InputMaybe<AppPlatform>;
    status?: InputMaybe<BuildStatus>;
};
/**
 * An account is a container owning projects, credentials, billing and other organization
 * data and settings. Actors may own and be members of accounts.
 */
export declare type AccountEnvironmentSecretsArgs = {
    filterNames?: InputMaybe<Array<Scalars['String']>>;
};
/**
 * An account is a container owning projects, credentials, billing and other organization
 * data and settings. Actors may own and be members of accounts.
 */
export declare type AccountSnacksArgs = {
    limit: Scalars['Int'];
    offset: Scalars['Int'];
};
export declare type AccountDataInput = {
    name: Scalars['String'];
};
export declare type AccountMutation = {
    __typename?: 'AccountMutation';
    /**
     * Makes a one time purchase
     * @deprecated Build packs are no longer supported
     */
    buyProduct?: Maybe<Account>;
    /** Cancel scheduled subscription change */
    cancelScheduledSubscriptionChange: Account;
    /** Cancels the active subscription */
    cancelSubscription: Account;
    /** Upgrades or downgrades the active subscription to the newPlanIdentifier, which must be one of the EAS plans (i.e., Production or Enterprise). */
    changePlan: Account;
    /** Add specified account Permissions for Actor. Actor must already have at least one permission on the account. */
    grantActorPermissions: Account;
    /** Rename this account and the primary user's username if this account is a personal account */
    rename: Account;
    /** Requests a refund for the specified charge. Returns true if auto-refund was possible, otherwise requests a manual refund from support and returns false. */
    requestRefund: Scalars['Boolean'];
    /** Revoke specified Permissions for Actor. Actor must already have at least one permission on the account. */
    revokeActorPermissions: Account;
    /**
     * Update setting to purchase new build packs when the current one is consumed
     * @deprecated Build packs are no longer supported
     */
    setBuildAutoRenew?: Maybe<Account>;
    /** Set payment details */
    setPaymentSource: Account;
    /** Require authorization to send push notifications for experiences owned by this account */
    setPushSecurityEnabled: Account;
    /** Add a subscription */
    subscribeToProduct: Account;
};
export declare type AccountMutationBuyProductArgs = {
    accountName: Scalars['ID'];
    autoRenew?: InputMaybe<Scalars['Boolean']>;
    paymentSource?: InputMaybe<Scalars['ID']>;
    productId: Scalars['ID'];
};
export declare type AccountMutationCancelScheduledSubscriptionChangeArgs = {
    accountID: Scalars['ID'];
};
export declare type AccountMutationCancelSubscriptionArgs = {
    accountName: Scalars['ID'];
};
export declare type AccountMutationChangePlanArgs = {
    accountID: Scalars['ID'];
    couponCode?: InputMaybe<Scalars['String']>;
    newPlanIdentifier: Scalars['String'];
};
export declare type AccountMutationGrantActorPermissionsArgs = {
    accountID: Scalars['ID'];
    actorID: Scalars['ID'];
    permissions?: InputMaybe<Array<InputMaybe<Permission>>>;
};
export declare type AccountMutationRenameArgs = {
    accountID: Scalars['ID'];
    newName: Scalars['String'];
};
export declare type AccountMutationRequestRefundArgs = {
    accountID: Scalars['ID'];
    chargeIdentifier: Scalars['ID'];
};
export declare type AccountMutationRevokeActorPermissionsArgs = {
    accountID: Scalars['ID'];
    actorID: Scalars['ID'];
    permissions?: InputMaybe<Array<InputMaybe<Permission>>>;
};
export declare type AccountMutationSetBuildAutoRenewArgs = {
    accountName: Scalars['ID'];
    autoRenew?: InputMaybe<Scalars['Boolean']>;
};
export declare type AccountMutationSetPaymentSourceArgs = {
    accountName: Scalars['ID'];
    paymentSource: Scalars['ID'];
};
export declare type AccountMutationSetPushSecurityEnabledArgs = {
    accountID: Scalars['ID'];
    pushSecurityEnabled: Scalars['Boolean'];
};
export declare type AccountMutationSubscribeToProductArgs = {
    accountName: Scalars['ID'];
    paymentSource: Scalars['ID'];
    productId: Scalars['ID'];
};
export declare type AccountQuery = {
    __typename?: 'AccountQuery';
    /** Query an Account by ID */
    byId: Account;
    /** Query an Account by name */
    byName: Account;
};
export declare type AccountQueryByIdArgs = {
    accountId: Scalars['String'];
};
export declare type AccountQueryByNameArgs = {
    accountName: Scalars['String'];
};
export declare type ActivityTimelineProjectActivity = {
    activityTimestamp: Scalars['DateTime'];
    actor?: Maybe<Actor>;
    id: Scalars['ID'];
};
export declare enum ActivityTimelineProjectActivityType {
    Build = "BUILD",
    BuildJob = "BUILD_JOB",
    Submission = "SUBMISSION",
    Update = "UPDATE"
}
/** A user or robot that can authenticate with Expo services and be a member of accounts. */
export declare type Actor = {
    /** Access Tokens belonging to this actor */
    accessTokens: Array<AccessToken>;
    /** Associated accounts */
    accounts: Array<Account>;
    created: Scalars['DateTime'];
    /**
     * Best-effort human readable name for this actor for use in user interfaces during action attribution.
     * For example, when displaying a sentence indicating that actor X created a build or published an update.
     */
    displayName: Scalars['String'];
    /**
     * Server feature gate values for this actor, optionally filtering by desired gates.
     * Only resolves for the viewer.
     */
    featureGates: Scalars['JSONObject'];
    firstName?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    isExpoAdmin: Scalars['Boolean'];
};
/** A user or robot that can authenticate with Expo services and be a member of accounts. */
export declare type ActorFeatureGatesArgs = {
    filter?: InputMaybe<Array<Scalars['String']>>;
};
export declare type ActorQuery = {
    __typename?: 'ActorQuery';
    /** Query an Actor by ID */
    byId: Actor;
};
export declare type ActorQueryByIdArgs = {
    id: Scalars['ID'];
};
export declare type AddUserInput = {
    audience?: InputMaybe<MailchimpAudience>;
    email: Scalars['String'];
    tags?: InputMaybe<Array<MailchimpTag>>;
};
export declare type AddUserPayload = {
    __typename?: 'AddUserPayload';
    email_address?: Maybe<Scalars['String']>;
    id?: Maybe<Scalars['String']>;
    list_id?: Maybe<Scalars['String']>;
    status?: Maybe<Scalars['String']>;
    tags?: Maybe<Array<MailchimpTagPayload>>;
    timestamp_signup?: Maybe<Scalars['String']>;
};
export declare type AddonDetails = {
    __typename?: 'AddonDetails';
    id: Scalars['ID'];
    name: Scalars['String'];
    nextInvoice?: Maybe<Scalars['DateTime']>;
    planId: Scalars['String'];
    willCancel?: Maybe<Scalars['Boolean']>;
};
export declare type Address = {
    __typename?: 'Address';
    city?: Maybe<Scalars['String']>;
    country?: Maybe<Scalars['String']>;
    line1?: Maybe<Scalars['String']>;
    state?: Maybe<Scalars['String']>;
    zip?: Maybe<Scalars['String']>;
};
export declare type AndroidAppBuildCredentials = {
    __typename?: 'AndroidAppBuildCredentials';
    androidKeystore?: Maybe<AndroidKeystore>;
    id: Scalars['ID'];
    isDefault: Scalars['Boolean'];
    isLegacy: Scalars['Boolean'];
    name: Scalars['String'];
};
/** @isDefault: if set, these build credentials will become the default for the Android app. All other build credentials will have their default status set to false. */
export declare type AndroidAppBuildCredentialsInput = {
    isDefault: Scalars['Boolean'];
    keystoreId: Scalars['ID'];
    name: Scalars['String'];
};
export declare type AndroidAppBuildCredentialsMutation = {
    __typename?: 'AndroidAppBuildCredentialsMutation';
    /** Create a set of build credentials for an Android app */
    createAndroidAppBuildCredentials: AndroidAppBuildCredentials;
    /** delete a set of build credentials for an Android app */
    deleteAndroidAppBuildCredentials: DeleteAndroidAppBuildCredentialsResult;
    /** Set the build credentials to be the default for the Android app */
    setDefault: AndroidAppBuildCredentials;
    /** Set the keystore to be used for an Android app */
    setKeystore: AndroidAppBuildCredentials;
    /** Set the name of a set of build credentials to be used for an Android app */
    setName: AndroidAppBuildCredentials;
};
export declare type AndroidAppBuildCredentialsMutationCreateAndroidAppBuildCredentialsArgs = {
    androidAppBuildCredentialsInput: AndroidAppBuildCredentialsInput;
    androidAppCredentialsId: Scalars['ID'];
};
export declare type AndroidAppBuildCredentialsMutationDeleteAndroidAppBuildCredentialsArgs = {
    id: Scalars['ID'];
};
export declare type AndroidAppBuildCredentialsMutationSetDefaultArgs = {
    id: Scalars['ID'];
    isDefault: Scalars['Boolean'];
};
export declare type AndroidAppBuildCredentialsMutationSetKeystoreArgs = {
    id: Scalars['ID'];
    keystoreId: Scalars['ID'];
};
export declare type AndroidAppBuildCredentialsMutationSetNameArgs = {
    id: Scalars['ID'];
    name: Scalars['String'];
};
export declare type AndroidAppCredentials = {
    __typename?: 'AndroidAppCredentials';
    /** @deprecated use androidAppBuildCredentialsList instead */
    androidAppBuildCredentialsArray: Array<AndroidAppBuildCredentials>;
    androidAppBuildCredentialsList: Array<AndroidAppBuildCredentials>;
    androidFcm?: Maybe<AndroidFcm>;
    app: App;
    applicationIdentifier?: Maybe<Scalars['String']>;
    googleServiceAccountKeyForSubmissions?: Maybe<GoogleServiceAccountKey>;
    id: Scalars['ID'];
    isLegacy: Scalars['Boolean'];
};
export declare type AndroidAppCredentialsFilter = {
    applicationIdentifier?: InputMaybe<Scalars['String']>;
    legacyOnly?: InputMaybe<Scalars['Boolean']>;
};
export declare type AndroidAppCredentialsInput = {
    fcmId?: InputMaybe<Scalars['ID']>;
    googleServiceAccountKeyForSubmissionsId?: InputMaybe<Scalars['ID']>;
};
export declare type AndroidAppCredentialsMutation = {
    __typename?: 'AndroidAppCredentialsMutation';
    /** Create a set of credentials for an Android app */
    createAndroidAppCredentials: AndroidAppCredentials;
    /** Set the FCM push key to be used in an Android app */
    setFcm: AndroidAppCredentials;
    /** Set the Google Service Account Key to be used for submitting an Android app */
    setGoogleServiceAccountKeyForSubmissions: AndroidAppCredentials;
};
export declare type AndroidAppCredentialsMutationCreateAndroidAppCredentialsArgs = {
    androidAppCredentialsInput: AndroidAppCredentialsInput;
    appId: Scalars['ID'];
    applicationIdentifier: Scalars['String'];
};
export declare type AndroidAppCredentialsMutationSetFcmArgs = {
    fcmId: Scalars['ID'];
    id: Scalars['ID'];
};
export declare type AndroidAppCredentialsMutationSetGoogleServiceAccountKeyForSubmissionsArgs = {
    googleServiceAccountKeyId: Scalars['ID'];
    id: Scalars['ID'];
};
export declare enum AndroidBuildType {
    Apk = "APK",
    AppBundle = "APP_BUNDLE",
    /** @deprecated Use developmentClient option instead. */
    DevelopmentClient = "DEVELOPMENT_CLIENT"
}
export declare type AndroidBuilderEnvironmentInput = {
    env?: InputMaybe<Scalars['JSONObject']>;
    expoCli?: InputMaybe<Scalars['String']>;
    image?: InputMaybe<Scalars['String']>;
    ndk?: InputMaybe<Scalars['String']>;
    node?: InputMaybe<Scalars['String']>;
    yarn?: InputMaybe<Scalars['String']>;
};
export declare type AndroidFcm = {
    __typename?: 'AndroidFcm';
    account: Account;
    createdAt: Scalars['DateTime'];
    /**
     * Legacy FCM: returns the Cloud Messaging token, parses to a String
     * FCM v1: returns the Service Account Key file, parses to an Object
     */
    credential: Scalars['JSON'];
    id: Scalars['ID'];
    snippet: FcmSnippet;
    updatedAt: Scalars['DateTime'];
    version: AndroidFcmVersion;
};
export declare type AndroidFcmInput = {
    credential: Scalars['String'];
    version: AndroidFcmVersion;
};
export declare type AndroidFcmMutation = {
    __typename?: 'AndroidFcmMutation';
    /** Create an FCM credential */
    createAndroidFcm: AndroidFcm;
    /** Delete an FCM credential */
    deleteAndroidFcm: DeleteAndroidFcmResult;
};
export declare type AndroidFcmMutationCreateAndroidFcmArgs = {
    accountId: Scalars['ID'];
    androidFcmInput: AndroidFcmInput;
};
export declare type AndroidFcmMutationDeleteAndroidFcmArgs = {
    id: Scalars['ID'];
};
export declare enum AndroidFcmVersion {
    Legacy = "LEGACY",
    V1 = "V1"
}
export declare type AndroidJobBuildCredentialsInput = {
    keystore: AndroidJobKeystoreInput;
};
export declare type AndroidJobInput = {
    artifactPath?: InputMaybe<Scalars['String']>;
    buildType?: InputMaybe<AndroidBuildType>;
    builderEnvironment?: InputMaybe<AndroidBuilderEnvironmentInput>;
    cache?: InputMaybe<BuildCacheInput>;
    developmentClient?: InputMaybe<Scalars['Boolean']>;
    experimental?: InputMaybe<Scalars['JSONObject']>;
    gradleCommand?: InputMaybe<Scalars['String']>;
    projectArchive: ProjectArchiveSourceInput;
    projectRootDirectory: Scalars['String'];
    releaseChannel?: InputMaybe<Scalars['String']>;
    secrets?: InputMaybe<AndroidJobSecretsInput>;
    type: BuildWorkflow;
    updates?: InputMaybe<BuildUpdatesInput>;
    username?: InputMaybe<Scalars['String']>;
};
export declare type AndroidJobKeystoreInput = {
    dataBase64: Scalars['String'];
    keyAlias: Scalars['String'];
    keyPassword?: InputMaybe<Scalars['String']>;
    keystorePassword: Scalars['String'];
};
export declare type AndroidJobSecretsInput = {
    buildCredentials?: InputMaybe<AndroidJobBuildCredentialsInput>;
    environmentSecrets?: InputMaybe<Scalars['JSONObject']>;
};
export declare type AndroidKeystore = {
    __typename?: 'AndroidKeystore';
    account: Account;
    createdAt: Scalars['DateTime'];
    id: Scalars['ID'];
    keyAlias: Scalars['String'];
    keyPassword?: Maybe<Scalars['String']>;
    keystore: Scalars['String'];
    keystorePassword: Scalars['String'];
    md5CertificateFingerprint?: Maybe<Scalars['String']>;
    sha1CertificateFingerprint?: Maybe<Scalars['String']>;
    sha256CertificateFingerprint?: Maybe<Scalars['String']>;
    type: AndroidKeystoreType;
    updatedAt: Scalars['DateTime'];
};
export declare type AndroidKeystoreInput = {
    base64EncodedKeystore: Scalars['String'];
    keyAlias: Scalars['String'];
    keyPassword?: InputMaybe<Scalars['String']>;
    keystorePassword: Scalars['String'];
    type: AndroidKeystoreType;
};
export declare type AndroidKeystoreMutation = {
    __typename?: 'AndroidKeystoreMutation';
    /** Create a Keystore */
    createAndroidKeystore?: Maybe<AndroidKeystore>;
    /** Delete a Keystore */
    deleteAndroidKeystore: DeleteAndroidKeystoreResult;
};
export declare type AndroidKeystoreMutationCreateAndroidKeystoreArgs = {
    accountId: Scalars['ID'];
    androidKeystoreInput: AndroidKeystoreInput;
};
export declare type AndroidKeystoreMutationDeleteAndroidKeystoreArgs = {
    id: Scalars['ID'];
};
export declare enum AndroidKeystoreType {
    Jks = "JKS",
    Pkcs12 = "PKCS12",
    Unknown = "UNKNOWN"
}
export declare type AndroidSubmissionConfig = {
    __typename?: 'AndroidSubmissionConfig';
    /** @deprecated applicationIdentifier is deprecated and will be auto-detected on submit */
    applicationIdentifier?: Maybe<Scalars['String']>;
    /** @deprecated archiveType is deprecated and will be null */
    archiveType?: Maybe<SubmissionAndroidArchiveType>;
    releaseStatus?: Maybe<SubmissionAndroidReleaseStatus>;
    track: SubmissionAndroidTrack;
};
export declare type AndroidSubmissionConfigInput = {
    applicationIdentifier?: InputMaybe<Scalars['String']>;
    archiveUrl?: InputMaybe<Scalars['String']>;
    changesNotSentForReview?: InputMaybe<Scalars['Boolean']>;
    googleServiceAccountKeyId?: InputMaybe<Scalars['String']>;
    googleServiceAccountKeyJson?: InputMaybe<Scalars['String']>;
    releaseStatus?: InputMaybe<SubmissionAndroidReleaseStatus>;
    track: SubmissionAndroidTrack;
};
/** Represents an Exponent App (or Experience in legacy terms) */
export declare type App = Project & {
    __typename?: 'App';
    /** @deprecated Legacy access tokens are deprecated */
    accessTokens: Array<Maybe<AccessToken>>;
    /** Coalesced project activity for an app */
    activityTimelineProjectActivities: Array<ActivityTimelineProjectActivity>;
    /** Android app credentials for the project */
    androidAppCredentials: Array<AndroidAppCredentials>;
    /** ios.appStoreUrl field from most recent classic update manifest */
    appStoreUrl?: Maybe<Scalars['String']>;
    buildJobs: Array<BuildJob>;
    /**
     * Coalesced Build (EAS) or BuildJob (Classic) items for this app.
     * @deprecated Use activityTimelineProjectActivities with filterTypes instead
     */
    buildOrBuildJobs: Array<BuildOrBuildJob>;
    /** (EAS Build) Builds associated with this app */
    builds: Array<Build>;
    /** Classic update release channel names that have at least one build */
    buildsReleaseChannels: Array<Scalars['String']>;
    deployment?: Maybe<Deployment>;
    /** Deployments associated with this app */
    deployments: Array<Deployment>;
    description: Scalars['String'];
    /** Environment secrets for an app */
    environmentSecrets: Array<EnvironmentSecret>;
    fullName: Scalars['String'];
    /** githubUrl field from most recent classic update manifest */
    githubUrl?: Maybe<Scalars['String']>;
    /** Info about the icon specified in the most recent classic update manifest */
    icon?: Maybe<AppIcon>;
    /** @deprecated No longer supported */
    iconUrl?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    /** iOS app credentials for the project */
    iosAppCredentials: Array<IosAppCredentials>;
    /** Whether the latest classic update publish is using a deprecated SDK version */
    isDeprecated: Scalars['Boolean'];
    /** @deprecated 'likes' have been deprecated. */
    isLikedByMe: Scalars['Boolean'];
    /** @deprecated No longer supported */
    lastPublishedTime: Scalars['DateTime'];
    latestReleaseForReleaseChannel?: Maybe<AppRelease>;
    /** ID of latest classic update release */
    latestReleaseId: Scalars['ID'];
    /** @deprecated 'likes' have been deprecated. */
    likeCount: Scalars['Int'];
    /** @deprecated 'likes' have been deprecated. */
    likedBy: Array<Maybe<User>>;
    name: Scalars['String'];
    ownerAccount: Account;
    /** @deprecated No longer supported */
    packageName: Scalars['String'];
    /** @deprecated No longer supported */
    packageUsername: Scalars['String'];
    /** android.playStoreUrl field from most recent classic update manifest */
    playStoreUrl?: Maybe<Scalars['String']>;
    /** @deprecated Use 'privacySetting' instead. */
    privacy: Scalars['String'];
    privacySetting: AppPrivacy;
    /** Whether there have been any classic update publishes */
    published: Scalars['Boolean'];
    pushSecurityEnabled: Scalars['Boolean'];
    /** Classic update release channel names (to be removed) */
    releaseChannels: Array<Scalars['String']>;
    /** @deprecated Legacy access tokens are deprecated */
    requiresAccessTokenForPushSecurity: Scalars['Boolean'];
    /** SDK version of the latest classic update publish, 0.0.0 otherwise */
    sdkVersion: Scalars['String'];
    slug: Scalars['String'];
    /** EAS Submissions associated with this app */
    submissions: Array<Submission>;
    /** @deprecated 'likes' have been deprecated. */
    trendScore: Scalars['Float'];
    /** get an EAS branch owned by the app by name */
    updateBranchByName?: Maybe<UpdateBranch>;
    /** EAS branches owned by an app */
    updateBranches: Array<UpdateBranch>;
    /** get an EAS channel owned by the app by name */
    updateChannelByName?: Maybe<UpdateChannel>;
    /** EAS channels owned by an app */
    updateChannels: Array<UpdateChannel>;
    /** Time of last classic update publish */
    updated: Scalars['DateTime'];
    /** EAS updates owned by an app */
    updates: Array<Update>;
    /** @deprecated Use ownerAccount.name instead */
    username: Scalars['String'];
    /** @deprecated No longer supported */
    users?: Maybe<Array<Maybe<User>>>;
    /** Webhooks for an app */
    webhooks: Array<Webhook>;
};
/** Represents an Exponent App (or Experience in legacy terms) */
export declare type AppActivityTimelineProjectActivitiesArgs = {
    createdBefore?: InputMaybe<Scalars['DateTime']>;
    filterPlatforms?: InputMaybe<Array<AppPlatform>>;
    filterReleaseChannels?: InputMaybe<Array<Scalars['String']>>;
    filterTypes?: InputMaybe<Array<ActivityTimelineProjectActivityType>>;
    limit: Scalars['Int'];
};
/** Represents an Exponent App (or Experience in legacy terms) */
export declare type AppAndroidAppCredentialsArgs = {
    filter?: InputMaybe<AndroidAppCredentialsFilter>;
};
/** Represents an Exponent App (or Experience in legacy terms) */
export declare type AppBuildJobsArgs = {
    limit: Scalars['Int'];
    offset: Scalars['Int'];
    status?: InputMaybe<BuildStatus>;
};
/** Represents an Exponent App (or Experience in legacy terms) */
export declare type AppBuildOrBuildJobsArgs = {
    createdBefore?: InputMaybe<Scalars['DateTime']>;
    limit: Scalars['Int'];
};
/** Represents an Exponent App (or Experience in legacy terms) */
export declare type AppBuildsArgs = {
    filter?: InputMaybe<BuildFilter>;
    limit: Scalars['Int'];
    offset: Scalars['Int'];
    platform?: InputMaybe<AppPlatform>;
    status?: InputMaybe<BuildStatus>;
};
/** Represents an Exponent App (or Experience in legacy terms) */
export declare type AppDeploymentArgs = {
    channel: Scalars['String'];
    options?: InputMaybe<DeploymentOptions>;
    runtimeVersion: Scalars['String'];
};
/** Represents an Exponent App (or Experience in legacy terms) */
export declare type AppDeploymentsArgs = {
    limit: Scalars['Int'];
    mostRecentlyUpdatedAt?: InputMaybe<Scalars['DateTime']>;
    options?: InputMaybe<DeploymentOptions>;
};
/** Represents an Exponent App (or Experience in legacy terms) */
export declare type AppEnvironmentSecretsArgs = {
    filterNames?: InputMaybe<Array<Scalars['String']>>;
};
/** Represents an Exponent App (or Experience in legacy terms) */
export declare type AppIosAppCredentialsArgs = {
    filter?: InputMaybe<IosAppCredentialsFilter>;
};
/** Represents an Exponent App (or Experience in legacy terms) */
export declare type AppLatestReleaseForReleaseChannelArgs = {
    platform: AppPlatform;
    releaseChannel: Scalars['String'];
};
/** Represents an Exponent App (or Experience in legacy terms) */
export declare type AppLikedByArgs = {
    limit?: InputMaybe<Scalars['Int']>;
    offset?: InputMaybe<Scalars['Int']>;
};
/** Represents an Exponent App (or Experience in legacy terms) */
export declare type AppSubmissionsArgs = {
    filter: SubmissionFilter;
    limit: Scalars['Int'];
    offset: Scalars['Int'];
};
/** Represents an Exponent App (or Experience in legacy terms) */
export declare type AppUpdateBranchByNameArgs = {
    name: Scalars['String'];
};
/** Represents an Exponent App (or Experience in legacy terms) */
export declare type AppUpdateBranchesArgs = {
    limit: Scalars['Int'];
    offset: Scalars['Int'];
};
/** Represents an Exponent App (or Experience in legacy terms) */
export declare type AppUpdateChannelByNameArgs = {
    name: Scalars['String'];
};
/** Represents an Exponent App (or Experience in legacy terms) */
export declare type AppUpdateChannelsArgs = {
    limit: Scalars['Int'];
    offset: Scalars['Int'];
};
/** Represents an Exponent App (or Experience in legacy terms) */
export declare type AppUpdatesArgs = {
    limit: Scalars['Int'];
    offset: Scalars['Int'];
};
/** Represents an Exponent App (or Experience in legacy terms) */
export declare type AppWebhooksArgs = {
    filter?: InputMaybe<WebhookFilter>;
};
export declare type AppDataInput = {
    id: Scalars['ID'];
    privacy?: InputMaybe<Scalars['String']>;
};
export declare type AppIcon = {
    __typename?: 'AppIcon';
    /** Nullable color palette of the app icon. If null, color palette couldn't be retrieved from external service (imgix) */
    colorPalette?: Maybe<Scalars['JSON']>;
    originalUrl: Scalars['String'];
    primaryColor?: Maybe<Scalars['String']>;
    url: Scalars['String'];
};
export declare type AppInput = {
    accountId: Scalars['ID'];
    privacy: AppPrivacy;
    projectName: Scalars['String'];
};
export declare type AppMutation = {
    __typename?: 'AppMutation';
    /** Create an unpublished app */
    createApp: App;
    /** @deprecated No longer supported */
    grantAccess?: Maybe<App>;
    /** Require api token to send push notifs for experience */
    setPushSecurityEnabled: App;
};
export declare type AppMutationCreateAppArgs = {
    appInput: AppInput;
};
export declare type AppMutationGrantAccessArgs = {
    accessLevel?: InputMaybe<Scalars['String']>;
    toUser: Scalars['ID'];
};
export declare type AppMutationSetPushSecurityEnabledArgs = {
    appId: Scalars['ID'];
    pushSecurityEnabled: Scalars['Boolean'];
};
export declare enum AppPlatform {
    Android = "ANDROID",
    Ios = "IOS"
}
export declare enum AppPrivacy {
    Hidden = "HIDDEN",
    Public = "PUBLIC",
    Unlisted = "UNLISTED"
}
export declare type AppQuery = {
    __typename?: 'AppQuery';
    /**
     * Public apps in the app directory
     * @deprecated App directory no longer supported
     */
    all: Array<App>;
    byFullName: App;
    /** Look up app by app id */
    byId: App;
};
export declare type AppQueryAllArgs = {
    filter: AppsFilter;
    limit?: InputMaybe<Scalars['Int']>;
    offset?: InputMaybe<Scalars['Int']>;
    sort: AppSort;
};
export declare type AppQueryByFullNameArgs = {
    fullName: Scalars['String'];
};
export declare type AppQueryByIdArgs = {
    appId: Scalars['String'];
};
export declare type AppRelease = {
    __typename?: 'AppRelease';
    hash: Scalars['String'];
    id: Scalars['ID'];
    manifest: Scalars['JSON'];
    publishedTime: Scalars['DateTime'];
    publishingUsername: Scalars['String'];
    runtimeVersion?: Maybe<Scalars['String']>;
    s3Key: Scalars['String'];
    s3Url: Scalars['String'];
    sdkVersion: Scalars['String'];
    version: Scalars['String'];
};
export declare enum AppSort {
    /** Sort by recently published */
    RecentlyPublished = "RECENTLY_PUBLISHED",
    /** Sort by highest trendScore */
    Viewed = "VIEWED"
}
export declare type AppStoreConnectApiKey = {
    __typename?: 'AppStoreConnectApiKey';
    account: Account;
    appleTeam?: Maybe<AppleTeam>;
    createdAt: Scalars['DateTime'];
    id: Scalars['ID'];
    issuerIdentifier: Scalars['String'];
    keyIdentifier: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    roles?: Maybe<Array<AppStoreConnectUserRole>>;
    updatedAt: Scalars['DateTime'];
};
export declare type AppStoreConnectApiKeyInput = {
    appleTeamId?: InputMaybe<Scalars['ID']>;
    issuerIdentifier: Scalars['String'];
    keyIdentifier: Scalars['String'];
    keyP8: Scalars['String'];
    name?: InputMaybe<Scalars['String']>;
    roles?: InputMaybe<Array<AppStoreConnectUserRole>>;
};
export declare type AppStoreConnectApiKeyMutation = {
    __typename?: 'AppStoreConnectApiKeyMutation';
    /** Create an App Store Connect Api Key for an Apple Team */
    createAppStoreConnectApiKey: AppStoreConnectApiKey;
    /** Delete an App Store Connect Api Key */
    deleteAppStoreConnectApiKey: DeleteAppStoreConnectApiKeyResult;
};
export declare type AppStoreConnectApiKeyMutationCreateAppStoreConnectApiKeyArgs = {
    accountId: Scalars['ID'];
    appStoreConnectApiKeyInput: AppStoreConnectApiKeyInput;
};
export declare type AppStoreConnectApiKeyMutationDeleteAppStoreConnectApiKeyArgs = {
    id: Scalars['ID'];
};
export declare enum AppStoreConnectUserRole {
    AccessToReports = "ACCESS_TO_REPORTS",
    AccountHolder = "ACCOUNT_HOLDER",
    Admin = "ADMIN",
    AppManager = "APP_MANAGER",
    CloudManagedAppDistribution = "CLOUD_MANAGED_APP_DISTRIBUTION",
    CloudManagedDeveloperId = "CLOUD_MANAGED_DEVELOPER_ID",
    CreateApps = "CREATE_APPS",
    CustomerSupport = "CUSTOMER_SUPPORT",
    Developer = "DEVELOPER",
    Finance = "FINANCE",
    ImageManager = "IMAGE_MANAGER",
    Marketing = "MARKETING",
    ReadOnly = "READ_ONLY",
    Sales = "SALES",
    Technical = "TECHNICAL",
    Unknown = "UNKNOWN"
}
export declare type AppleAppIdentifier = {
    __typename?: 'AppleAppIdentifier';
    account: Account;
    appleTeam?: Maybe<AppleTeam>;
    bundleIdentifier: Scalars['String'];
    id: Scalars['ID'];
    parentAppleAppIdentifier?: Maybe<AppleAppIdentifier>;
};
export declare type AppleAppIdentifierInput = {
    appleTeamId?: InputMaybe<Scalars['ID']>;
    bundleIdentifier: Scalars['String'];
    parentAppleAppId?: InputMaybe<Scalars['ID']>;
};
export declare type AppleAppIdentifierMutation = {
    __typename?: 'AppleAppIdentifierMutation';
    /** Create an Identifier for an iOS App */
    createAppleAppIdentifier: AppleAppIdentifier;
};
export declare type AppleAppIdentifierMutationCreateAppleAppIdentifierArgs = {
    accountId: Scalars['ID'];
    appleAppIdentifierInput: AppleAppIdentifierInput;
};
export declare type AppleDevice = {
    __typename?: 'AppleDevice';
    account: Account;
    appleTeam: AppleTeam;
    deviceClass?: Maybe<AppleDeviceClass>;
    enabled?: Maybe<Scalars['Boolean']>;
    id: Scalars['ID'];
    identifier: Scalars['String'];
    model?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    softwareVersion?: Maybe<Scalars['String']>;
};
export declare enum AppleDeviceClass {
    Ipad = "IPAD",
    Iphone = "IPHONE"
}
export declare type AppleDeviceInput = {
    appleTeamId: Scalars['ID'];
    deviceClass?: InputMaybe<AppleDeviceClass>;
    enabled?: InputMaybe<Scalars['Boolean']>;
    identifier: Scalars['String'];
    model?: InputMaybe<Scalars['String']>;
    name?: InputMaybe<Scalars['String']>;
    softwareVersion?: InputMaybe<Scalars['String']>;
};
export declare type AppleDeviceMutation = {
    __typename?: 'AppleDeviceMutation';
    /** Create an Apple Device */
    createAppleDevice: AppleDevice;
    /** Delete an Apple Device */
    deleteAppleDevice: DeleteAppleDeviceResult;
};
export declare type AppleDeviceMutationCreateAppleDeviceArgs = {
    accountId: Scalars['ID'];
    appleDeviceInput: AppleDeviceInput;
};
export declare type AppleDeviceMutationDeleteAppleDeviceArgs = {
    id: Scalars['ID'];
};
export declare type AppleDeviceRegistrationRequest = {
    __typename?: 'AppleDeviceRegistrationRequest';
    account: Account;
    appleTeam: AppleTeam;
    id: Scalars['ID'];
};
export declare type AppleDeviceRegistrationRequestMutation = {
    __typename?: 'AppleDeviceRegistrationRequestMutation';
    /** Create an Apple Device registration request */
    createAppleDeviceRegistrationRequest: AppleDeviceRegistrationRequest;
};
export declare type AppleDeviceRegistrationRequestMutationCreateAppleDeviceRegistrationRequestArgs = {
    accountId: Scalars['ID'];
    appleTeamId: Scalars['ID'];
};
export declare type AppleDeviceRegistrationRequestQuery = {
    __typename?: 'AppleDeviceRegistrationRequestQuery';
    byId: AppleDeviceRegistrationRequest;
};
export declare type AppleDeviceRegistrationRequestQueryByIdArgs = {
    id: Scalars['ID'];
};
export declare type AppleDistributionCertificate = {
    __typename?: 'AppleDistributionCertificate';
    account: Account;
    appleTeam?: Maybe<AppleTeam>;
    certificateP12?: Maybe<Scalars['String']>;
    certificatePassword?: Maybe<Scalars['String']>;
    certificatePrivateSigningKey?: Maybe<Scalars['String']>;
    createdAt: Scalars['DateTime'];
    developerPortalIdentifier?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    iosAppBuildCredentialsList: Array<IosAppBuildCredentials>;
    serialNumber: Scalars['String'];
    updatedAt: Scalars['DateTime'];
    validityNotAfter: Scalars['DateTime'];
    validityNotBefore: Scalars['DateTime'];
};
export declare type AppleDistributionCertificateInput = {
    appleTeamId?: InputMaybe<Scalars['ID']>;
    certP12: Scalars['String'];
    certPassword: Scalars['String'];
    certPrivateSigningKey?: InputMaybe<Scalars['String']>;
    developerPortalIdentifier?: InputMaybe<Scalars['String']>;
};
export declare type AppleDistributionCertificateMutation = {
    __typename?: 'AppleDistributionCertificateMutation';
    /** Create a Distribution Certificate */
    createAppleDistributionCertificate?: Maybe<AppleDistributionCertificate>;
    /** Delete a Distribution Certificate */
    deleteAppleDistributionCertificate: DeleteAppleDistributionCertificateResult;
};
export declare type AppleDistributionCertificateMutationCreateAppleDistributionCertificateArgs = {
    accountId: Scalars['ID'];
    appleDistributionCertificateInput: AppleDistributionCertificateInput;
};
export declare type AppleDistributionCertificateMutationDeleteAppleDistributionCertificateArgs = {
    id: Scalars['ID'];
};
export declare type AppleProvisioningProfile = {
    __typename?: 'AppleProvisioningProfile';
    account: Account;
    appleAppIdentifier: AppleAppIdentifier;
    appleDevices: Array<AppleDevice>;
    appleTeam?: Maybe<AppleTeam>;
    appleUUID: Scalars['String'];
    createdAt: Scalars['DateTime'];
    developerPortalIdentifier?: Maybe<Scalars['String']>;
    expiration: Scalars['DateTime'];
    id: Scalars['ID'];
    provisioningProfile?: Maybe<Scalars['String']>;
    status: Scalars['String'];
    updatedAt: Scalars['DateTime'];
};
export declare type AppleProvisioningProfileInput = {
    appleProvisioningProfile: Scalars['String'];
    developerPortalIdentifier?: InputMaybe<Scalars['String']>;
};
export declare type AppleProvisioningProfileMutation = {
    __typename?: 'AppleProvisioningProfileMutation';
    /** Create a Provisioning Profile */
    createAppleProvisioningProfile: AppleProvisioningProfile;
    /** Delete a Provisioning Profile */
    deleteAppleProvisioningProfile: DeleteAppleProvisioningProfileResult;
    /** Delete Provisioning Profiles */
    deleteAppleProvisioningProfiles: Array<DeleteAppleProvisioningProfileResult>;
    /** Update a Provisioning Profile */
    updateAppleProvisioningProfile: AppleProvisioningProfile;
};
export declare type AppleProvisioningProfileMutationCreateAppleProvisioningProfileArgs = {
    accountId: Scalars['ID'];
    appleAppIdentifierId: Scalars['ID'];
    appleProvisioningProfileInput: AppleProvisioningProfileInput;
};
export declare type AppleProvisioningProfileMutationDeleteAppleProvisioningProfileArgs = {
    id: Scalars['ID'];
};
export declare type AppleProvisioningProfileMutationDeleteAppleProvisioningProfilesArgs = {
    ids: Array<Scalars['ID']>;
};
export declare type AppleProvisioningProfileMutationUpdateAppleProvisioningProfileArgs = {
    appleProvisioningProfileInput: AppleProvisioningProfileInput;
    id: Scalars['ID'];
};
export declare type ApplePushKey = {
    __typename?: 'ApplePushKey';
    account: Account;
    appleTeam?: Maybe<AppleTeam>;
    createdAt: Scalars['DateTime'];
    id: Scalars['ID'];
    iosAppCredentialsList: Array<IosAppCredentials>;
    keyIdentifier: Scalars['String'];
    keyP8: Scalars['String'];
    updatedAt: Scalars['DateTime'];
};
export declare type ApplePushKeyInput = {
    appleTeamId?: InputMaybe<Scalars['ID']>;
    keyIdentifier: Scalars['String'];
    keyP8: Scalars['String'];
};
export declare type ApplePushKeyMutation = {
    __typename?: 'ApplePushKeyMutation';
    /** Create an Apple Push Notification key */
    createApplePushKey: ApplePushKey;
    /** Delete an Apple Push Notification key */
    deleteApplePushKey: DeleteApplePushKeyResult;
};
export declare type ApplePushKeyMutationCreateApplePushKeyArgs = {
    accountId: Scalars['ID'];
    applePushKeyInput: ApplePushKeyInput;
};
export declare type ApplePushKeyMutationDeleteApplePushKeyArgs = {
    id: Scalars['ID'];
};
export declare type AppleTeam = {
    __typename?: 'AppleTeam';
    account: Account;
    appleAppIdentifiers: Array<AppleAppIdentifier>;
    appleDevices: Array<AppleDevice>;
    appleDistributionCertificates: Array<AppleDistributionCertificate>;
    appleProvisioningProfiles: Array<AppleProvisioningProfile>;
    applePushKeys: Array<ApplePushKey>;
    appleTeamIdentifier: Scalars['String'];
    appleTeamName?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
};
export declare type AppleTeamAppleAppIdentifiersArgs = {
    bundleIdentifier?: InputMaybe<Scalars['String']>;
};
export declare type AppleTeamAppleProvisioningProfilesArgs = {
    appleAppIdentifierId?: InputMaybe<Scalars['ID']>;
};
export declare type AppleTeamInput = {
    appleTeamIdentifier: Scalars['String'];
    appleTeamName?: InputMaybe<Scalars['String']>;
};
export declare type AppleTeamMutation = {
    __typename?: 'AppleTeamMutation';
    /** Create an Apple Team */
    createAppleTeam: AppleTeam;
};
export declare type AppleTeamMutationCreateAppleTeamArgs = {
    accountId: Scalars['ID'];
    appleTeamInput: AppleTeamInput;
};
export declare type AppleTeamQuery = {
    __typename?: 'AppleTeamQuery';
    byAppleTeamIdentifier?: Maybe<AppleTeam>;
};
export declare type AppleTeamQueryByAppleTeamIdentifierArgs = {
    accountId: Scalars['ID'];
    identifier: Scalars['String'];
};
export declare enum AppsFilter {
    /** Featured Projects */
    Featured = "FEATURED",
    /** New Projects */
    New = "NEW"
}
export declare type AscApiKeyInput = {
    issuerIdentifier: Scalars['String'];
    keyIdentifier: Scalars['String'];
    keyP8: Scalars['String'];
};
export declare type AssetMetadataResult = {
    __typename?: 'AssetMetadataResult';
    status: AssetMetadataStatus;
    storageKey: Scalars['String'];
};
export declare enum AssetMetadataStatus {
    DoesNotExist = "DOES_NOT_EXIST",
    Exists = "EXISTS"
}
export declare type AssetMutation = {
    __typename?: 'AssetMutation';
    /**
     * Returns an array of specifications for upload. Each URL is valid for an hour.
     * The content type of the asset you wish to upload must be specified.
     */
    getSignedAssetUploadSpecifications: GetSignedAssetUploadSpecificationsResult;
};
export declare type AssetMutationGetSignedAssetUploadSpecificationsArgs = {
    assetContentTypes: Array<InputMaybe<Scalars['String']>>;
};
/** Check to see if assets with given storageKeys exist */
export declare type AssetQuery = {
    __typename?: 'AssetQuery';
    metadata: Array<AssetMetadataResult>;
};
/** Check to see if assets with given storageKeys exist */
export declare type AssetQueryMetadataArgs = {
    storageKeys: Array<Scalars['String']>;
};
export declare type Billing = {
    __typename?: 'Billing';
    /** History of invoices */
    charges?: Maybe<Array<Maybe<Charge>>>;
    id: Scalars['ID'];
    payment?: Maybe<PaymentDetails>;
    subscription?: Maybe<SubscriptionDetails>;
};
/** Represents an EAS Build */
export declare type Build = ActivityTimelineProjectActivity & BuildOrBuildJob & {
    __typename?: 'Build';
    activityTimestamp: Scalars['DateTime'];
    actor?: Maybe<Actor>;
    appBuildVersion?: Maybe<Scalars['String']>;
    appVersion?: Maybe<Scalars['String']>;
    artifacts?: Maybe<BuildArtifacts>;
    buildProfile?: Maybe<Scalars['String']>;
    cancelingActor?: Maybe<Actor>;
    channel?: Maybe<Scalars['String']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    distribution?: Maybe<DistributionType>;
    error?: Maybe<BuildError>;
    expirationDate?: Maybe<Scalars['DateTime']>;
    gitCommitHash?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    initiatingActor?: Maybe<Actor>;
    /** @deprecated User type is deprecated */
    initiatingUser?: Maybe<User>;
    iosEnterpriseProvisioning?: Maybe<BuildIosEnterpriseProvisioning>;
    isGitWorkingTreeDirty?: Maybe<Scalars['Boolean']>;
    logFiles: Array<Scalars['String']>;
    metrics?: Maybe<BuildMetrics>;
    platform: AppPlatform;
    priority: BuildPriority;
    project: Project;
    /** Queue position is 1-indexed */
    queuePosition?: Maybe<Scalars['Int']>;
    reactNativeVersion?: Maybe<Scalars['String']>;
    releaseChannel?: Maybe<Scalars['String']>;
    runtimeVersion?: Maybe<Scalars['String']>;
    sdkVersion?: Maybe<Scalars['String']>;
    status: BuildStatus;
    submissions: Array<Submission>;
    updatedAt?: Maybe<Scalars['DateTime']>;
};
export declare type BuildArtifact = {
    __typename?: 'BuildArtifact';
    manifestPlistUrl?: Maybe<Scalars['String']>;
    url: Scalars['String'];
};
export declare type BuildArtifacts = {
    __typename?: 'BuildArtifacts';
    buildUrl?: Maybe<Scalars['String']>;
    xcodeBuildLogsUrl?: Maybe<Scalars['String']>;
};
export declare type BuildCacheInput = {
    cacheDefaultPaths?: InputMaybe<Scalars['Boolean']>;
    clear?: InputMaybe<Scalars['Boolean']>;
    customPaths?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
    disabled?: InputMaybe<Scalars['Boolean']>;
    key?: InputMaybe<Scalars['String']>;
};
export declare enum BuildCredentialsSource {
    Local = "LOCAL",
    Remote = "REMOTE"
}
export declare type BuildError = {
    __typename?: 'BuildError';
    docsUrl?: Maybe<Scalars['String']>;
    errorCode: Scalars['String'];
    message: Scalars['String'];
};
export declare type BuildFilter = {
    appBuildVersion?: InputMaybe<Scalars['String']>;
    appIdentifier?: InputMaybe<Scalars['String']>;
    appVersion?: InputMaybe<Scalars['String']>;
    buildProfile?: InputMaybe<Scalars['String']>;
    channel?: InputMaybe<Scalars['String']>;
    distribution?: InputMaybe<DistributionType>;
    gitCommitHash?: InputMaybe<Scalars['String']>;
    platform?: InputMaybe<AppPlatform>;
    runtimeVersion?: InputMaybe<Scalars['String']>;
    sdkVersion?: InputMaybe<Scalars['String']>;
    status?: InputMaybe<BuildStatus>;
};
export declare enum BuildIosEnterpriseProvisioning {
    Adhoc = "ADHOC",
    Universal = "UNIVERSAL"
}
/** Represents an Standalone App build job */
export declare type BuildJob = ActivityTimelineProjectActivity & BuildOrBuildJob & {
    __typename?: 'BuildJob';
    activityTimestamp: Scalars['DateTime'];
    actor?: Maybe<Actor>;
    app?: Maybe<App>;
    artifacts?: Maybe<BuildArtifact>;
    config?: Maybe<Scalars['JSON']>;
    created?: Maybe<Scalars['DateTime']>;
    expirationDate?: Maybe<Scalars['DateTime']>;
    fullExperienceName?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    logs?: Maybe<BuildLogs>;
    platform: AppPlatform;
    release?: Maybe<AppRelease>;
    releaseChannel?: Maybe<Scalars['String']>;
    sdkVersion?: Maybe<Scalars['String']>;
    status?: Maybe<BuildJobStatus>;
    updated?: Maybe<Scalars['DateTime']>;
    user?: Maybe<User>;
};
export declare enum BuildJobLogsFormat {
    Json = "JSON",
    Raw = "RAW"
}
export declare type BuildJobMutation = {
    __typename?: 'BuildJobMutation';
    cancel: BuildJob;
    del?: Maybe<BuildJob>;
    restart: BuildJob;
};
export declare type BuildJobQuery = {
    __typename?: 'BuildJobQuery';
    /**
     * get all build jobs by an optional filter
     * @deprecated Prefer Account.buildJobs or App.buildJobs
     */
    all: Array<Maybe<BuildJob>>;
    byId: BuildJob;
};
export declare type BuildJobQueryAllArgs = {
    experienceSlug?: InputMaybe<Scalars['String']>;
    limit?: InputMaybe<Scalars['Int']>;
    offset?: InputMaybe<Scalars['Int']>;
    showAdminView?: InputMaybe<Scalars['Boolean']>;
    status?: InputMaybe<BuildJobStatus>;
    username?: InputMaybe<Scalars['String']>;
};
export declare type BuildJobQueryByIdArgs = {
    buildId: Scalars['ID'];
};
export declare enum BuildJobStatus {
    Errored = "ERRORED",
    Finished = "FINISHED",
    InProgress = "IN_PROGRESS",
    Pending = "PENDING",
    SentToQueue = "SENT_TO_QUEUE",
    Started = "STARTED"
}
export declare type BuildLogs = {
    __typename?: 'BuildLogs';
    format?: Maybe<BuildJobLogsFormat>;
    url?: Maybe<Scalars['String']>;
};
export declare type BuildMetadataInput = {
    appBuildVersion?: InputMaybe<Scalars['String']>;
    appIdentifier?: InputMaybe<Scalars['String']>;
    appName?: InputMaybe<Scalars['String']>;
    appVersion?: InputMaybe<Scalars['String']>;
    buildProfile?: InputMaybe<Scalars['String']>;
    channel?: InputMaybe<Scalars['String']>;
    cliVersion?: InputMaybe<Scalars['String']>;
    credentialsSource?: InputMaybe<BuildCredentialsSource>;
    distribution?: InputMaybe<DistributionType>;
    gitCommitHash?: InputMaybe<Scalars['String']>;
    iosEnterpriseProvisioning?: InputMaybe<BuildIosEnterpriseProvisioning>;
    isGitWorkingTreeDirty?: InputMaybe<Scalars['Boolean']>;
    reactNativeVersion?: InputMaybe<Scalars['String']>;
    releaseChannel?: InputMaybe<Scalars['String']>;
    runtimeVersion?: InputMaybe<Scalars['String']>;
    sdkVersion?: InputMaybe<Scalars['String']>;
    trackingContext?: InputMaybe<Scalars['JSONObject']>;
    username?: InputMaybe<Scalars['String']>;
    workflow?: InputMaybe<BuildWorkflow>;
};
export declare type BuildMetrics = {
    __typename?: 'BuildMetrics';
    buildDuration?: Maybe<Scalars['Int']>;
    buildQueueTime?: Maybe<Scalars['Int']>;
    buildWaitTime?: Maybe<Scalars['Int']>;
};
export declare type BuildMutation = {
    __typename?: 'BuildMutation';
    /**
     * Cancel an EAS Build build
     * @deprecated Use cancelBuild instead
     */
    cancel: Build;
    /** Cancel an EAS Build build */
    cancelBuild: Build;
    /** Create an Android build */
    createAndroidBuild: CreateBuildResult;
    /** Create an iOS build */
    createIosBuild: CreateBuildResult;
    /** Delete an EAS Build build */
    deleteBuild: Build;
};
export declare type BuildMutationCancelBuildArgs = {
    buildId: Scalars['ID'];
};
export declare type BuildMutationCreateAndroidBuildArgs = {
    appId: Scalars['ID'];
    job: AndroidJobInput;
    metadata?: InputMaybe<BuildMetadataInput>;
};
export declare type BuildMutationCreateIosBuildArgs = {
    appId: Scalars['ID'];
    job: IosJobInput;
    metadata?: InputMaybe<BuildMetadataInput>;
};
export declare type BuildMutationDeleteBuildArgs = {
    buildId: Scalars['ID'];
};
export declare type BuildOrBuildJob = {
    id: Scalars['ID'];
};
export declare enum BuildPriority {
    High = "HIGH",
    Normal = "NORMAL"
}
/** Publicly visible data for a Build. */
export declare type BuildPublicData = {
    __typename?: 'BuildPublicData';
    artifacts: PublicArtifacts;
    distribution?: Maybe<DistributionType>;
    id: Scalars['ID'];
    platform: AppPlatform;
    project: ProjectPublicData;
    status: BuildStatus;
};
export declare type BuildPublicDataQuery = {
    __typename?: 'BuildPublicDataQuery';
    /** Get BuildPublicData by ID */
    byId?: Maybe<BuildPublicData>;
};
export declare type BuildPublicDataQueryByIdArgs = {
    id: Scalars['ID'];
};
export declare type BuildQuery = {
    __typename?: 'BuildQuery';
    /**
     * Get all builds.
     * By default, they are sorted from latest to oldest.
     * Available only for admin users.
     */
    all: Array<Build>;
    /**
     * Get all builds for a specific app.
     * They are sorted from latest to oldest.
     * @deprecated Use App.builds instead
     */
    allForApp: Array<Maybe<Build>>;
    /** Look up EAS Build by build ID */
    byId: Build;
};
export declare type BuildQueryAllArgs = {
    limit?: InputMaybe<Scalars['Int']>;
    offset?: InputMaybe<Scalars['Int']>;
    order?: InputMaybe<Order>;
    statuses?: InputMaybe<Array<BuildStatus>>;
};
export declare type BuildQueryAllForAppArgs = {
    appId: Scalars['String'];
    limit?: InputMaybe<Scalars['Int']>;
    offset?: InputMaybe<Scalars['Int']>;
    platform?: InputMaybe<AppPlatform>;
    status?: InputMaybe<BuildStatus>;
};
export declare type BuildQueryByIdArgs = {
    buildId: Scalars['ID'];
};
export declare enum BuildStatus {
    Canceled = "CANCELED",
    Errored = "ERRORED",
    Finished = "FINISHED",
    InProgress = "IN_PROGRESS",
    InQueue = "IN_QUEUE",
    New = "NEW"
}
export declare type BuildUpdatesInput = {
    channel?: InputMaybe<Scalars['String']>;
};
export declare enum BuildWorkflow {
    Generic = "GENERIC",
    Managed = "MANAGED"
}
export declare enum CacheControlScope {
    Private = "PRIVATE",
    Public = "PUBLIC"
}
export declare type Card = {
    __typename?: 'Card';
    brand?: Maybe<Scalars['String']>;
    cardHolder?: Maybe<Scalars['String']>;
    expMonth?: Maybe<Scalars['Int']>;
    expYear?: Maybe<Scalars['Int']>;
    last4?: Maybe<Scalars['String']>;
};
export declare type Charge = {
    __typename?: 'Charge';
    amount?: Maybe<Scalars['Int']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    id: Scalars['ID'];
    invoiceId?: Maybe<Scalars['String']>;
    paid?: Maybe<Scalars['Boolean']>;
    receiptUrl?: Maybe<Scalars['String']>;
    wasRefunded?: Maybe<Scalars['Boolean']>;
};
/** Represents a client build request */
export declare type ClientBuild = {
    __typename?: 'ClientBuild';
    buildJobId?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    manifestPlistUrl?: Maybe<Scalars['String']>;
    status?: Maybe<Scalars['String']>;
    userFacingErrorMessage?: Maybe<Scalars['String']>;
    userId?: Maybe<Scalars['String']>;
};
export declare type ClientBuildQuery = {
    __typename?: 'ClientBuildQuery';
    byId: ClientBuild;
};
export declare type ClientBuildQueryByIdArgs = {
    requestId: Scalars['ID'];
};
export declare type CodeSigningInfo = {
    __typename?: 'CodeSigningInfo';
    alg: Scalars['String'];
    keyid: Scalars['String'];
    sig: Scalars['String'];
};
export declare type CodeSigningInfoInput = {
    alg: Scalars['String'];
    keyid: Scalars['String'];
    sig: Scalars['String'];
};
export declare type CreateAccessTokenInput = {
    actorID: Scalars['ID'];
    note?: InputMaybe<Scalars['String']>;
};
export declare type CreateAccessTokenResponse = {
    __typename?: 'CreateAccessTokenResponse';
    /** AccessToken created */
    accessToken: AccessToken;
    /** Full token string to be used for authentication */
    token: Scalars['String'];
};
export declare type CreateAndroidSubmissionInput = {
    appId: Scalars['ID'];
    config: AndroidSubmissionConfigInput;
    submittedBuildId?: InputMaybe<Scalars['ID']>;
};
export declare type CreateBuildResult = {
    __typename?: 'CreateBuildResult';
    build: Build;
    deprecationInfo?: Maybe<EasBuildDeprecationInfo>;
};
export declare type CreateEnvironmentSecretInput = {
    name: Scalars['String'];
    value: Scalars['String'];
};
export declare type CreateIosSubmissionInput = {
    appId: Scalars['ID'];
    config: IosSubmissionConfigInput;
    submittedBuildId?: InputMaybe<Scalars['ID']>;
};
export declare type CreateSubmissionInput = {
    appId: Scalars['ID'];
    config: Scalars['JSONObject'];
    platform: AppPlatform;
    submittedBuildId?: InputMaybe<Scalars['ID']>;
};
export declare type CreateSubmissionResult = {
    __typename?: 'CreateSubmissionResult';
    /** Created submission */
    submission: Submission;
};
export declare type DeleteAccessTokenResult = {
    __typename?: 'DeleteAccessTokenResult';
    id: Scalars['ID'];
};
export declare type DeleteAccountResult = {
    __typename?: 'DeleteAccountResult';
    id: Scalars['ID'];
};
export declare type DeleteAndroidKeystoreResult = {
    __typename?: 'DeleteAndroidKeystoreResult';
    id: Scalars['ID'];
};
export declare type DeleteAppleDeviceResult = {
    __typename?: 'DeleteAppleDeviceResult';
    id: Scalars['ID'];
};
export declare type DeleteAppleDistributionCertificateResult = {
    __typename?: 'DeleteAppleDistributionCertificateResult';
    id: Scalars['ID'];
};
export declare type DeleteAppleProvisioningProfileResult = {
    __typename?: 'DeleteAppleProvisioningProfileResult';
    id: Scalars['ID'];
};
export declare type DeleteEnvironmentSecretResult = {
    __typename?: 'DeleteEnvironmentSecretResult';
    id: Scalars['ID'];
};
export declare type DeleteGoogleServiceAccountKeyResult = {
    __typename?: 'DeleteGoogleServiceAccountKeyResult';
    id: Scalars['ID'];
};
export declare type DeleteRobotResult = {
    __typename?: 'DeleteRobotResult';
    id: Scalars['ID'];
};
export declare type DeleteUpdateBranchResult = {
    __typename?: 'DeleteUpdateBranchResult';
    id: Scalars['ID'];
};
export declare type DeleteUpdateChannelResult = {
    __typename?: 'DeleteUpdateChannelResult';
    id: Scalars['ID'];
};
export declare type DeleteUpdateGroupResult = {
    __typename?: 'DeleteUpdateGroupResult';
    group: Scalars['ID'];
};
export declare type DeleteWebhookResult = {
    __typename?: 'DeleteWebhookResult';
    id: Scalars['ID'];
};
/** Represents a Deployment - a set of Builds with the same Runtime Version and Channel */
export declare type Deployment = {
    __typename?: 'Deployment';
    channel?: Maybe<UpdateChannel>;
    /**
     * The name of this deployment's associated channel. It is specified separately from the `channel`
     * field to allow specifying a deployment before an EAS Update channel has been created.
     */
    channelName: Scalars['String'];
    id: Scalars['ID'];
    mostRecentlyUpdatedAt: Scalars['DateTime'];
    recentBuilds: Array<Build>;
    runtimeVersion: Scalars['String'];
};
export declare type DeploymentOptions = {
    /** Max number of associated builds to return */
    buildListMaxSize?: InputMaybe<Scalars['Int']>;
};
export declare enum DistributionType {
    Internal = "INTERNAL",
    Simulator = "SIMULATOR",
    Store = "STORE"
}
export declare type EasBuildDeprecationInfo = {
    __typename?: 'EASBuildDeprecationInfo';
    message: Scalars['String'];
    type: EasBuildDeprecationInfoType;
};
export declare enum EasBuildDeprecationInfoType {
    Internal = "INTERNAL",
    UserFacing = "USER_FACING"
}
export declare type EditUpdateBranchInput = {
    appId?: InputMaybe<Scalars['ID']>;
    id?: InputMaybe<Scalars['ID']>;
    name?: InputMaybe<Scalars['String']>;
    newName: Scalars['String'];
};
export declare type EmailSubscriptionMutation = {
    __typename?: 'EmailSubscriptionMutation';
    addUser: AddUserPayload;
};
export declare type EmailSubscriptionMutationAddUserArgs = {
    addUserInput: AddUserInput;
};
export declare type EnvironmentSecret = {
    __typename?: 'EnvironmentSecret';
    createdAt: Scalars['DateTime'];
    id: Scalars['ID'];
    name: Scalars['String'];
    updatedAt: Scalars['DateTime'];
};
export declare type EnvironmentSecretMutation = {
    __typename?: 'EnvironmentSecretMutation';
    /** Create an environment secret for an Account */
    createEnvironmentSecretForAccount: EnvironmentSecret;
    /** Create an environment secret for an App */
    createEnvironmentSecretForApp: EnvironmentSecret;
    /** Delete an environment secret */
    deleteEnvironmentSecret: DeleteEnvironmentSecretResult;
};
export declare type EnvironmentSecretMutationCreateEnvironmentSecretForAccountArgs = {
    accountId: Scalars['String'];
    environmentSecretData: CreateEnvironmentSecretInput;
};
export declare type EnvironmentSecretMutationCreateEnvironmentSecretForAppArgs = {
    appId: Scalars['String'];
    environmentSecretData: CreateEnvironmentSecretInput;
};
export declare type EnvironmentSecretMutationDeleteEnvironmentSecretArgs = {
    id: Scalars['String'];
};
export declare type ExperimentationQuery = {
    __typename?: 'ExperimentationQuery';
    /** Get device experimentation config */
    deviceConfig: Scalars['JSONObject'];
    /** Get experimentation unit to use for device experiments. In this case, it is the IP address. */
    deviceExperimentationUnit: Scalars['ID'];
    /** Get user experimentation config */
    userConfig: Scalars['JSONObject'];
};
export declare type FcmSnippet = FcmSnippetLegacy | FcmSnippetV1;
export declare type FcmSnippetLegacy = {
    __typename?: 'FcmSnippetLegacy';
    firstFourCharacters: Scalars['String'];
    lastFourCharacters: Scalars['String'];
};
export declare type FcmSnippetV1 = {
    __typename?: 'FcmSnippetV1';
    clientId?: Maybe<Scalars['String']>;
    keyId: Scalars['String'];
    projectId: Scalars['String'];
    serviceAccountEmail: Scalars['String'];
};
export declare enum Feature {
    /** Priority Builds */
    Builds = "BUILDS",
    /** Funds support for open source development */
    OpenSource = "OPEN_SOURCE",
    /** Top Tier Support */
    Support = "SUPPORT",
    /** Share access to projects */
    Teams = "TEAMS"
}
export declare type GetSignedAssetUploadSpecificationsResult = {
    __typename?: 'GetSignedAssetUploadSpecificationsResult';
    specifications: Array<Scalars['String']>;
};
export declare type GoogleServiceAccountKey = {
    __typename?: 'GoogleServiceAccountKey';
    account: Account;
    clientEmail: Scalars['String'];
    clientIdentifier: Scalars['String'];
    createdAt: Scalars['DateTime'];
    id: Scalars['ID'];
    privateKeyIdentifier: Scalars['String'];
    projectIdentifier: Scalars['String'];
    updatedAt: Scalars['DateTime'];
};
export declare type GoogleServiceAccountKeyInput = {
    jsonKey: Scalars['JSONObject'];
};
export declare type GoogleServiceAccountKeyMutation = {
    __typename?: 'GoogleServiceAccountKeyMutation';
    /** Create a Google Service Account Key */
    createGoogleServiceAccountKey: GoogleServiceAccountKey;
    /** Delete a Google Service Account Key */
    deleteGoogleServiceAccountKey: DeleteGoogleServiceAccountKeyResult;
};
export declare type GoogleServiceAccountKeyMutationCreateGoogleServiceAccountKeyArgs = {
    accountId: Scalars['ID'];
    googleServiceAccountKeyInput: GoogleServiceAccountKeyInput;
};
export declare type GoogleServiceAccountKeyMutationDeleteGoogleServiceAccountKeyArgs = {
    id: Scalars['ID'];
};
export declare type Invoice = {
    __typename?: 'Invoice';
    /** The total amount due for the invoice, in cents */
    amountDue: Scalars['Int'];
    /** The total amount that has been paid, considering any discounts or account credit. Value is in cents. */
    amountPaid: Scalars['Int'];
    /** The total amount that needs to be paid, considering any discounts or account credit. Value is in cents. */
    amountRemaining: Scalars['Int'];
    discount?: Maybe<InvoiceDiscount>;
    id: Scalars['ID'];
    lineItems: Array<InvoiceLineItem>;
    period: InvoicePeriod;
    startingBalance: Scalars['Int'];
    subtotal: Scalars['Int'];
    total: Scalars['Int'];
    totalDiscountedAmount: Scalars['Int'];
};
export declare type InvoiceDiscount = {
    __typename?: 'InvoiceDiscount';
    /** The coupon's discount value, in percentage or in dollar amount */
    amount: Scalars['Int'];
    duration: Scalars['String'];
    durationInMonths?: Maybe<Scalars['Int']>;
    id: Scalars['ID'];
    name: Scalars['String'];
    type: InvoiceDiscountType;
};
export declare enum InvoiceDiscountType {
    Amount = "AMOUNT",
    Percentage = "PERCENTAGE"
}
export declare type InvoiceLineItem = {
    __typename?: 'InvoiceLineItem';
    /** Line-item amount in cents */
    amount: Scalars['Int'];
    description: Scalars['String'];
    id: Scalars['ID'];
    period: InvoicePeriod;
    plan: InvoiceLineItemPlan;
    proration: Scalars['Boolean'];
    quantity: Scalars['Int'];
    title: Scalars['String'];
};
export declare type InvoiceLineItemPlan = {
    __typename?: 'InvoiceLineItemPlan';
    id: Scalars['ID'];
    name: Scalars['String'];
};
export declare type InvoicePeriod = {
    __typename?: 'InvoicePeriod';
    end: Scalars['DateTime'];
    start: Scalars['DateTime'];
};
export declare type InvoiceQuery = {
    __typename?: 'InvoiceQuery';
    /** Preview an upgrade subscription invoice, with proration */
    previewInvoiceForSubscriptionUpdate: Invoice;
};
export declare type InvoiceQueryPreviewInvoiceForSubscriptionUpdateArgs = {
    accountId: Scalars['String'];
    couponCode?: InputMaybe<Scalars['String']>;
    newPlanIdentifier: Scalars['String'];
};
export declare type IosAppBuildCredentials = {
    __typename?: 'IosAppBuildCredentials';
    /** @deprecated Get Apple Devices from AppleProvisioningProfile instead */
    appleDevices?: Maybe<Array<Maybe<AppleDevice>>>;
    distributionCertificate?: Maybe<AppleDistributionCertificate>;
    id: Scalars['ID'];
    iosAppCredentials: IosAppCredentials;
    iosDistributionType: IosDistributionType;
    provisioningProfile?: Maybe<AppleProvisioningProfile>;
};
export declare type IosAppBuildCredentialsFilter = {
    iosDistributionType?: InputMaybe<IosDistributionType>;
};
export declare type IosAppBuildCredentialsInput = {
    distributionCertificateId: Scalars['ID'];
    iosDistributionType: IosDistributionType;
    provisioningProfileId: Scalars['ID'];
};
export declare type IosAppBuildCredentialsMutation = {
    __typename?: 'IosAppBuildCredentialsMutation';
    /** Create a set of build credentials for an iOS app */
    createIosAppBuildCredentials: IosAppBuildCredentials;
    /** Set the distribution certificate to be used for an iOS app */
    setDistributionCertificate: IosAppBuildCredentials;
    /** Set the provisioning profile to be used for an iOS app */
    setProvisioningProfile: IosAppBuildCredentials;
};
export declare type IosAppBuildCredentialsMutationCreateIosAppBuildCredentialsArgs = {
    iosAppBuildCredentialsInput: IosAppBuildCredentialsInput;
    iosAppCredentialsId: Scalars['ID'];
};
export declare type IosAppBuildCredentialsMutationSetDistributionCertificateArgs = {
    distributionCertificateId: Scalars['ID'];
    id: Scalars['ID'];
};
export declare type IosAppBuildCredentialsMutationSetProvisioningProfileArgs = {
    id: Scalars['ID'];
    provisioningProfileId: Scalars['ID'];
};
export declare type IosAppCredentials = {
    __typename?: 'IosAppCredentials';
    app: App;
    appStoreConnectApiKeyForSubmissions?: Maybe<AppStoreConnectApiKey>;
    appleAppIdentifier: AppleAppIdentifier;
    appleTeam?: Maybe<AppleTeam>;
    id: Scalars['ID'];
    /** @deprecated use iosAppBuildCredentialsList instead */
    iosAppBuildCredentialsArray: Array<IosAppBuildCredentials>;
    iosAppBuildCredentialsList: Array<IosAppBuildCredentials>;
    pushKey?: Maybe<ApplePushKey>;
};
export declare type IosAppCredentialsIosAppBuildCredentialsArrayArgs = {
    filter?: InputMaybe<IosAppBuildCredentialsFilter>;
};
export declare type IosAppCredentialsIosAppBuildCredentialsListArgs = {
    filter?: InputMaybe<IosAppBuildCredentialsFilter>;
};
export declare type IosAppCredentialsFilter = {
    appleAppIdentifierId?: InputMaybe<Scalars['String']>;
};
export declare type IosAppCredentialsInput = {
    appStoreConnectApiKeyForSubmissionsId?: InputMaybe<Scalars['ID']>;
    appleTeamId?: InputMaybe<Scalars['ID']>;
    pushKeyId?: InputMaybe<Scalars['ID']>;
};
export declare type IosAppCredentialsMutation = {
    __typename?: 'IosAppCredentialsMutation';
    /** Create a set of credentials for an iOS app */
    createIosAppCredentials: IosAppCredentials;
    /** Set the App Store Connect Api Key to be used for submitting an iOS app */
    setAppStoreConnectApiKeyForSubmissions: IosAppCredentials;
    /** Set the push key to be used in an iOS app */
    setPushKey: IosAppCredentials;
};
export declare type IosAppCredentialsMutationCreateIosAppCredentialsArgs = {
    appId: Scalars['ID'];
    appleAppIdentifierId: Scalars['ID'];
    iosAppCredentialsInput: IosAppCredentialsInput;
};
export declare type IosAppCredentialsMutationSetAppStoreConnectApiKeyForSubmissionsArgs = {
    ascApiKeyId: Scalars['ID'];
    id: Scalars['ID'];
};
export declare type IosAppCredentialsMutationSetPushKeyArgs = {
    id: Scalars['ID'];
    pushKeyId: Scalars['ID'];
};
/** @deprecated Use developmentClient option instead. */
export declare enum IosBuildType {
    DevelopmentClient = "DEVELOPMENT_CLIENT",
    Release = "RELEASE"
}
export declare type IosBuilderEnvironmentInput = {
    bundler?: InputMaybe<Scalars['String']>;
    cocoapods?: InputMaybe<Scalars['String']>;
    env?: InputMaybe<Scalars['JSONObject']>;
    expoCli?: InputMaybe<Scalars['String']>;
    fastlane?: InputMaybe<Scalars['String']>;
    image?: InputMaybe<Scalars['String']>;
    node?: InputMaybe<Scalars['String']>;
    yarn?: InputMaybe<Scalars['String']>;
};
export declare enum IosDistributionType {
    AdHoc = "AD_HOC",
    AppStore = "APP_STORE",
    Development = "DEVELOPMENT",
    Enterprise = "ENTERPRISE"
}
export declare type IosJobDistributionCertificateInput = {
    dataBase64: Scalars['String'];
    password: Scalars['String'];
};
export declare type IosJobInput = {
    artifactPath?: InputMaybe<Scalars['String']>;
    buildConfiguration?: InputMaybe<Scalars['String']>;
    /** @deprecated */
    buildType?: InputMaybe<IosBuildType>;
    builderEnvironment?: InputMaybe<IosBuilderEnvironmentInput>;
    cache?: InputMaybe<BuildCacheInput>;
    developmentClient?: InputMaybe<Scalars['Boolean']>;
    /** @deprecated */
    distribution?: InputMaybe<DistributionType>;
    experimental?: InputMaybe<Scalars['JSONObject']>;
    projectArchive: ProjectArchiveSourceInput;
    projectRootDirectory: Scalars['String'];
    releaseChannel?: InputMaybe<Scalars['String']>;
    scheme?: InputMaybe<Scalars['String']>;
    secrets?: InputMaybe<IosJobSecretsInput>;
    simulator?: InputMaybe<Scalars['Boolean']>;
    type: BuildWorkflow;
    updates?: InputMaybe<BuildUpdatesInput>;
    username?: InputMaybe<Scalars['String']>;
};
export declare type IosJobSecretsInput = {
    buildCredentials?: InputMaybe<Array<InputMaybe<IosJobTargetCredentialsInput>>>;
    environmentSecrets?: InputMaybe<Scalars['JSONObject']>;
};
export declare type IosJobTargetCredentialsInput = {
    distributionCertificate: IosJobDistributionCertificateInput;
    provisioningProfileBase64: Scalars['String'];
    targetName: Scalars['String'];
};
/** @deprecated Use developmentClient option instead. */
export declare enum IosManagedBuildType {
    DevelopmentClient = "DEVELOPMENT_CLIENT",
    Release = "RELEASE"
}
export declare enum IosSchemeBuildConfiguration {
    Debug = "DEBUG",
    Release = "RELEASE"
}
export declare type IosSubmissionConfig = {
    __typename?: 'IosSubmissionConfig';
    appleIdUsername?: Maybe<Scalars['String']>;
    ascApiKeyId?: Maybe<Scalars['String']>;
    ascAppIdentifier: Scalars['String'];
};
export declare type IosSubmissionConfigInput = {
    appleAppSpecificPassword?: InputMaybe<Scalars['String']>;
    appleIdUsername?: InputMaybe<Scalars['String']>;
    archiveUrl?: InputMaybe<Scalars['String']>;
    ascApiKey?: InputMaybe<AscApiKeyInput>;
    ascApiKeyId?: InputMaybe<Scalars['String']>;
    ascAppIdentifier: Scalars['String'];
};
export declare type KeystoreGenerationUrl = {
    __typename?: 'KeystoreGenerationUrl';
    id: Scalars['ID'];
    url: Scalars['String'];
};
export declare type KeystoreGenerationUrlMutation = {
    __typename?: 'KeystoreGenerationUrlMutation';
    /** Create a Keystore Generation URL */
    createKeystoreGenerationUrl: KeystoreGenerationUrl;
};
export declare type LeaveAccountResult = {
    __typename?: 'LeaveAccountResult';
    success: Scalars['Boolean'];
};
export declare enum MailchimpAudience {
    ExpoDevelopers = "EXPO_DEVELOPERS"
}
export declare enum MailchimpTag {
    DevClientUsers = "DEV_CLIENT_USERS",
    EasMasterList = "EAS_MASTER_LIST"
}
export declare type MailchimpTagPayload = {
    __typename?: 'MailchimpTagPayload';
    id?: Maybe<Scalars['Int']>;
    name?: Maybe<Scalars['String']>;
};
export declare type MeMutation = {
    __typename?: 'MeMutation';
    /** Add an additional second factor device */
    addSecondFactorDevice: SecondFactorDeviceConfigurationResult;
    /** Certify an initiated second factor authentication method for the current user */
    certifySecondFactorDevice: SecondFactorBooleanResult;
    /** Create a new Account and grant this User the owner Role */
    createAccount: Account;
    /** Delete an Account created via createAccount */
    deleteAccount: DeleteAccountResult;
    /** Delete a second factor device */
    deleteSecondFactorDevice: SecondFactorBooleanResult;
    /** Delete a Snack that the current user owns */
    deleteSnack: Snack;
    /** Disable all second factor authentication for the current user */
    disableSecondFactorAuthentication: SecondFactorBooleanResult;
    /** Initiate setup of two-factor authentication for the current user */
    initiateSecondFactorAuthentication: SecondFactorInitiationResult;
    /** Leave an Account (revoke own permissions on Account) */
    leaveAccount: LeaveAccountResult;
    /** Purge unfinished two-factor authentication setup for the current user if not fully-set-up */
    purgeUnfinishedSecondFactorAuthentication: SecondFactorBooleanResult;
    /** Regenerate backup codes for the current user */
    regenerateSecondFactorBackupCodes: SecondFactorRegenerateBackupCodesResult;
    /** Send SMS OTP to a second factor device for use during device setup or during change confirmation */
    sendSMSOTPToSecondFactorDevice: SecondFactorBooleanResult;
    /** Set the user's primary second factor device */
    setPrimarySecondFactorDevice: SecondFactorBooleanResult;
    /** Transfer project to a different Account */
    transferApp: App;
    /** Unpublish an App that the current user owns */
    unpublishApp: App;
    /** Update an App that the current user owns */
    updateApp: App;
    /** Update the current user's data */
    updateProfile: User;
};
export declare type MeMutationAddSecondFactorDeviceArgs = {
    deviceConfiguration: SecondFactorDeviceConfiguration;
    otp: Scalars['String'];
};
export declare type MeMutationCertifySecondFactorDeviceArgs = {
    otp: Scalars['String'];
};
export declare type MeMutationCreateAccountArgs = {
    accountData: AccountDataInput;
};
export declare type MeMutationDeleteAccountArgs = {
    accountId: Scalars['ID'];
};
export declare type MeMutationDeleteSecondFactorDeviceArgs = {
    otp: Scalars['String'];
    userSecondFactorDeviceId: Scalars['ID'];
};
export declare type MeMutationDeleteSnackArgs = {
    snackId: Scalars['ID'];
};
export declare type MeMutationDisableSecondFactorAuthenticationArgs = {
    otp: Scalars['String'];
};
export declare type MeMutationInitiateSecondFactorAuthenticationArgs = {
    deviceConfigurations: Array<SecondFactorDeviceConfiguration>;
    recaptchaResponseToken?: InputMaybe<Scalars['String']>;
};
export declare type MeMutationLeaveAccountArgs = {
    accountId: Scalars['ID'];
};
export declare type MeMutationRegenerateSecondFactorBackupCodesArgs = {
    otp: Scalars['String'];
};
export declare type MeMutationSendSmsotpToSecondFactorDeviceArgs = {
    userSecondFactorDeviceId: Scalars['ID'];
};
export declare type MeMutationSetPrimarySecondFactorDeviceArgs = {
    userSecondFactorDeviceId: Scalars['ID'];
};
export declare type MeMutationTransferAppArgs = {
    appId: Scalars['ID'];
    destinationAccountId: Scalars['ID'];
};
export declare type MeMutationUnpublishAppArgs = {
    appId: Scalars['ID'];
};
export declare type MeMutationUpdateAppArgs = {
    appData: AppDataInput;
};
export declare type MeMutationUpdateProfileArgs = {
    userData: UserDataInput;
};
export declare type Offer = {
    __typename?: 'Offer';
    features?: Maybe<Array<Maybe<Feature>>>;
    id: Scalars['ID'];
    prerequisite?: Maybe<OfferPrerequisite>;
    price: Scalars['Int'];
    quantity?: Maybe<Scalars['Int']>;
    stripeId: Scalars['ID'];
    trialLength?: Maybe<Scalars['Int']>;
    type: OfferType;
};
export declare type OfferPrerequisite = {
    __typename?: 'OfferPrerequisite';
    stripeIds: Array<Scalars['String']>;
    type: Scalars['String'];
};
export declare enum OfferType {
    /** Addon, or supplementary subscription */
    Addon = "ADDON",
    /** Advanced Purchase of Paid Resource */
    Prepaid = "PREPAID",
    /** Term subscription */
    Subscription = "SUBSCRIPTION"
}
export declare enum Order {
    Asc = "ASC",
    Desc = "DESC"
}
export declare type PartialManifest = {
    assets: Array<InputMaybe<PartialManifestAsset>>;
    extra?: InputMaybe<Scalars['JSONObject']>;
    launchAsset: PartialManifestAsset;
};
export declare type PartialManifestAsset = {
    bundleKey: Scalars['String'];
    contentType: Scalars['String'];
    fileExtension?: InputMaybe<Scalars['String']>;
    fileSHA256: Scalars['String'];
    storageKey: Scalars['String'];
};
export declare type PaymentDetails = {
    __typename?: 'PaymentDetails';
    address?: Maybe<Address>;
    card?: Maybe<Card>;
    id: Scalars['ID'];
};
export declare enum Permission {
    Admin = "ADMIN",
    Own = "OWN",
    Publish = "PUBLISH",
    View = "VIEW"
}
export declare type Project = {
    description: Scalars['String'];
    fullName: Scalars['String'];
    /** @deprecated No longer supported */
    iconUrl?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    name: Scalars['String'];
    published: Scalars['Boolean'];
    slug: Scalars['String'];
    updated: Scalars['DateTime'];
    username: Scalars['String'];
};
export declare type ProjectArchiveSourceInput = {
    bucketKey?: InputMaybe<Scalars['String']>;
    type: ProjectArchiveSourceType;
    url?: InputMaybe<Scalars['String']>;
};
export declare enum ProjectArchiveSourceType {
    S3 = "S3",
    Url = "URL"
}
export declare type ProjectPublicData = {
    __typename?: 'ProjectPublicData';
    fullName: Scalars['String'];
    id: Scalars['ID'];
};
export declare type ProjectQuery = {
    __typename?: 'ProjectQuery';
    byAccountNameAndSlug: Project;
    /** @deprecated No longer supported */
    byPaths: Array<Maybe<Project>>;
    /** @deprecated See byAccountNameAndSlug */
    byUsernameAndSlug: Project;
};
export declare type ProjectQueryByAccountNameAndSlugArgs = {
    accountName: Scalars['String'];
    platform?: InputMaybe<AppPlatform>;
    sdkVersions?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
    slug: Scalars['String'];
};
export declare type ProjectQueryByPathsArgs = {
    paths?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};
export declare type ProjectQueryByUsernameAndSlugArgs = {
    platform?: InputMaybe<Scalars['String']>;
    sdkVersions?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
    slug: Scalars['String'];
    username: Scalars['String'];
};
export declare type PublicArtifacts = {
    __typename?: 'PublicArtifacts';
    buildUrl?: Maybe<Scalars['String']>;
};
export declare type PublishUpdateGroupInput = {
    awaitingCodeSigningInfo?: InputMaybe<Scalars['Boolean']>;
    branchId: Scalars['String'];
    message?: InputMaybe<Scalars['String']>;
    runtimeVersion: Scalars['String'];
    updateInfoGroup: UpdateInfoGroup;
};
export declare type RescindUserInvitationResult = {
    __typename?: 'RescindUserInvitationResult';
    id: Scalars['ID'];
};
/** Represents a robot (not human) actor. */
export declare type Robot = Actor & {
    __typename?: 'Robot';
    /** Access Tokens belonging to this actor */
    accessTokens: Array<AccessToken>;
    /** Associated accounts */
    accounts: Array<Account>;
    created: Scalars['DateTime'];
    displayName: Scalars['String'];
    /**
     * Server feature gate values for this actor, optionally filtering by desired gates.
     * Only resolves for the viewer.
     */
    featureGates: Scalars['JSONObject'];
    firstName?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    isExpoAdmin: Scalars['Boolean'];
};
/** Represents a robot (not human) actor. */
export declare type RobotFeatureGatesArgs = {
    filter?: InputMaybe<Array<Scalars['String']>>;
};
export declare type RobotDataInput = {
    name?: InputMaybe<Scalars['String']>;
};
export declare type RobotMutation = {
    __typename?: 'RobotMutation';
    /** Create a Robot and grant it Permissions on an Account */
    createRobotForAccount: Robot;
    /** Delete a Robot */
    deleteRobot: DeleteRobotResult;
    /** Update a Robot */
    updateRobot: Robot;
};
export declare type RobotMutationCreateRobotForAccountArgs = {
    accountID: Scalars['String'];
    permissions: Array<InputMaybe<Permission>>;
    robotData?: InputMaybe<RobotDataInput>;
};
export declare type RobotMutationDeleteRobotArgs = {
    id: Scalars['String'];
};
export declare type RobotMutationUpdateRobotArgs = {
    id: Scalars['String'];
    robotData: RobotDataInput;
};
export declare enum Role {
    Admin = "ADMIN",
    Custom = "CUSTOM",
    Developer = "DEVELOPER",
    HasAdmin = "HAS_ADMIN",
    NotAdmin = "NOT_ADMIN",
    Owner = "OWNER",
    ViewOnly = "VIEW_ONLY"
}
export declare type RootMutation = {
    __typename?: 'RootMutation';
    /**
     * This is a placeholder field
     * @deprecated Not used.
     */
    _doNotUse?: Maybe<Scalars['String']>;
    /** Mutations that create, read, update, and delete AccessTokens for Actors */
    accessToken: AccessTokenMutation;
    /** Mutations that modify an Account */
    account: AccountMutation;
    /** Mutations that modify the build credentials for an Android app */
    androidAppBuildCredentials: AndroidAppBuildCredentialsMutation;
    /** Mutations that modify the credentials for an Android app */
    androidAppCredentials: AndroidAppCredentialsMutation;
    /** Mutations that modify an FCM credential */
    androidFcm: AndroidFcmMutation;
    /** Mutations that modify a Keystore */
    androidKeystore: AndroidKeystoreMutation;
    /** Mutations that modify an App */
    app?: Maybe<AppMutation>;
    /** Mutations that modify an App Store Connect Api Key */
    appStoreConnectApiKey: AppStoreConnectApiKeyMutation;
    /** Mutations that modify an Identifier for an iOS App */
    appleAppIdentifier: AppleAppIdentifierMutation;
    /** Mutations that modify an Apple Device */
    appleDevice: AppleDeviceMutation;
    /** Mutations that modify an Apple Device registration request */
    appleDeviceRegistrationRequest: AppleDeviceRegistrationRequestMutation;
    /** Mutations that modify a Distribution Certificate */
    appleDistributionCertificate: AppleDistributionCertificateMutation;
    /** Mutations that modify a Provisioning Profile */
    appleProvisioningProfile: AppleProvisioningProfileMutation;
    /** Mutations that modify an Apple Push Notification key */
    applePushKey: ApplePushKeyMutation;
    /** Mutations that modify an Apple Team */
    appleTeam: AppleTeamMutation;
    asset: AssetMutation;
    /** Mutations that modify an EAS Build */
    build: BuildMutation;
    /** Mutations that modify an BuildJob */
    buildJob: BuildJobMutation;
    /** Mutations that modify an EmailSubscription */
    emailSubscription: EmailSubscriptionMutation;
    /** Mutations that create and delete EnvironmentSecrets */
    environmentSecret: EnvironmentSecretMutation;
    /** Mutations that modify a Google Service Account Key */
    googleServiceAccountKey: GoogleServiceAccountKeyMutation;
    /** Mutations that modify the build credentials for an iOS app */
    iosAppBuildCredentials: IosAppBuildCredentialsMutation;
    /** Mutations that modify the credentials for an iOS app */
    iosAppCredentials: IosAppCredentialsMutation;
    keystoreGenerationUrl: KeystoreGenerationUrlMutation;
    /** Mutations that modify the currently authenticated User */
    me: MeMutation;
    /** Mutations that create, update, and delete Robots */
    robot: RobotMutation;
    /** Mutations that modify an EAS Submit submission */
    submission: SubmissionMutation;
    update: UpdateMutation;
    updateBranch: UpdateBranchMutation;
    updateChannel: UpdateChannelMutation;
    uploadSession: UploadSession;
    /** Mutations that create, delete, and accept UserInvitations */
    userInvitation: UserInvitationMutation;
    /** Mutations that create, delete, update Webhooks */
    webhook: WebhookMutation;
};
export declare type RootMutationAccountArgs = {
    accountName: Scalars['ID'];
};
export declare type RootMutationAppArgs = {
    appId?: InputMaybe<Scalars['ID']>;
};
export declare type RootMutationBuildArgs = {
    buildId?: InputMaybe<Scalars['ID']>;
};
export declare type RootMutationBuildJobArgs = {
    buildId: Scalars['ID'];
};
export declare type RootQuery = {
    __typename?: 'RootQuery';
    /**
     * This is a placeholder field
     * @deprecated Not used.
     */
    _doNotUse?: Maybe<Scalars['String']>;
    /** Top-level query object for querying Accounts. */
    account: AccountQuery;
    /** Top-level query object for querying Actors. */
    actor: ActorQuery;
    /**
     * Public apps in the app directory
     * @deprecated Use 'all' field under 'app'.
     */
    allPublicApps?: Maybe<Array<Maybe<App>>>;
    app: AppQuery;
    /**
     * Look up app by app id
     * @deprecated Use 'byId' field under 'app'.
     */
    appByAppId?: Maybe<App>;
    /** Top-level query object for querying Apple Device registration requests. */
    appleDeviceRegistrationRequest: AppleDeviceRegistrationRequestQuery;
    /** Top-level query object for querying Apple Teams. */
    appleTeam: AppleTeamQuery;
    asset: AssetQuery;
    buildJobs: BuildJobQuery;
    /** Top-level query object for querying BuildPublicData publicly. */
    buildPublicData: BuildPublicDataQuery;
    builds: BuildQuery;
    clientBuilds: ClientBuildQuery;
    /** Top-level query object for querying Experimentation configuration. */
    experimentation: ExperimentationQuery;
    /** Top-level query object for querying Stripe Invoices. */
    invoice: InvoiceQuery;
    /**
     * If authenticated as a typical end user, this is the appropriate top-level
     * query object
     */
    me?: Maybe<User>;
    /**
     * If authenticated as a any type of Actor, this is the appropriate top-level
     * query object
     */
    meActor?: Maybe<Actor>;
    project: ProjectQuery;
    snack: SnackQuery;
    submissions: SubmissionQuery;
    /** fetch all updates in a group */
    updatesByGroup: Array<Update>;
    /** Top-level query object for querying Users. */
    user: UserQuery;
    /** @deprecated Use 'byId' field under 'user'. */
    userByUserId?: Maybe<User>;
    /** @deprecated Use 'byUsername' field under 'user'. */
    userByUsername?: Maybe<User>;
    /** Top-level query object for querying UserInvitationPublicData publicly. */
    userInvitationPublicData: UserInvitationPublicDataQuery;
    /**
     * If authenticated as a typical end user, this is the appropriate top-level
     * query object
     */
    viewer?: Maybe<User>;
    /** Top-level query object for querying Webhooks. */
    webhook: WebhookQuery;
};
export declare type RootQueryAllPublicAppsArgs = {
    filter: AppsFilter;
    limit?: InputMaybe<Scalars['Int']>;
    offset?: InputMaybe<Scalars['Int']>;
    sort: AppSort;
};
export declare type RootQueryAppByAppIdArgs = {
    appId: Scalars['String'];
};
export declare type RootQueryUpdatesByGroupArgs = {
    group: Scalars['ID'];
};
export declare type RootQueryUserByUserIdArgs = {
    userId: Scalars['String'];
};
export declare type RootQueryUserByUsernameArgs = {
    username: Scalars['String'];
};
export declare type SecondFactorBooleanResult = {
    __typename?: 'SecondFactorBooleanResult';
    success: Scalars['Boolean'];
};
export declare type SecondFactorDeviceConfiguration = {
    isPrimary: Scalars['Boolean'];
    method: SecondFactorMethod;
    name: Scalars['String'];
    smsPhoneNumber?: InputMaybe<Scalars['String']>;
};
export declare type SecondFactorDeviceConfigurationResult = {
    __typename?: 'SecondFactorDeviceConfigurationResult';
    keyURI: Scalars['String'];
    secondFactorDevice: UserSecondFactorDevice;
    secret: Scalars['String'];
};
export declare type SecondFactorInitiationResult = {
    __typename?: 'SecondFactorInitiationResult';
    configurationResults: Array<SecondFactorDeviceConfigurationResult>;
    plaintextBackupCodes: Array<Scalars['String']>;
};
export declare enum SecondFactorMethod {
    /** Google Authenticator (TOTP) */
    Authenticator = "AUTHENTICATOR",
    /** SMS */
    Sms = "SMS"
}
export declare type SecondFactorRegenerateBackupCodesResult = {
    __typename?: 'SecondFactorRegenerateBackupCodesResult';
    plaintextBackupCodes: Array<Scalars['String']>;
};
export declare type Snack = Project & {
    __typename?: 'Snack';
    /** Description of the Snack */
    description: Scalars['String'];
    /** Full name of the Snack, e.g. "@john/mysnack", "@snack/245631" */
    fullName: Scalars['String'];
    /** Has the Snack been run without errors */
    hasBeenRunSuccessfully?: Maybe<Scalars['Boolean']>;
    hashId: Scalars['String'];
    /** @deprecated No longer supported */
    iconUrl?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    /** Draft status, which is true when the Snack was not saved explicitly, but auto-saved */
    isDraft: Scalars['Boolean'];
    /** Name of the Snack, e.g. "My Snack" */
    name: Scalars['String'];
    /** Preview image of the running snack */
    previewImage?: Maybe<Scalars['String']>;
    published: Scalars['Boolean'];
    /** Slug name, e.g. "mysnack", "245631" */
    slug: Scalars['String'];
    /** Date and time the Snack was last updated */
    updated: Scalars['DateTime'];
    /** Name of the user that created the Snack, or "snack" when the Snack was saved anonymously */
    username: Scalars['String'];
};
export declare type SnackQuery = {
    __typename?: 'SnackQuery';
    /** Get snack by hashId */
    byHashId: Snack;
    /**
     * Get snack by hashId
     * @deprecated Use byHashId
     */
    byId: Snack;
};
export declare type SnackQueryByHashIdArgs = {
    hashId: Scalars['ID'];
};
export declare type SnackQueryByIdArgs = {
    id: Scalars['ID'];
};
export declare enum StandardOffer {
    /** $29 USD per month, 30 day trial */
    Default = "DEFAULT",
    /** $800 USD per month */
    Support = "SUPPORT",
    /** $29 USD per month, 1 year trial */
    YcDeals = "YC_DEALS",
    /** $348 USD per year, 30 day trial */
    YearlySub = "YEARLY_SUB"
}
/** Represents an EAS Submission */
export declare type Submission = ActivityTimelineProjectActivity & {
    __typename?: 'Submission';
    activityTimestamp: Scalars['DateTime'];
    actor?: Maybe<Actor>;
    androidConfig?: Maybe<AndroidSubmissionConfig>;
    app: App;
    cancelingActor?: Maybe<Actor>;
    createdAt: Scalars['DateTime'];
    error?: Maybe<SubmissionError>;
    id: Scalars['ID'];
    initiatingActor?: Maybe<Actor>;
    iosConfig?: Maybe<IosSubmissionConfig>;
    logsUrl?: Maybe<Scalars['String']>;
    platform: AppPlatform;
    status: SubmissionStatus;
    submittedBuild?: Maybe<Build>;
    updatedAt: Scalars['DateTime'];
};
export declare enum SubmissionAndroidArchiveType {
    Aab = "AAB",
    Apk = "APK"
}
export declare enum SubmissionAndroidReleaseStatus {
    Completed = "COMPLETED",
    Draft = "DRAFT",
    Halted = "HALTED",
    InProgress = "IN_PROGRESS"
}
export declare enum SubmissionAndroidTrack {
    Alpha = "ALPHA",
    Beta = "BETA",
    Internal = "INTERNAL",
    Production = "PRODUCTION"
}
export declare type SubmissionError = {
    __typename?: 'SubmissionError';
    errorCode?: Maybe<Scalars['String']>;
    message?: Maybe<Scalars['String']>;
};
export declare type SubmissionFilter = {
    platform?: InputMaybe<AppPlatform>;
    status?: InputMaybe<SubmissionStatus>;
};
export declare type SubmissionMutation = {
    __typename?: 'SubmissionMutation';
    /** Cancel an EAS Submit submission */
    cancelSubmission: Submission;
    /** Create an Android EAS Submit submission */
    createAndroidSubmission: CreateSubmissionResult;
    /** Create an iOS EAS Submit submission */
    createIosSubmission: CreateSubmissionResult;
    /**
     * Create an EAS Submit submission
     * @deprecated Use createIosSubmission / createAndroidSubmission instead
     */
    createSubmission: CreateSubmissionResult;
};
export declare type SubmissionMutationCancelSubmissionArgs = {
    submissionId?: InputMaybe<Scalars['ID']>;
};
export declare type SubmissionMutationCreateAndroidSubmissionArgs = {
    input: CreateAndroidSubmissionInput;
};
export declare type SubmissionMutationCreateIosSubmissionArgs = {
    input: CreateIosSubmissionInput;
};
export declare type SubmissionMutationCreateSubmissionArgs = {
    input: CreateSubmissionInput;
};
export declare type SubmissionQuery = {
    __typename?: 'SubmissionQuery';
    /** Look up EAS Submission by submission ID */
    byId: Submission;
};
export declare type SubmissionQueryByIdArgs = {
    submissionId: Scalars['ID'];
};
export declare enum SubmissionStatus {
    AwaitingBuild = "AWAITING_BUILD",
    Canceled = "CANCELED",
    Errored = "ERRORED",
    Finished = "FINISHED",
    InProgress = "IN_PROGRESS",
    InQueue = "IN_QUEUE"
}
export declare type SubscriptionDetails = {
    __typename?: 'SubscriptionDetails';
    addons: Array<AddonDetails>;
    cancelledAt?: Maybe<Scalars['DateTime']>;
    endedAt?: Maybe<Scalars['DateTime']>;
    id: Scalars['ID'];
    isDowngrading?: Maybe<Scalars['Boolean']>;
    name?: Maybe<Scalars['String']>;
    nextInvoice?: Maybe<Scalars['DateTime']>;
    planId?: Maybe<Scalars['String']>;
    price: Scalars['Int'];
    status?: Maybe<Scalars['String']>;
    trialEnd?: Maybe<Scalars['DateTime']>;
    willCancel?: Maybe<Scalars['Boolean']>;
};
export declare type Update = ActivityTimelineProjectActivity & {
    __typename?: 'Update';
    activityTimestamp: Scalars['DateTime'];
    actor?: Maybe<Actor>;
    awaitingCodeSigningInfo: Scalars['Boolean'];
    branch: UpdateBranch;
    branchId: Scalars['ID'];
    codeSigningInfo?: Maybe<CodeSigningInfo>;
    createdAt: Scalars['DateTime'];
    group: Scalars['String'];
    id: Scalars['ID'];
    manifestFragment: Scalars['String'];
    manifestPermalink: Scalars['String'];
    message?: Maybe<Scalars['String']>;
    platform: Scalars['String'];
    runtimeVersion: Scalars['String'];
    updatedAt: Scalars['DateTime'];
};
export declare type UpdateBranch = {
    __typename?: 'UpdateBranch';
    appId: Scalars['ID'];
    createdAt: Scalars['DateTime'];
    id: Scalars['ID'];
    name: Scalars['String'];
    updatedAt: Scalars['DateTime'];
    updates: Array<Update>;
};
export declare type UpdateBranchUpdatesArgs = {
    filter?: InputMaybe<UpdatesFilter>;
    limit: Scalars['Int'];
    offset: Scalars['Int'];
};
export declare type UpdateBranchMutation = {
    __typename?: 'UpdateBranchMutation';
    /** Create an EAS branch for an app */
    createUpdateBranchForApp: UpdateBranch;
    /** Delete an EAS branch and all of its updates as long as the branch is not being used by any channels */
    deleteUpdateBranch: DeleteUpdateBranchResult;
    /**
     * Edit an EAS branch. The branch can be specified either by its ID or
     * with the combination of (appId, name).
     */
    editUpdateBranch: UpdateBranch;
    /** Publish an update group to a branch */
    publishUpdateGroups: Array<Update>;
};
export declare type UpdateBranchMutationCreateUpdateBranchForAppArgs = {
    appId: Scalars['ID'];
    name: Scalars['String'];
};
export declare type UpdateBranchMutationDeleteUpdateBranchArgs = {
    branchId: Scalars['ID'];
};
export declare type UpdateBranchMutationEditUpdateBranchArgs = {
    input: EditUpdateBranchInput;
};
export declare type UpdateBranchMutationPublishUpdateGroupsArgs = {
    publishUpdateGroupsInput: Array<PublishUpdateGroupInput>;
};
export declare type UpdateChannel = {
    __typename?: 'UpdateChannel';
    appId: Scalars['ID'];
    branchMapping: Scalars['String'];
    createdAt: Scalars['DateTime'];
    id: Scalars['ID'];
    name: Scalars['String'];
    updateBranches: Array<UpdateBranch>;
    updatedAt: Scalars['DateTime'];
};
export declare type UpdateChannelUpdateBranchesArgs = {
    limit: Scalars['Int'];
    offset: Scalars['Int'];
};
export declare type UpdateChannelMutation = {
    __typename?: 'UpdateChannelMutation';
    /**
     * Create an EAS channel for an app.
     *
     * In order to work with GraphQL formatting, the branchMapping should be a
     * stringified JSON supplied to the mutation as a variable.
     */
    createUpdateChannelForApp: UpdateChannel;
    /** delete an EAS channel that doesn't point to any branches */
    deleteUpdateChannel: DeleteUpdateChannelResult;
    /**
     * Edit an EAS channel.
     *
     * In order to work with GraphQL formatting, the branchMapping should be a
     * stringified JSON supplied to the mutation as a variable.
     */
    editUpdateChannel: UpdateChannel;
};
export declare type UpdateChannelMutationCreateUpdateChannelForAppArgs = {
    appId: Scalars['ID'];
    branchMapping?: InputMaybe<Scalars['String']>;
    name: Scalars['String'];
};
export declare type UpdateChannelMutationDeleteUpdateChannelArgs = {
    channelId: Scalars['ID'];
};
export declare type UpdateChannelMutationEditUpdateChannelArgs = {
    branchMapping: Scalars['String'];
    channelId: Scalars['ID'];
};
export declare type UpdateInfoGroup = {
    android?: InputMaybe<PartialManifest>;
    ios?: InputMaybe<PartialManifest>;
    web?: InputMaybe<PartialManifest>;
};
export declare type UpdateMutation = {
    __typename?: 'UpdateMutation';
    /** Delete an EAS update group */
    deleteUpdateGroup: DeleteUpdateGroupResult;
    /** Set code signing info for an update */
    setCodeSigningInfo: Update;
};
export declare type UpdateMutationDeleteUpdateGroupArgs = {
    group: Scalars['ID'];
};
export declare type UpdateMutationSetCodeSigningInfoArgs = {
    codeSigningInfo: CodeSigningInfoInput;
    updateId: Scalars['ID'];
};
export declare type UpdatesFilter = {
    platform?: InputMaybe<AppPlatform>;
    runtimeVersions?: InputMaybe<Array<Scalars['String']>>;
};
export declare type UploadSession = {
    __typename?: 'UploadSession';
    /** Create an Upload Session */
    createUploadSession: Scalars['JSONObject'];
};
export declare type UploadSessionCreateUploadSessionArgs = {
    type: UploadSessionType;
};
export declare enum UploadSessionType {
    EasBuildProjectSources = "EAS_BUILD_PROJECT_SOURCES",
    EasSubmitAppArchive = "EAS_SUBMIT_APP_ARCHIVE"
}
/** Represents a human (not robot) actor. */
export declare type User = Actor & {
    __typename?: 'User';
    /** Access Tokens belonging to this actor */
    accessTokens: Array<AccessToken>;
    accounts: Array<Account>;
    /** Coalesced project activity for all apps belonging to all accounts this user belongs to. Only resolves for the viewer. */
    activityTimelineProjectActivities: Array<ActivityTimelineProjectActivity>;
    appCount: Scalars['Int'];
    appetizeCode?: Maybe<Scalars['String']>;
    /** Apps this user has published */
    apps: Array<App>;
    created: Scalars['DateTime'];
    displayName: Scalars['String'];
    email?: Maybe<Scalars['String']>;
    emailVerified: Scalars['Boolean'];
    /**
     * Server feature gate values for this actor, optionally filtering by desired gates.
     * Only resolves for the viewer.
     */
    featureGates: Scalars['JSONObject'];
    firstName?: Maybe<Scalars['String']>;
    fullName?: Maybe<Scalars['String']>;
    githubUsername?: Maybe<Scalars['String']>;
    /** Whether this user has any pending user invitations. Only resolves for the viewer. */
    hasPendingUserInvitations: Scalars['Boolean'];
    id: Scalars['ID'];
    industry?: Maybe<Scalars['String']>;
    /** @deprecated No longer supported */
    isEmailUnsubscribed: Scalars['Boolean'];
    isExpoAdmin: Scalars['Boolean'];
    /** @deprecated No longer supported */
    isLegacy?: Maybe<Scalars['Boolean']>;
    /** @deprecated No longer supported */
    isOnboarded?: Maybe<Scalars['Boolean']>;
    isSecondFactorAuthenticationEnabled: Scalars['Boolean'];
    /** @deprecated No longer supported */
    lastLogin?: Maybe<Scalars['DateTime']>;
    lastName?: Maybe<Scalars['String']>;
    /** @deprecated No longer supported */
    lastPasswordReset?: Maybe<Scalars['DateTime']>;
    /** @deprecated 'likes' have been deprecated. */
    likes?: Maybe<Array<Maybe<App>>>;
    location?: Maybe<Scalars['String']>;
    /** Pending UserInvitations for this user. Only resolves for the viewer. */
    pendingUserInvitations: Array<UserInvitation>;
    /** Associated accounts */
    primaryAccount: Account;
    profilePhoto: Scalars['String'];
    /** Get all certified second factor authentication methods */
    secondFactorDevices: Array<UserSecondFactorDevice>;
    /** Snacks associated with this account */
    snacks: Array<Snack>;
    twitterUsername?: Maybe<Scalars['String']>;
    username: Scalars['String'];
    /** @deprecated No longer supported */
    wasLegacy?: Maybe<Scalars['Boolean']>;
};
/** Represents a human (not robot) actor. */
export declare type UserActivityTimelineProjectActivitiesArgs = {
    createdBefore?: InputMaybe<Scalars['DateTime']>;
    filterTypes?: InputMaybe<Array<ActivityTimelineProjectActivityType>>;
    limit: Scalars['Int'];
};
/** Represents a human (not robot) actor. */
export declare type UserAppsArgs = {
    includeUnpublished?: InputMaybe<Scalars['Boolean']>;
    limit: Scalars['Int'];
    offset: Scalars['Int'];
};
/** Represents a human (not robot) actor. */
export declare type UserFeatureGatesArgs = {
    filter?: InputMaybe<Array<Scalars['String']>>;
};
/** Represents a human (not robot) actor. */
export declare type UserLikesArgs = {
    limit: Scalars['Int'];
    offset: Scalars['Int'];
};
/** Represents a human (not robot) actor. */
export declare type UserSnacksArgs = {
    limit: Scalars['Int'];
    offset: Scalars['Int'];
};
export declare type UserDataInput = {
    appetizeCode?: InputMaybe<Scalars['String']>;
    email?: InputMaybe<Scalars['String']>;
    firstName?: InputMaybe<Scalars['String']>;
    fullName?: InputMaybe<Scalars['String']>;
    githubUsername?: InputMaybe<Scalars['String']>;
    id?: InputMaybe<Scalars['ID']>;
    industry?: InputMaybe<Scalars['String']>;
    isEmailUnsubscribed?: InputMaybe<Scalars['Boolean']>;
    isLegacy?: InputMaybe<Scalars['Boolean']>;
    isOnboarded?: InputMaybe<Scalars['Boolean']>;
    lastName?: InputMaybe<Scalars['String']>;
    location?: InputMaybe<Scalars['String']>;
    profilePhoto?: InputMaybe<Scalars['String']>;
    twitterUsername?: InputMaybe<Scalars['String']>;
    username?: InputMaybe<Scalars['String']>;
    wasLegacy?: InputMaybe<Scalars['Boolean']>;
};
/** An pending invitation sent to an email granting membership on an Account. */
export declare type UserInvitation = {
    __typename?: 'UserInvitation';
    accountName: Scalars['String'];
    created: Scalars['DateTime'];
    /** Email to which this invitation was sent */
    email: Scalars['String'];
    id: Scalars['ID'];
    /** Account permissions to be granted upon acceptance of this invitation */
    permissions: Array<Permission>;
    /** Role to be granted upon acceptance of this invitation */
    role: Role;
};
export declare type UserInvitationMutation = {
    __typename?: 'UserInvitationMutation';
    /** Accept UserInvitation by ID. Viewer must have matching email and email must be verified. */
    acceptUserInvitationAsViewer: AcceptUserInvitationResult;
    /**
     * Accept UserInvitation by token. Note that the viewer's email is not required to match
     * the email on the invitation. If viewer's email does match that of the invitation,
     * their email will also be verified.
     */
    acceptUserInvitationByTokenAsViewer: AcceptUserInvitationResult;
    /**
     * Create a UserInvitation for an email that when accepted grants
     * the specified permissions on an Account
     */
    createUserInvitationForAccount: UserInvitation;
    /** Rescind UserInvitation by ID */
    deleteUserInvitation: RescindUserInvitationResult;
    /**
     * Delete UserInvitation by token. Note that the viewer's email is not required to match
     * the email on the invitation.
     */
    deleteUserInvitationByToken: RescindUserInvitationResult;
    /** Re-send UserInivitation by ID */
    resendUserInvitation: UserInvitation;
};
export declare type UserInvitationMutationAcceptUserInvitationAsViewerArgs = {
    id: Scalars['ID'];
};
export declare type UserInvitationMutationAcceptUserInvitationByTokenAsViewerArgs = {
    token: Scalars['ID'];
};
export declare type UserInvitationMutationCreateUserInvitationForAccountArgs = {
    accountID: Scalars['ID'];
    email: Scalars['String'];
    permissions: Array<InputMaybe<Permission>>;
};
export declare type UserInvitationMutationDeleteUserInvitationArgs = {
    id: Scalars['ID'];
};
export declare type UserInvitationMutationDeleteUserInvitationByTokenArgs = {
    token: Scalars['ID'];
};
export declare type UserInvitationMutationResendUserInvitationArgs = {
    id: Scalars['ID'];
};
/** Publicly visible data for a UserInvitation. */
export declare type UserInvitationPublicData = {
    __typename?: 'UserInvitationPublicData';
    accountName: Scalars['String'];
    created: Scalars['DateTime'];
    email: Scalars['String'];
    /** Email to which this invitation was sent */
    id: Scalars['ID'];
};
export declare type UserInvitationPublicDataQuery = {
    __typename?: 'UserInvitationPublicDataQuery';
    /** Get UserInvitationPublicData by token */
    byToken: UserInvitationPublicData;
};
export declare type UserInvitationPublicDataQueryByTokenArgs = {
    token: Scalars['ID'];
};
export declare type UserPermission = {
    __typename?: 'UserPermission';
    actor: Actor;
    permissions: Array<Permission>;
    role?: Maybe<Role>;
    /** @deprecated User type is deprecated */
    user?: Maybe<User>;
};
export declare type UserQuery = {
    __typename?: 'UserQuery';
    /** Query a User by ID */
    byId: User;
    /** Query a User by username */
    byUsername: User;
};
export declare type UserQueryByIdArgs = {
    userId: Scalars['String'];
};
export declare type UserQueryByUsernameArgs = {
    username: Scalars['String'];
};
/** A second factor device belonging to a User */
export declare type UserSecondFactorDevice = {
    __typename?: 'UserSecondFactorDevice';
    createdAt: Scalars['DateTime'];
    id: Scalars['ID'];
    isCertified: Scalars['Boolean'];
    isPrimary: Scalars['Boolean'];
    method: SecondFactorMethod;
    name: Scalars['String'];
    smsPhoneNumber?: Maybe<Scalars['String']>;
    updatedAt: Scalars['DateTime'];
    user: User;
};
export declare type Webhook = {
    __typename?: 'Webhook';
    appId: Scalars['ID'];
    createdAt: Scalars['DateTime'];
    event: WebhookType;
    id: Scalars['ID'];
    updatedAt: Scalars['DateTime'];
    url: Scalars['String'];
};
export declare type WebhookFilter = {
    event?: InputMaybe<WebhookType>;
};
export declare type WebhookInput = {
    event: WebhookType;
    secret: Scalars['String'];
    url: Scalars['String'];
};
export declare type WebhookMutation = {
    __typename?: 'WebhookMutation';
    /** Create a Webhook */
    createWebhook: Webhook;
    /** Delete a Webhook */
    deleteWebhook: DeleteWebhookResult;
    /** Update a Webhook */
    updateWebhook: Webhook;
};
export declare type WebhookMutationCreateWebhookArgs = {
    appId: Scalars['String'];
    webhookInput: WebhookInput;
};
export declare type WebhookMutationDeleteWebhookArgs = {
    webhookId: Scalars['ID'];
};
export declare type WebhookMutationUpdateWebhookArgs = {
    webhookId: Scalars['ID'];
    webhookInput: WebhookInput;
};
export declare type WebhookQuery = {
    __typename?: 'WebhookQuery';
    byId: Webhook;
};
export declare type WebhookQueryByIdArgs = {
    id: Scalars['ID'];
};
export declare enum WebhookType {
    Build = "BUILD",
    Submit = "SUBMIT"
}
export declare type DeleteAndroidAppBuildCredentialsResult = {
    __typename?: 'deleteAndroidAppBuildCredentialsResult';
    id: Scalars['ID'];
};
export declare type DeleteAndroidFcmResult = {
    __typename?: 'deleteAndroidFcmResult';
    id: Scalars['ID'];
};
export declare type DeleteAppStoreConnectApiKeyResult = {
    __typename?: 'deleteAppStoreConnectApiKeyResult';
    id: Scalars['ID'];
};
export declare type DeleteApplePushKeyResult = {
    __typename?: 'deleteApplePushKeyResult';
    id: Scalars['ID'];
};
export declare type CreateUpdateBranchForAppMutationVariables = Exact<{
    appId: Scalars['ID'];
    name: Scalars['String'];
}>;
export declare type CreateUpdateBranchForAppMutation = {
    __typename?: 'RootMutation';
    updateBranch: {
        __typename?: 'UpdateBranchMutation';
        createUpdateBranchForApp: {
            __typename?: 'UpdateBranch';
            id: string;
            name: string;
        };
    };
};
export declare type GetBranchInfoQueryVariables = Exact<{
    appId: Scalars['String'];
    name: Scalars['String'];
}>;
export declare type GetBranchInfoQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byId: {
            __typename?: 'App';
            id: string;
            updateBranchByName?: {
                __typename?: 'UpdateBranch';
                id: string;
                name: string;
            } | null;
        };
    };
};
export declare type DeleteUpdateBranchMutationVariables = Exact<{
    branchId: Scalars['ID'];
}>;
export declare type DeleteUpdateBranchMutation = {
    __typename?: 'RootMutation';
    updateBranch: {
        __typename?: 'UpdateBranchMutation';
        deleteUpdateBranch: {
            __typename?: 'DeleteUpdateBranchResult';
            id: string;
        };
    };
};
export declare type BranchesByAppQueryVariables = Exact<{
    appId: Scalars['String'];
    limit: Scalars['Int'];
}>;
export declare type BranchesByAppQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byId: {
            __typename?: 'App';
            id: string;
            updateBranches: Array<{
                __typename?: 'UpdateBranch';
                id: string;
                name: string;
                updates: Array<{
                    __typename?: 'Update';
                    id: string;
                    createdAt: any;
                    message?: string | null;
                    runtimeVersion: string;
                    group: string;
                    platform: string;
                    actor?: {
                        __typename: 'Robot';
                        firstName?: string | null;
                        id: string;
                    } | {
                        __typename: 'User';
                        username: string;
                        id: string;
                    } | null;
                }>;
            }>;
        };
    };
};
export declare type EditUpdateBranchMutationVariables = Exact<{
    input: EditUpdateBranchInput;
}>;
export declare type EditUpdateBranchMutation = {
    __typename?: 'RootMutation';
    updateBranch: {
        __typename?: 'UpdateBranchMutation';
        editUpdateBranch: {
            __typename?: 'UpdateBranch';
            id: string;
            name: string;
        };
    };
};
export declare type CancelBuildMutationVariables = Exact<{
    buildId: Scalars['ID'];
}>;
export declare type CancelBuildMutation = {
    __typename?: 'RootMutation';
    build: {
        __typename?: 'BuildMutation';
        cancel: {
            __typename?: 'Build';
            id: string;
            status: BuildStatus;
        };
    };
};
export declare type CreateUpdateChannelOnAppMutationVariables = Exact<{
    appId: Scalars['ID'];
    name: Scalars['String'];
    branchMapping: Scalars['String'];
}>;
export declare type CreateUpdateChannelOnAppMutation = {
    __typename?: 'RootMutation';
    updateChannel: {
        __typename?: 'UpdateChannelMutation';
        createUpdateChannelForApp: {
            __typename?: 'UpdateChannel';
            id: string;
            name: string;
            branchMapping: string;
        };
    };
};
export declare type GetChannelInfoQueryVariables = Exact<{
    appId: Scalars['String'];
    name: Scalars['String'];
}>;
export declare type GetChannelInfoQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byId: {
            __typename?: 'App';
            id: string;
            updateChannelByName?: {
                __typename?: 'UpdateChannel';
                id: string;
                name: string;
            } | null;
        };
    };
};
export declare type DeleteUpdateChannelMutationVariables = Exact<{
    channelId: Scalars['ID'];
}>;
export declare type DeleteUpdateChannelMutation = {
    __typename?: 'RootMutation';
    updateChannel: {
        __typename?: 'UpdateChannelMutation';
        deleteUpdateChannel: {
            __typename?: 'DeleteUpdateChannelResult';
            id: string;
        };
    };
};
export declare type GetChannelByNameToEditQueryVariables = Exact<{
    appId: Scalars['String'];
    channelName: Scalars['String'];
}>;
export declare type GetChannelByNameToEditQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byId: {
            __typename?: 'App';
            id: string;
            updateChannelByName?: {
                __typename?: 'UpdateChannel';
                id: string;
                name: string;
                updateBranches: Array<{
                    __typename?: 'UpdateBranch';
                    id: string;
                    name: string;
                }>;
            } | null;
        };
    };
};
export declare type UpdateChannelBranchMappingMutationVariables = Exact<{
    channelId: Scalars['ID'];
    branchMapping: Scalars['String'];
}>;
export declare type UpdateChannelBranchMappingMutation = {
    __typename?: 'RootMutation';
    updateChannel: {
        __typename?: 'UpdateChannelMutation';
        editUpdateChannel: {
            __typename?: 'UpdateChannel';
            id: string;
            name: string;
            branchMapping: string;
        };
    };
};
export declare type GetAllChannelsForAppQueryVariables = Exact<{
    appId: Scalars['String'];
    offset: Scalars['Int'];
    limit: Scalars['Int'];
}>;
export declare type GetAllChannelsForAppQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byId: {
            __typename?: 'App';
            id: string;
            updateChannels: Array<{
                __typename?: 'UpdateChannel';
                id: string;
                name: string;
                branchMapping: string;
                updateBranches: Array<{
                    __typename?: 'UpdateBranch';
                    id: string;
                    name: string;
                    updates: Array<{
                        __typename?: 'Update';
                        id: string;
                        group: string;
                        message?: string | null;
                        runtimeVersion: string;
                        createdAt: any;
                        platform: string;
                        actor?: {
                            __typename?: 'Robot';
                            firstName?: string | null;
                            id: string;
                        } | {
                            __typename?: 'User';
                            username: string;
                            id: string;
                        } | null;
                    }>;
                }>;
            }>;
        };
    };
};
export declare type AppInfoQueryVariables = Exact<{
    appId: Scalars['String'];
}>;
export declare type AppInfoQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byId: {
            __typename?: 'App';
            id: string;
            fullName: string;
        };
    };
};
export declare type DeleteUpdateGroupMutationVariables = Exact<{
    group: Scalars['ID'];
}>;
export declare type DeleteUpdateGroupMutation = {
    __typename?: 'RootMutation';
    update: {
        __typename?: 'UpdateMutation';
        deleteUpdateGroup: {
            __typename?: 'DeleteUpdateGroupResult';
            group: string;
        };
    };
};
export declare type GetUpdateGroupAsyncQueryVariables = Exact<{
    group: Scalars['ID'];
}>;
export declare type GetUpdateGroupAsyncQuery = {
    __typename?: 'RootQuery';
    updatesByGroup: Array<{
        __typename?: 'Update';
        id: string;
        group: string;
        runtimeVersion: string;
        manifestFragment: string;
        platform: string;
        message?: string | null;
    }>;
};
export declare type UpdatesByGroupQueryVariables = Exact<{
    groupId: Scalars['ID'];
}>;
export declare type UpdatesByGroupQuery = {
    __typename?: 'RootQuery';
    updatesByGroup: Array<{
        __typename?: 'Update';
        id: string;
        group: string;
        runtimeVersion: string;
        platform: string;
        message?: string | null;
        createdAt: any;
        actor?: {
            __typename?: 'Robot';
            firstName?: string | null;
            id: string;
        } | {
            __typename?: 'User';
            username: string;
            id: string;
        } | null;
    }>;
};
export declare type CreateAndroidAppBuildCredentialsMutationVariables = Exact<{
    androidAppBuildCredentialsInput: AndroidAppBuildCredentialsInput;
    androidAppCredentialsId: Scalars['ID'];
}>;
export declare type CreateAndroidAppBuildCredentialsMutation = {
    __typename?: 'RootMutation';
    androidAppBuildCredentials: {
        __typename?: 'AndroidAppBuildCredentialsMutation';
        createAndroidAppBuildCredentials: {
            __typename?: 'AndroidAppBuildCredentials';
            id: string;
            isDefault: boolean;
            isLegacy: boolean;
            name: string;
            androidKeystore?: {
                __typename?: 'AndroidKeystore';
                id: string;
                type: AndroidKeystoreType;
                keystore: string;
                keystorePassword: string;
                keyAlias: string;
                keyPassword?: string | null;
                md5CertificateFingerprint?: string | null;
                sha1CertificateFingerprint?: string | null;
                sha256CertificateFingerprint?: string | null;
                createdAt: any;
                updatedAt: any;
            } | null;
        };
    };
};
export declare type SetKeystoreMutationVariables = Exact<{
    androidAppBuildCredentialsId: Scalars['ID'];
    keystoreId: Scalars['ID'];
}>;
export declare type SetKeystoreMutation = {
    __typename?: 'RootMutation';
    androidAppBuildCredentials: {
        __typename?: 'AndroidAppBuildCredentialsMutation';
        setKeystore: {
            __typename?: 'AndroidAppBuildCredentials';
            id: string;
            isDefault: boolean;
            isLegacy: boolean;
            name: string;
            androidKeystore?: {
                __typename?: 'AndroidKeystore';
                id: string;
                type: AndroidKeystoreType;
                keystore: string;
                keystorePassword: string;
                keyAlias: string;
                keyPassword?: string | null;
                md5CertificateFingerprint?: string | null;
                sha1CertificateFingerprint?: string | null;
                sha256CertificateFingerprint?: string | null;
                createdAt: any;
                updatedAt: any;
            } | null;
        };
    };
};
export declare type CreateAndroidAppCredentialsMutationVariables = Exact<{
    androidAppCredentialsInput: AndroidAppCredentialsInput;
    appId: Scalars['ID'];
    applicationIdentifier: Scalars['String'];
}>;
export declare type CreateAndroidAppCredentialsMutation = {
    __typename?: 'RootMutation';
    androidAppCredentials: {
        __typename?: 'AndroidAppCredentialsMutation';
        createAndroidAppCredentials: {
            __typename?: 'AndroidAppCredentials';
            id: string;
            applicationIdentifier?: string | null;
            isLegacy: boolean;
            app: {
                __typename?: 'App';
                id: string;
                fullName: string;
                slug: string;
            };
            androidFcm?: {
                __typename?: 'AndroidFcm';
                id: string;
                credential: any;
                version: AndroidFcmVersion;
                createdAt: any;
                updatedAt: any;
                snippet: {
                    __typename?: 'FcmSnippetLegacy';
                    firstFourCharacters: string;
                    lastFourCharacters: string;
                } | {
                    __typename?: 'FcmSnippetV1';
                    projectId: string;
                    keyId: string;
                    serviceAccountEmail: string;
                    clientId?: string | null;
                };
            } | null;
            googleServiceAccountKeyForSubmissions?: {
                __typename?: 'GoogleServiceAccountKey';
                id: string;
                projectIdentifier: string;
                privateKeyIdentifier: string;
                clientEmail: string;
                clientIdentifier: string;
                createdAt: any;
                updatedAt: any;
            } | null;
            androidAppBuildCredentialsList: Array<{
                __typename?: 'AndroidAppBuildCredentials';
                id: string;
                isDefault: boolean;
                isLegacy: boolean;
                name: string;
                androidKeystore?: {
                    __typename?: 'AndroidKeystore';
                    id: string;
                    type: AndroidKeystoreType;
                    keystore: string;
                    keystorePassword: string;
                    keyAlias: string;
                    keyPassword?: string | null;
                    md5CertificateFingerprint?: string | null;
                    sha1CertificateFingerprint?: string | null;
                    sha256CertificateFingerprint?: string | null;
                    createdAt: any;
                    updatedAt: any;
                } | null;
            }>;
        };
    };
};
export declare type SetFcmMutationVariables = Exact<{
    androidAppCredentialsId: Scalars['ID'];
    fcmId: Scalars['ID'];
}>;
export declare type SetFcmMutation = {
    __typename?: 'RootMutation';
    androidAppCredentials: {
        __typename?: 'AndroidAppCredentialsMutation';
        setFcm: {
            __typename?: 'AndroidAppCredentials';
            id: string;
            applicationIdentifier?: string | null;
            isLegacy: boolean;
            app: {
                __typename?: 'App';
                id: string;
                fullName: string;
                slug: string;
            };
            androidFcm?: {
                __typename?: 'AndroidFcm';
                id: string;
                credential: any;
                version: AndroidFcmVersion;
                createdAt: any;
                updatedAt: any;
                snippet: {
                    __typename?: 'FcmSnippetLegacy';
                    firstFourCharacters: string;
                    lastFourCharacters: string;
                } | {
                    __typename?: 'FcmSnippetV1';
                    projectId: string;
                    keyId: string;
                    serviceAccountEmail: string;
                    clientId?: string | null;
                };
            } | null;
            googleServiceAccountKeyForSubmissions?: {
                __typename?: 'GoogleServiceAccountKey';
                id: string;
                projectIdentifier: string;
                privateKeyIdentifier: string;
                clientEmail: string;
                clientIdentifier: string;
                createdAt: any;
                updatedAt: any;
            } | null;
            androidAppBuildCredentialsList: Array<{
                __typename?: 'AndroidAppBuildCredentials';
                id: string;
                isDefault: boolean;
                isLegacy: boolean;
                name: string;
                androidKeystore?: {
                    __typename?: 'AndroidKeystore';
                    id: string;
                    type: AndroidKeystoreType;
                    keystore: string;
                    keystorePassword: string;
                    keyAlias: string;
                    keyPassword?: string | null;
                    md5CertificateFingerprint?: string | null;
                    sha1CertificateFingerprint?: string | null;
                    sha256CertificateFingerprint?: string | null;
                    createdAt: any;
                    updatedAt: any;
                } | null;
            }>;
        };
    };
};
export declare type SetGoogleServiceAccountKeyForSubmissionsMutationVariables = Exact<{
    androidAppCredentialsId: Scalars['ID'];
    googleServiceAccountKeyId: Scalars['ID'];
}>;
export declare type SetGoogleServiceAccountKeyForSubmissionsMutation = {
    __typename?: 'RootMutation';
    androidAppCredentials: {
        __typename?: 'AndroidAppCredentialsMutation';
        setGoogleServiceAccountKeyForSubmissions: {
            __typename?: 'AndroidAppCredentials';
            id: string;
            applicationIdentifier?: string | null;
            isLegacy: boolean;
            app: {
                __typename?: 'App';
                id: string;
                fullName: string;
                slug: string;
            };
            androidFcm?: {
                __typename?: 'AndroidFcm';
                id: string;
                credential: any;
                version: AndroidFcmVersion;
                createdAt: any;
                updatedAt: any;
                snippet: {
                    __typename?: 'FcmSnippetLegacy';
                    firstFourCharacters: string;
                    lastFourCharacters: string;
                } | {
                    __typename?: 'FcmSnippetV1';
                    projectId: string;
                    keyId: string;
                    serviceAccountEmail: string;
                    clientId?: string | null;
                };
            } | null;
            googleServiceAccountKeyForSubmissions?: {
                __typename?: 'GoogleServiceAccountKey';
                id: string;
                projectIdentifier: string;
                privateKeyIdentifier: string;
                clientEmail: string;
                clientIdentifier: string;
                createdAt: any;
                updatedAt: any;
            } | null;
            androidAppBuildCredentialsList: Array<{
                __typename?: 'AndroidAppBuildCredentials';
                id: string;
                isDefault: boolean;
                isLegacy: boolean;
                name: string;
                androidKeystore?: {
                    __typename?: 'AndroidKeystore';
                    id: string;
                    type: AndroidKeystoreType;
                    keystore: string;
                    keystorePassword: string;
                    keyAlias: string;
                    keyPassword?: string | null;
                    md5CertificateFingerprint?: string | null;
                    sha1CertificateFingerprint?: string | null;
                    sha256CertificateFingerprint?: string | null;
                    createdAt: any;
                    updatedAt: any;
                } | null;
            }>;
        };
    };
};
export declare type CreateAndroidFcmMutationVariables = Exact<{
    androidFcmInput: AndroidFcmInput;
    accountId: Scalars['ID'];
}>;
export declare type CreateAndroidFcmMutation = {
    __typename?: 'RootMutation';
    androidFcm: {
        __typename?: 'AndroidFcmMutation';
        createAndroidFcm: {
            __typename?: 'AndroidFcm';
            id: string;
            credential: any;
            version: AndroidFcmVersion;
            createdAt: any;
            updatedAt: any;
            snippet: {
                __typename?: 'FcmSnippetLegacy';
                firstFourCharacters: string;
                lastFourCharacters: string;
            } | {
                __typename?: 'FcmSnippetV1';
                projectId: string;
                keyId: string;
                serviceAccountEmail: string;
                clientId?: string | null;
            };
        };
    };
};
export declare type DeleteAndroidFcmMutationVariables = Exact<{
    androidFcmId: Scalars['ID'];
}>;
export declare type DeleteAndroidFcmMutation = {
    __typename?: 'RootMutation';
    androidFcm: {
        __typename?: 'AndroidFcmMutation';
        deleteAndroidFcm: {
            __typename?: 'deleteAndroidFcmResult';
            id: string;
        };
    };
};
export declare type CreateAndroidKeystoreMutationVariables = Exact<{
    androidKeystoreInput: AndroidKeystoreInput;
    accountId: Scalars['ID'];
}>;
export declare type CreateAndroidKeystoreMutation = {
    __typename?: 'RootMutation';
    androidKeystore: {
        __typename?: 'AndroidKeystoreMutation';
        createAndroidKeystore?: {
            __typename?: 'AndroidKeystore';
            id: string;
            type: AndroidKeystoreType;
            keystore: string;
            keystorePassword: string;
            keyAlias: string;
            keyPassword?: string | null;
            md5CertificateFingerprint?: string | null;
            sha1CertificateFingerprint?: string | null;
            sha256CertificateFingerprint?: string | null;
            createdAt: any;
            updatedAt: any;
        } | null;
    };
};
export declare type DeleteAndroidKeystoreMutationVariables = Exact<{
    androidKeystoreId: Scalars['ID'];
}>;
export declare type DeleteAndroidKeystoreMutation = {
    __typename?: 'RootMutation';
    androidKeystore: {
        __typename?: 'AndroidKeystoreMutation';
        deleteAndroidKeystore: {
            __typename?: 'DeleteAndroidKeystoreResult';
            id: string;
        };
    };
};
export declare type CreateGoogleServiceAccountKeyMutationVariables = Exact<{
    googleServiceAccountKeyInput: GoogleServiceAccountKeyInput;
    accountId: Scalars['ID'];
}>;
export declare type CreateGoogleServiceAccountKeyMutation = {
    __typename?: 'RootMutation';
    googleServiceAccountKey: {
        __typename?: 'GoogleServiceAccountKeyMutation';
        createGoogleServiceAccountKey: {
            __typename?: 'GoogleServiceAccountKey';
            id: string;
            projectIdentifier: string;
            privateKeyIdentifier: string;
            clientEmail: string;
            clientIdentifier: string;
            createdAt: any;
            updatedAt: any;
        };
    };
};
export declare type DeleteGoogleServiceAccountKeyMutationVariables = Exact<{
    googleServiceAccountKeyId: Scalars['ID'];
}>;
export declare type DeleteGoogleServiceAccountKeyMutation = {
    __typename?: 'RootMutation';
    googleServiceAccountKey: {
        __typename?: 'GoogleServiceAccountKeyMutation';
        deleteGoogleServiceAccountKey: {
            __typename?: 'DeleteGoogleServiceAccountKeyResult';
            id: string;
        };
    };
};
export declare type CommonAndroidAppCredentialsWithBuildCredentialsByApplicationIdentifierQueryVariables = Exact<{
    projectFullName: Scalars['String'];
    applicationIdentifier?: InputMaybe<Scalars['String']>;
    legacyOnly?: InputMaybe<Scalars['Boolean']>;
}>;
export declare type CommonAndroidAppCredentialsWithBuildCredentialsByApplicationIdentifierQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byFullName: {
            __typename?: 'App';
            id: string;
            androidAppCredentials: Array<{
                __typename?: 'AndroidAppCredentials';
                id: string;
                applicationIdentifier?: string | null;
                isLegacy: boolean;
                app: {
                    __typename?: 'App';
                    id: string;
                    fullName: string;
                    slug: string;
                };
                androidFcm?: {
                    __typename?: 'AndroidFcm';
                    id: string;
                    credential: any;
                    version: AndroidFcmVersion;
                    createdAt: any;
                    updatedAt: any;
                    snippet: {
                        __typename?: 'FcmSnippetLegacy';
                        firstFourCharacters: string;
                        lastFourCharacters: string;
                    } | {
                        __typename?: 'FcmSnippetV1';
                        projectId: string;
                        keyId: string;
                        serviceAccountEmail: string;
                        clientId?: string | null;
                    };
                } | null;
                googleServiceAccountKeyForSubmissions?: {
                    __typename?: 'GoogleServiceAccountKey';
                    id: string;
                    projectIdentifier: string;
                    privateKeyIdentifier: string;
                    clientEmail: string;
                    clientIdentifier: string;
                    createdAt: any;
                    updatedAt: any;
                } | null;
                androidAppBuildCredentialsList: Array<{
                    __typename?: 'AndroidAppBuildCredentials';
                    id: string;
                    isDefault: boolean;
                    isLegacy: boolean;
                    name: string;
                    androidKeystore?: {
                        __typename?: 'AndroidKeystore';
                        id: string;
                        type: AndroidKeystoreType;
                        keystore: string;
                        keystorePassword: string;
                        keyAlias: string;
                        keyPassword?: string | null;
                        md5CertificateFingerprint?: string | null;
                        sha1CertificateFingerprint?: string | null;
                        sha256CertificateFingerprint?: string | null;
                        createdAt: any;
                        updatedAt: any;
                    } | null;
                }>;
            }>;
        };
    };
};
export declare type GoogleServiceAccountKeyByAccountQueryVariables = Exact<{
    accountName: Scalars['String'];
}>;
export declare type GoogleServiceAccountKeyByAccountQuery = {
    __typename?: 'RootQuery';
    account: {
        __typename?: 'AccountQuery';
        byName: {
            __typename?: 'Account';
            id: string;
            googleServiceAccountKeys: Array<{
                __typename?: 'GoogleServiceAccountKey';
                id: string;
                projectIdentifier: string;
                privateKeyIdentifier: string;
                clientEmail: string;
                clientIdentifier: string;
                createdAt: any;
                updatedAt: any;
            }>;
        };
    };
};
export declare type CreateAppStoreConnectApiKeyMutationVariables = Exact<{
    appStoreConnectApiKeyInput: AppStoreConnectApiKeyInput;
    accountId: Scalars['ID'];
}>;
export declare type CreateAppStoreConnectApiKeyMutation = {
    __typename?: 'RootMutation';
    appStoreConnectApiKey: {
        __typename?: 'AppStoreConnectApiKeyMutation';
        createAppStoreConnectApiKey: {
            __typename?: 'AppStoreConnectApiKey';
            id: string;
            issuerIdentifier: string;
            keyIdentifier: string;
            name?: string | null;
            roles?: Array<AppStoreConnectUserRole> | null;
            createdAt: any;
            updatedAt: any;
            appleTeam?: {
                __typename?: 'AppleTeam';
                id: string;
                appleTeamIdentifier: string;
                appleTeamName?: string | null;
            } | null;
        };
    };
};
export declare type DeleteAppStoreConnectApiKeyMutationVariables = Exact<{
    appStoreConnectApiKeyId: Scalars['ID'];
}>;
export declare type DeleteAppStoreConnectApiKeyMutation = {
    __typename?: 'RootMutation';
    appStoreConnectApiKey: {
        __typename?: 'AppStoreConnectApiKeyMutation';
        deleteAppStoreConnectApiKey: {
            __typename?: 'deleteAppStoreConnectApiKeyResult';
            id: string;
        };
    };
};
export declare type CreateAppleAppIdentifierMutationVariables = Exact<{
    appleAppIdentifierInput: AppleAppIdentifierInput;
    accountId: Scalars['ID'];
}>;
export declare type CreateAppleAppIdentifierMutation = {
    __typename?: 'RootMutation';
    appleAppIdentifier: {
        __typename?: 'AppleAppIdentifierMutation';
        createAppleAppIdentifier: {
            __typename?: 'AppleAppIdentifier';
            id: string;
            bundleIdentifier: string;
        };
    };
};
export declare type CreateAppleDeviceMutationVariables = Exact<{
    appleDeviceInput: AppleDeviceInput;
    accountId: Scalars['ID'];
}>;
export declare type CreateAppleDeviceMutation = {
    __typename?: 'RootMutation';
    appleDevice: {
        __typename?: 'AppleDeviceMutation';
        createAppleDevice: {
            __typename?: 'AppleDevice';
            id: string;
            identifier: string;
            name?: string | null;
            model?: string | null;
            deviceClass?: AppleDeviceClass | null;
        };
    };
};
export declare type DeleteAppleDeviceMutationVariables = Exact<{
    deviceId: Scalars['ID'];
}>;
export declare type DeleteAppleDeviceMutation = {
    __typename?: 'RootMutation';
    appleDevice: {
        __typename?: 'AppleDeviceMutation';
        deleteAppleDevice: {
            __typename?: 'DeleteAppleDeviceResult';
            id: string;
        };
    };
};
export declare type CreateAppleDeviceRegistrationRequestMutationVariables = Exact<{
    appleTeamId: Scalars['ID'];
    accountId: Scalars['ID'];
}>;
export declare type CreateAppleDeviceRegistrationRequestMutation = {
    __typename?: 'RootMutation';
    appleDeviceRegistrationRequest: {
        __typename?: 'AppleDeviceRegistrationRequestMutation';
        createAppleDeviceRegistrationRequest: {
            __typename?: 'AppleDeviceRegistrationRequest';
            id: string;
        };
    };
};
export declare type CreateAppleDistributionCertificateMutationVariables = Exact<{
    appleDistributionCertificateInput: AppleDistributionCertificateInput;
    accountId: Scalars['ID'];
}>;
export declare type CreateAppleDistributionCertificateMutation = {
    __typename?: 'RootMutation';
    appleDistributionCertificate: {
        __typename?: 'AppleDistributionCertificateMutation';
        createAppleDistributionCertificate?: {
            __typename?: 'AppleDistributionCertificate';
            id: string;
            certificateP12?: string | null;
            certificatePassword?: string | null;
            serialNumber: string;
            developerPortalIdentifier?: string | null;
            validityNotBefore: any;
            validityNotAfter: any;
            updatedAt: any;
            appleTeam?: {
                __typename?: 'AppleTeam';
                id: string;
                appleTeamIdentifier: string;
                appleTeamName?: string | null;
            } | null;
            iosAppBuildCredentialsList: Array<{
                __typename?: 'IosAppBuildCredentials';
                id: string;
                iosAppCredentials: {
                    __typename?: 'IosAppCredentials';
                    id: string;
                    app: {
                        __typename?: 'App';
                        id: string;
                        fullName: string;
                        slug: string;
                    };
                    appleAppIdentifier: {
                        __typename?: 'AppleAppIdentifier';
                        id: string;
                        bundleIdentifier: string;
                    };
                };
                provisioningProfile?: {
                    __typename?: 'AppleProvisioningProfile';
                    id: string;
                    developerPortalIdentifier?: string | null;
                } | null;
            }>;
        } | null;
    };
};
export declare type DeleteAppleDistributionCertificateMutationVariables = Exact<{
    appleDistributionCertificateId: Scalars['ID'];
}>;
export declare type DeleteAppleDistributionCertificateMutation = {
    __typename?: 'RootMutation';
    appleDistributionCertificate: {
        __typename?: 'AppleDistributionCertificateMutation';
        deleteAppleDistributionCertificate: {
            __typename?: 'DeleteAppleDistributionCertificateResult';
            id: string;
        };
    };
};
export declare type CreateAppleProvisioningProfileMutationVariables = Exact<{
    appleProvisioningProfileInput: AppleProvisioningProfileInput;
    accountId: Scalars['ID'];
    appleAppIdentifierId: Scalars['ID'];
}>;
export declare type CreateAppleProvisioningProfileMutation = {
    __typename?: 'RootMutation';
    appleProvisioningProfile: {
        __typename?: 'AppleProvisioningProfileMutation';
        createAppleProvisioningProfile: {
            __typename?: 'AppleProvisioningProfile';
            id: string;
            expiration: any;
            developerPortalIdentifier?: string | null;
            provisioningProfile?: string | null;
            updatedAt: any;
            status: string;
            appleTeam?: {
                __typename?: 'AppleTeam';
                id: string;
                appleTeamIdentifier: string;
                appleTeamName?: string | null;
            } | null;
            appleDevices: Array<{
                __typename?: 'AppleDevice';
                id: string;
                identifier: string;
                name?: string | null;
                model?: string | null;
                deviceClass?: AppleDeviceClass | null;
            }>;
        };
    };
};
export declare type UpdateAppleProvisioningProfileMutationVariables = Exact<{
    appleProvisioningProfileId: Scalars['ID'];
    appleProvisioningProfileInput: AppleProvisioningProfileInput;
}>;
export declare type UpdateAppleProvisioningProfileMutation = {
    __typename?: 'RootMutation';
    appleProvisioningProfile: {
        __typename?: 'AppleProvisioningProfileMutation';
        updateAppleProvisioningProfile: {
            __typename?: 'AppleProvisioningProfile';
            id: string;
            expiration: any;
            developerPortalIdentifier?: string | null;
            provisioningProfile?: string | null;
            updatedAt: any;
            status: string;
            appleTeam?: {
                __typename?: 'AppleTeam';
                id: string;
                appleTeamIdentifier: string;
                appleTeamName?: string | null;
            } | null;
            appleDevices: Array<{
                __typename?: 'AppleDevice';
                id: string;
                identifier: string;
                name?: string | null;
                model?: string | null;
                deviceClass?: AppleDeviceClass | null;
            }>;
        };
    };
};
export declare type DeleteAppleProvisioningProfilesMutationVariables = Exact<{
    appleProvisioningProfileIds: Array<Scalars['ID']> | Scalars['ID'];
}>;
export declare type DeleteAppleProvisioningProfilesMutation = {
    __typename?: 'RootMutation';
    appleProvisioningProfile: {
        __typename?: 'AppleProvisioningProfileMutation';
        deleteAppleProvisioningProfiles: Array<{
            __typename?: 'DeleteAppleProvisioningProfileResult';
            id: string;
        }>;
    };
};
export declare type CreateApplePushKeyMutationVariables = Exact<{
    applePushKeyInput: ApplePushKeyInput;
    accountId: Scalars['ID'];
}>;
export declare type CreateApplePushKeyMutation = {
    __typename?: 'RootMutation';
    applePushKey: {
        __typename?: 'ApplePushKeyMutation';
        createApplePushKey: {
            __typename?: 'ApplePushKey';
            id: string;
            keyIdentifier: string;
            updatedAt: any;
            appleTeam?: {
                __typename?: 'AppleTeam';
                id: string;
                appleTeamIdentifier: string;
                appleTeamName?: string | null;
            } | null;
            iosAppCredentialsList: Array<{
                __typename?: 'IosAppCredentials';
                id: string;
                app: {
                    __typename?: 'App';
                    id: string;
                    fullName: string;
                    slug: string;
                };
                appleAppIdentifier: {
                    __typename?: 'AppleAppIdentifier';
                    id: string;
                    bundleIdentifier: string;
                };
            }>;
        };
    };
};
export declare type DeleteApplePushKeyMutationVariables = Exact<{
    applePushKeyId: Scalars['ID'];
}>;
export declare type DeleteApplePushKeyMutation = {
    __typename?: 'RootMutation';
    applePushKey: {
        __typename?: 'ApplePushKeyMutation';
        deleteApplePushKey: {
            __typename?: 'deleteApplePushKeyResult';
            id: string;
        };
    };
};
export declare type CreateAppleTeamMutationVariables = Exact<{
    appleTeamInput: AppleTeamInput;
    accountId: Scalars['ID'];
}>;
export declare type CreateAppleTeamMutation = {
    __typename?: 'RootMutation';
    appleTeam: {
        __typename?: 'AppleTeamMutation';
        createAppleTeam: {
            __typename?: 'AppleTeam';
            id: string;
            appleTeamIdentifier: string;
            appleTeamName?: string | null;
            account: {
                __typename?: 'Account';
                id: string;
                name: string;
            };
        };
    };
};
export declare type CreateIosAppBuildCredentialsMutationVariables = Exact<{
    iosAppBuildCredentialsInput: IosAppBuildCredentialsInput;
    iosAppCredentialsId: Scalars['ID'];
}>;
export declare type CreateIosAppBuildCredentialsMutation = {
    __typename?: 'RootMutation';
    iosAppBuildCredentials: {
        __typename?: 'IosAppBuildCredentialsMutation';
        createIosAppBuildCredentials: {
            __typename?: 'IosAppBuildCredentials';
            id: string;
            iosDistributionType: IosDistributionType;
            distributionCertificate?: {
                __typename?: 'AppleDistributionCertificate';
                id: string;
                certificateP12?: string | null;
                certificatePassword?: string | null;
                serialNumber: string;
                developerPortalIdentifier?: string | null;
                validityNotBefore: any;
                validityNotAfter: any;
                updatedAt: any;
                appleTeam?: {
                    __typename?: 'AppleTeam';
                    id: string;
                    appleTeamIdentifier: string;
                    appleTeamName?: string | null;
                } | null;
                iosAppBuildCredentialsList: Array<{
                    __typename?: 'IosAppBuildCredentials';
                    id: string;
                    iosAppCredentials: {
                        __typename?: 'IosAppCredentials';
                        id: string;
                        app: {
                            __typename?: 'App';
                            id: string;
                            fullName: string;
                            slug: string;
                        };
                        appleAppIdentifier: {
                            __typename?: 'AppleAppIdentifier';
                            id: string;
                            bundleIdentifier: string;
                        };
                    };
                    provisioningProfile?: {
                        __typename?: 'AppleProvisioningProfile';
                        id: string;
                        developerPortalIdentifier?: string | null;
                    } | null;
                }>;
            } | null;
            provisioningProfile?: {
                __typename?: 'AppleProvisioningProfile';
                id: string;
                expiration: any;
                developerPortalIdentifier?: string | null;
                provisioningProfile?: string | null;
                updatedAt: any;
                status: string;
                appleTeam?: {
                    __typename?: 'AppleTeam';
                    id: string;
                    appleTeamIdentifier: string;
                    appleTeamName?: string | null;
                } | null;
                appleDevices: Array<{
                    __typename?: 'AppleDevice';
                    id: string;
                    identifier: string;
                    name?: string | null;
                    model?: string | null;
                    deviceClass?: AppleDeviceClass | null;
                }>;
            } | null;
        };
    };
};
export declare type SetDistributionCertificateMutationVariables = Exact<{
    iosAppBuildCredentialsId: Scalars['ID'];
    distributionCertificateId: Scalars['ID'];
}>;
export declare type SetDistributionCertificateMutation = {
    __typename?: 'RootMutation';
    iosAppBuildCredentials: {
        __typename?: 'IosAppBuildCredentialsMutation';
        setDistributionCertificate: {
            __typename?: 'IosAppBuildCredentials';
            id: string;
            iosDistributionType: IosDistributionType;
            distributionCertificate?: {
                __typename?: 'AppleDistributionCertificate';
                id: string;
                certificateP12?: string | null;
                certificatePassword?: string | null;
                serialNumber: string;
                developerPortalIdentifier?: string | null;
                validityNotBefore: any;
                validityNotAfter: any;
                updatedAt: any;
                appleTeam?: {
                    __typename?: 'AppleTeam';
                    id: string;
                    appleTeamIdentifier: string;
                    appleTeamName?: string | null;
                } | null;
                iosAppBuildCredentialsList: Array<{
                    __typename?: 'IosAppBuildCredentials';
                    id: string;
                    iosAppCredentials: {
                        __typename?: 'IosAppCredentials';
                        id: string;
                        app: {
                            __typename?: 'App';
                            id: string;
                            fullName: string;
                            slug: string;
                        };
                        appleAppIdentifier: {
                            __typename?: 'AppleAppIdentifier';
                            id: string;
                            bundleIdentifier: string;
                        };
                    };
                    provisioningProfile?: {
                        __typename?: 'AppleProvisioningProfile';
                        id: string;
                        developerPortalIdentifier?: string | null;
                    } | null;
                }>;
            } | null;
            provisioningProfile?: {
                __typename?: 'AppleProvisioningProfile';
                id: string;
                expiration: any;
                developerPortalIdentifier?: string | null;
                provisioningProfile?: string | null;
                updatedAt: any;
                status: string;
                appleTeam?: {
                    __typename?: 'AppleTeam';
                    id: string;
                    appleTeamIdentifier: string;
                    appleTeamName?: string | null;
                } | null;
                appleDevices: Array<{
                    __typename?: 'AppleDevice';
                    id: string;
                    identifier: string;
                    name?: string | null;
                    model?: string | null;
                    deviceClass?: AppleDeviceClass | null;
                }>;
            } | null;
        };
    };
};
export declare type SetProvisioningProfileMutationVariables = Exact<{
    iosAppBuildCredentialsId: Scalars['ID'];
    provisioningProfileId: Scalars['ID'];
}>;
export declare type SetProvisioningProfileMutation = {
    __typename?: 'RootMutation';
    iosAppBuildCredentials: {
        __typename?: 'IosAppBuildCredentialsMutation';
        setProvisioningProfile: {
            __typename?: 'IosAppBuildCredentials';
            id: string;
            iosDistributionType: IosDistributionType;
            distributionCertificate?: {
                __typename?: 'AppleDistributionCertificate';
                id: string;
                certificateP12?: string | null;
                certificatePassword?: string | null;
                serialNumber: string;
                developerPortalIdentifier?: string | null;
                validityNotBefore: any;
                validityNotAfter: any;
                updatedAt: any;
                appleTeam?: {
                    __typename?: 'AppleTeam';
                    id: string;
                    appleTeamIdentifier: string;
                    appleTeamName?: string | null;
                } | null;
                iosAppBuildCredentialsList: Array<{
                    __typename?: 'IosAppBuildCredentials';
                    id: string;
                    iosAppCredentials: {
                        __typename?: 'IosAppCredentials';
                        id: string;
                        app: {
                            __typename?: 'App';
                            id: string;
                            fullName: string;
                            slug: string;
                        };
                        appleAppIdentifier: {
                            __typename?: 'AppleAppIdentifier';
                            id: string;
                            bundleIdentifier: string;
                        };
                    };
                    provisioningProfile?: {
                        __typename?: 'AppleProvisioningProfile';
                        id: string;
                        developerPortalIdentifier?: string | null;
                    } | null;
                }>;
            } | null;
            provisioningProfile?: {
                __typename?: 'AppleProvisioningProfile';
                id: string;
                expiration: any;
                developerPortalIdentifier?: string | null;
                provisioningProfile?: string | null;
                updatedAt: any;
                status: string;
                appleTeam?: {
                    __typename?: 'AppleTeam';
                    id: string;
                    appleTeamIdentifier: string;
                    appleTeamName?: string | null;
                } | null;
                appleDevices: Array<{
                    __typename?: 'AppleDevice';
                    id: string;
                    identifier: string;
                    name?: string | null;
                    model?: string | null;
                    deviceClass?: AppleDeviceClass | null;
                }>;
            } | null;
        };
    };
};
export declare type CreateIosAppCredentialsMutationVariables = Exact<{
    iosAppCredentialsInput: IosAppCredentialsInput;
    appId: Scalars['ID'];
    appleAppIdentifierId: Scalars['ID'];
}>;
export declare type CreateIosAppCredentialsMutation = {
    __typename?: 'RootMutation';
    iosAppCredentials: {
        __typename?: 'IosAppCredentialsMutation';
        createIosAppCredentials: {
            __typename?: 'IosAppCredentials';
            id: string;
            iosAppBuildCredentialsList: Array<{
                __typename?: 'IosAppBuildCredentials';
                id: string;
                iosDistributionType: IosDistributionType;
                distributionCertificate?: {
                    __typename?: 'AppleDistributionCertificate';
                    id: string;
                    certificateP12?: string | null;
                    certificatePassword?: string | null;
                    serialNumber: string;
                    developerPortalIdentifier?: string | null;
                    validityNotBefore: any;
                    validityNotAfter: any;
                    updatedAt: any;
                    appleTeam?: {
                        __typename?: 'AppleTeam';
                        id: string;
                        appleTeamIdentifier: string;
                        appleTeamName?: string | null;
                    } | null;
                    iosAppBuildCredentialsList: Array<{
                        __typename?: 'IosAppBuildCredentials';
                        id: string;
                        iosAppCredentials: {
                            __typename?: 'IosAppCredentials';
                            id: string;
                            app: {
                                __typename?: 'App';
                                id: string;
                                fullName: string;
                                slug: string;
                            };
                            appleAppIdentifier: {
                                __typename?: 'AppleAppIdentifier';
                                id: string;
                                bundleIdentifier: string;
                            };
                        };
                        provisioningProfile?: {
                            __typename?: 'AppleProvisioningProfile';
                            id: string;
                            developerPortalIdentifier?: string | null;
                        } | null;
                    }>;
                } | null;
                provisioningProfile?: {
                    __typename?: 'AppleProvisioningProfile';
                    id: string;
                    expiration: any;
                    developerPortalIdentifier?: string | null;
                    provisioningProfile?: string | null;
                    updatedAt: any;
                    status: string;
                    appleTeam?: {
                        __typename?: 'AppleTeam';
                        id: string;
                        appleTeamIdentifier: string;
                        appleTeamName?: string | null;
                    } | null;
                    appleDevices: Array<{
                        __typename?: 'AppleDevice';
                        id: string;
                        identifier: string;
                        name?: string | null;
                        model?: string | null;
                        deviceClass?: AppleDeviceClass | null;
                    }>;
                } | null;
            }>;
            app: {
                __typename?: 'App';
                id: string;
                fullName: string;
                slug: string;
            };
            appleTeam?: {
                __typename?: 'AppleTeam';
                id: string;
                appleTeamIdentifier: string;
                appleTeamName?: string | null;
            } | null;
            appleAppIdentifier: {
                __typename?: 'AppleAppIdentifier';
                id: string;
                bundleIdentifier: string;
            };
            pushKey?: {
                __typename?: 'ApplePushKey';
                id: string;
                keyIdentifier: string;
                updatedAt: any;
                appleTeam?: {
                    __typename?: 'AppleTeam';
                    id: string;
                    appleTeamIdentifier: string;
                    appleTeamName?: string | null;
                } | null;
                iosAppCredentialsList: Array<{
                    __typename?: 'IosAppCredentials';
                    id: string;
                    app: {
                        __typename?: 'App';
                        id: string;
                        fullName: string;
                        slug: string;
                    };
                    appleAppIdentifier: {
                        __typename?: 'AppleAppIdentifier';
                        id: string;
                        bundleIdentifier: string;
                    };
                }>;
            } | null;
            appStoreConnectApiKeyForSubmissions?: {
                __typename?: 'AppStoreConnectApiKey';
                id: string;
                issuerIdentifier: string;
                keyIdentifier: string;
                name?: string | null;
                roles?: Array<AppStoreConnectUserRole> | null;
                createdAt: any;
                updatedAt: any;
                appleTeam?: {
                    __typename?: 'AppleTeam';
                    id: string;
                    appleTeamIdentifier: string;
                    appleTeamName?: string | null;
                } | null;
            } | null;
        };
    };
};
export declare type SetPushKeyMutationVariables = Exact<{
    iosAppCredentialsId: Scalars['ID'];
    pushKeyId: Scalars['ID'];
}>;
export declare type SetPushKeyMutation = {
    __typename?: 'RootMutation';
    iosAppCredentials: {
        __typename?: 'IosAppCredentialsMutation';
        setPushKey: {
            __typename?: 'IosAppCredentials';
            id: string;
            iosAppBuildCredentialsList: Array<{
                __typename?: 'IosAppBuildCredentials';
                id: string;
                iosDistributionType: IosDistributionType;
                distributionCertificate?: {
                    __typename?: 'AppleDistributionCertificate';
                    id: string;
                    certificateP12?: string | null;
                    certificatePassword?: string | null;
                    serialNumber: string;
                    developerPortalIdentifier?: string | null;
                    validityNotBefore: any;
                    validityNotAfter: any;
                    updatedAt: any;
                    appleTeam?: {
                        __typename?: 'AppleTeam';
                        id: string;
                        appleTeamIdentifier: string;
                        appleTeamName?: string | null;
                    } | null;
                    iosAppBuildCredentialsList: Array<{
                        __typename?: 'IosAppBuildCredentials';
                        id: string;
                        iosAppCredentials: {
                            __typename?: 'IosAppCredentials';
                            id: string;
                            app: {
                                __typename?: 'App';
                                id: string;
                                fullName: string;
                                slug: string;
                            };
                            appleAppIdentifier: {
                                __typename?: 'AppleAppIdentifier';
                                id: string;
                                bundleIdentifier: string;
                            };
                        };
                        provisioningProfile?: {
                            __typename?: 'AppleProvisioningProfile';
                            id: string;
                            developerPortalIdentifier?: string | null;
                        } | null;
                    }>;
                } | null;
                provisioningProfile?: {
                    __typename?: 'AppleProvisioningProfile';
                    id: string;
                    expiration: any;
                    developerPortalIdentifier?: string | null;
                    provisioningProfile?: string | null;
                    updatedAt: any;
                    status: string;
                    appleTeam?: {
                        __typename?: 'AppleTeam';
                        id: string;
                        appleTeamIdentifier: string;
                        appleTeamName?: string | null;
                    } | null;
                    appleDevices: Array<{
                        __typename?: 'AppleDevice';
                        id: string;
                        identifier: string;
                        name?: string | null;
                        model?: string | null;
                        deviceClass?: AppleDeviceClass | null;
                    }>;
                } | null;
            }>;
            app: {
                __typename?: 'App';
                id: string;
                fullName: string;
                slug: string;
            };
            appleTeam?: {
                __typename?: 'AppleTeam';
                id: string;
                appleTeamIdentifier: string;
                appleTeamName?: string | null;
            } | null;
            appleAppIdentifier: {
                __typename?: 'AppleAppIdentifier';
                id: string;
                bundleIdentifier: string;
            };
            pushKey?: {
                __typename?: 'ApplePushKey';
                id: string;
                keyIdentifier: string;
                updatedAt: any;
                appleTeam?: {
                    __typename?: 'AppleTeam';
                    id: string;
                    appleTeamIdentifier: string;
                    appleTeamName?: string | null;
                } | null;
                iosAppCredentialsList: Array<{
                    __typename?: 'IosAppCredentials';
                    id: string;
                    app: {
                        __typename?: 'App';
                        id: string;
                        fullName: string;
                        slug: string;
                    };
                    appleAppIdentifier: {
                        __typename?: 'AppleAppIdentifier';
                        id: string;
                        bundleIdentifier: string;
                    };
                }>;
            } | null;
            appStoreConnectApiKeyForSubmissions?: {
                __typename?: 'AppStoreConnectApiKey';
                id: string;
                issuerIdentifier: string;
                keyIdentifier: string;
                name?: string | null;
                roles?: Array<AppStoreConnectUserRole> | null;
                createdAt: any;
                updatedAt: any;
                appleTeam?: {
                    __typename?: 'AppleTeam';
                    id: string;
                    appleTeamIdentifier: string;
                    appleTeamName?: string | null;
                } | null;
            } | null;
        };
    };
};
export declare type SetAppStoreConnectApiKeyForSubmissionsMutationVariables = Exact<{
    iosAppCredentialsId: Scalars['ID'];
    ascApiKeyId: Scalars['ID'];
}>;
export declare type SetAppStoreConnectApiKeyForSubmissionsMutation = {
    __typename?: 'RootMutation';
    iosAppCredentials: {
        __typename?: 'IosAppCredentialsMutation';
        setAppStoreConnectApiKeyForSubmissions: {
            __typename?: 'IosAppCredentials';
            id: string;
            iosAppBuildCredentialsList: Array<{
                __typename?: 'IosAppBuildCredentials';
                id: string;
                iosDistributionType: IosDistributionType;
                distributionCertificate?: {
                    __typename?: 'AppleDistributionCertificate';
                    id: string;
                    certificateP12?: string | null;
                    certificatePassword?: string | null;
                    serialNumber: string;
                    developerPortalIdentifier?: string | null;
                    validityNotBefore: any;
                    validityNotAfter: any;
                    updatedAt: any;
                    appleTeam?: {
                        __typename?: 'AppleTeam';
                        id: string;
                        appleTeamIdentifier: string;
                        appleTeamName?: string | null;
                    } | null;
                    iosAppBuildCredentialsList: Array<{
                        __typename?: 'IosAppBuildCredentials';
                        id: string;
                        iosAppCredentials: {
                            __typename?: 'IosAppCredentials';
                            id: string;
                            app: {
                                __typename?: 'App';
                                id: string;
                                fullName: string;
                                slug: string;
                            };
                            appleAppIdentifier: {
                                __typename?: 'AppleAppIdentifier';
                                id: string;
                                bundleIdentifier: string;
                            };
                        };
                        provisioningProfile?: {
                            __typename?: 'AppleProvisioningProfile';
                            id: string;
                            developerPortalIdentifier?: string | null;
                        } | null;
                    }>;
                } | null;
                provisioningProfile?: {
                    __typename?: 'AppleProvisioningProfile';
                    id: string;
                    expiration: any;
                    developerPortalIdentifier?: string | null;
                    provisioningProfile?: string | null;
                    updatedAt: any;
                    status: string;
                    appleTeam?: {
                        __typename?: 'AppleTeam';
                        id: string;
                        appleTeamIdentifier: string;
                        appleTeamName?: string | null;
                    } | null;
                    appleDevices: Array<{
                        __typename?: 'AppleDevice';
                        id: string;
                        identifier: string;
                        name?: string | null;
                        model?: string | null;
                        deviceClass?: AppleDeviceClass | null;
                    }>;
                } | null;
            }>;
            app: {
                __typename?: 'App';
                id: string;
                fullName: string;
                slug: string;
            };
            appleTeam?: {
                __typename?: 'AppleTeam';
                id: string;
                appleTeamIdentifier: string;
                appleTeamName?: string | null;
            } | null;
            appleAppIdentifier: {
                __typename?: 'AppleAppIdentifier';
                id: string;
                bundleIdentifier: string;
            };
            pushKey?: {
                __typename?: 'ApplePushKey';
                id: string;
                keyIdentifier: string;
                updatedAt: any;
                appleTeam?: {
                    __typename?: 'AppleTeam';
                    id: string;
                    appleTeamIdentifier: string;
                    appleTeamName?: string | null;
                } | null;
                iosAppCredentialsList: Array<{
                    __typename?: 'IosAppCredentials';
                    id: string;
                    app: {
                        __typename?: 'App';
                        id: string;
                        fullName: string;
                        slug: string;
                    };
                    appleAppIdentifier: {
                        __typename?: 'AppleAppIdentifier';
                        id: string;
                        bundleIdentifier: string;
                    };
                }>;
            } | null;
            appStoreConnectApiKeyForSubmissions?: {
                __typename?: 'AppStoreConnectApiKey';
                id: string;
                issuerIdentifier: string;
                keyIdentifier: string;
                name?: string | null;
                roles?: Array<AppStoreConnectUserRole> | null;
                createdAt: any;
                updatedAt: any;
                appleTeam?: {
                    __typename?: 'AppleTeam';
                    id: string;
                    appleTeamIdentifier: string;
                    appleTeamName?: string | null;
                } | null;
            } | null;
        };
    };
};
export declare type AppByFullNameQueryVariables = Exact<{
    fullName: Scalars['String'];
}>;
export declare type AppByFullNameQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byFullName: {
            __typename?: 'App';
            id: string;
            fullName: string;
            slug: string;
        };
    };
};
export declare type AppStoreConnectApiKeyByAccountQueryVariables = Exact<{
    accountName: Scalars['String'];
}>;
export declare type AppStoreConnectApiKeyByAccountQuery = {
    __typename?: 'RootQuery';
    account: {
        __typename?: 'AccountQuery';
        byName: {
            __typename?: 'Account';
            id: string;
            appStoreConnectApiKeys: Array<{
                __typename?: 'AppStoreConnectApiKey';
                id: string;
                issuerIdentifier: string;
                keyIdentifier: string;
                name?: string | null;
                roles?: Array<AppStoreConnectUserRole> | null;
                createdAt: any;
                updatedAt: any;
                appleTeam?: {
                    __typename?: 'AppleTeam';
                    id: string;
                    appleTeamIdentifier: string;
                    appleTeamName?: string | null;
                } | null;
            }>;
        };
    };
};
export declare type AppleAppIdentifierByBundleIdQueryVariables = Exact<{
    accountName: Scalars['String'];
    bundleIdentifier: Scalars['String'];
}>;
export declare type AppleAppIdentifierByBundleIdQuery = {
    __typename?: 'RootQuery';
    account: {
        __typename?: 'AccountQuery';
        byName: {
            __typename?: 'Account';
            id: string;
            appleAppIdentifiers: Array<{
                __typename?: 'AppleAppIdentifier';
                id: string;
                bundleIdentifier: string;
            }>;
        };
    };
};
export declare type AppleDevicesByAppleTeamQueryVariables = Exact<{
    accountId: Scalars['ID'];
    appleTeamIdentifier: Scalars['String'];
}>;
export declare type AppleDevicesByAppleTeamQuery = {
    __typename?: 'RootQuery';
    appleTeam: {
        __typename?: 'AppleTeamQuery';
        byAppleTeamIdentifier?: {
            __typename?: 'AppleTeam';
            id: string;
            appleTeamIdentifier: string;
            appleTeamName?: string | null;
            appleDevices: Array<{
                __typename?: 'AppleDevice';
                id: string;
                identifier: string;
                name?: string | null;
                model?: string | null;
                deviceClass?: AppleDeviceClass | null;
                appleTeam: {
                    __typename?: 'AppleTeam';
                    id: string;
                    appleTeamIdentifier: string;
                    appleTeamName?: string | null;
                };
            }>;
        } | null;
    };
};
export declare type AppleDevicesByTeamIdentifierQueryVariables = Exact<{
    accountName: Scalars['String'];
    appleTeamIdentifier: Scalars['String'];
}>;
export declare type AppleDevicesByTeamIdentifierQuery = {
    __typename?: 'RootQuery';
    account: {
        __typename?: 'AccountQuery';
        byName: {
            __typename?: 'Account';
            id: string;
            appleTeams: Array<{
                __typename?: 'AppleTeam';
                id: string;
                appleTeamIdentifier: string;
                appleTeamName?: string | null;
                appleDevices: Array<{
                    __typename?: 'AppleDevice';
                    id: string;
                    identifier: string;
                    name?: string | null;
                    deviceClass?: AppleDeviceClass | null;
                    enabled?: boolean | null;
                }>;
            }>;
        };
    };
};
export declare type AppleDevicesByIdentifierQueryVariables = Exact<{
    accountName: Scalars['String'];
    identifier: Scalars['String'];
}>;
export declare type AppleDevicesByIdentifierQuery = {
    __typename?: 'RootQuery';
    account: {
        __typename?: 'AccountQuery';
        byName: {
            __typename?: 'Account';
            id: string;
            appleDevices: Array<{
                __typename?: 'AppleDevice';
                id: string;
                identifier: string;
                name?: string | null;
                deviceClass?: AppleDeviceClass | null;
                enabled?: boolean | null;
                appleTeam: {
                    __typename?: 'AppleTeam';
                    id: string;
                    appleTeamIdentifier: string;
                    appleTeamName?: string | null;
                };
            }>;
        };
    };
};
export declare type AppleDistributionCertificateByAppQueryVariables = Exact<{
    projectFullName: Scalars['String'];
    appleAppIdentifierId: Scalars['String'];
    iosDistributionType: IosDistributionType;
}>;
export declare type AppleDistributionCertificateByAppQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byFullName: {
            __typename?: 'App';
            id: string;
            iosAppCredentials: Array<{
                __typename?: 'IosAppCredentials';
                id: string;
                iosAppBuildCredentialsList: Array<{
                    __typename?: 'IosAppBuildCredentials';
                    id: string;
                    distributionCertificate?: {
                        __typename?: 'AppleDistributionCertificate';
                        id: string;
                        certificateP12?: string | null;
                        certificatePassword?: string | null;
                        serialNumber: string;
                        developerPortalIdentifier?: string | null;
                        validityNotBefore: any;
                        validityNotAfter: any;
                        updatedAt: any;
                        appleTeam?: {
                            __typename?: 'AppleTeam';
                            id: string;
                            appleTeamIdentifier: string;
                            appleTeamName?: string | null;
                        } | null;
                        iosAppBuildCredentialsList: Array<{
                            __typename?: 'IosAppBuildCredentials';
                            id: string;
                            iosAppCredentials: {
                                __typename?: 'IosAppCredentials';
                                id: string;
                                app: {
                                    __typename?: 'App';
                                    id: string;
                                    fullName: string;
                                    slug: string;
                                };
                                appleAppIdentifier: {
                                    __typename?: 'AppleAppIdentifier';
                                    id: string;
                                    bundleIdentifier: string;
                                };
                            };
                            provisioningProfile?: {
                                __typename?: 'AppleProvisioningProfile';
                                id: string;
                                developerPortalIdentifier?: string | null;
                            } | null;
                        }>;
                    } | null;
                }>;
            }>;
        };
    };
};
export declare type AppleDistributionCertificateByAccountQueryVariables = Exact<{
    accountName: Scalars['String'];
}>;
export declare type AppleDistributionCertificateByAccountQuery = {
    __typename?: 'RootQuery';
    account: {
        __typename?: 'AccountQuery';
        byName: {
            __typename?: 'Account';
            id: string;
            appleDistributionCertificates: Array<{
                __typename?: 'AppleDistributionCertificate';
                id: string;
                certificateP12?: string | null;
                certificatePassword?: string | null;
                serialNumber: string;
                developerPortalIdentifier?: string | null;
                validityNotBefore: any;
                validityNotAfter: any;
                updatedAt: any;
                appleTeam?: {
                    __typename?: 'AppleTeam';
                    id: string;
                    appleTeamIdentifier: string;
                    appleTeamName?: string | null;
                } | null;
                iosAppBuildCredentialsList: Array<{
                    __typename?: 'IosAppBuildCredentials';
                    id: string;
                    iosAppCredentials: {
                        __typename?: 'IosAppCredentials';
                        id: string;
                        app: {
                            __typename?: 'App';
                            id: string;
                            fullName: string;
                            slug: string;
                        };
                        appleAppIdentifier: {
                            __typename?: 'AppleAppIdentifier';
                            id: string;
                            bundleIdentifier: string;
                        };
                    };
                    provisioningProfile?: {
                        __typename?: 'AppleProvisioningProfile';
                        id: string;
                        developerPortalIdentifier?: string | null;
                    } | null;
                }>;
            }>;
        };
    };
};
export declare type AppleProvisioningProfilesByAppQueryVariables = Exact<{
    projectFullName: Scalars['String'];
    appleAppIdentifierId: Scalars['String'];
    iosDistributionType: IosDistributionType;
}>;
export declare type AppleProvisioningProfilesByAppQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byFullName: {
            __typename?: 'App';
            id: string;
            iosAppCredentials: Array<{
                __typename?: 'IosAppCredentials';
                id: string;
                iosAppBuildCredentialsList: Array<{
                    __typename?: 'IosAppBuildCredentials';
                    id: string;
                    provisioningProfile?: {
                        __typename?: 'AppleProvisioningProfile';
                        id: string;
                        expiration: any;
                        developerPortalIdentifier?: string | null;
                        provisioningProfile?: string | null;
                        updatedAt: any;
                        status: string;
                        appleTeam?: {
                            __typename?: 'AppleTeam';
                            id: string;
                            appleTeamIdentifier: string;
                            appleTeamName?: string | null;
                        } | null;
                        appleDevices: Array<{
                            __typename?: 'AppleDevice';
                            id: string;
                            identifier: string;
                            name?: string | null;
                            model?: string | null;
                            deviceClass?: AppleDeviceClass | null;
                        }>;
                        appleAppIdentifier: {
                            __typename?: 'AppleAppIdentifier';
                            id: string;
                            bundleIdentifier: string;
                        };
                    } | null;
                }>;
            }>;
        };
    };
};
export declare type ApplePushKeyByAccountQueryVariables = Exact<{
    accountName: Scalars['String'];
}>;
export declare type ApplePushKeyByAccountQuery = {
    __typename?: 'RootQuery';
    account: {
        __typename?: 'AccountQuery';
        byName: {
            __typename?: 'Account';
            id: string;
            applePushKeys: Array<{
                __typename?: 'ApplePushKey';
                id: string;
                keyIdentifier: string;
                updatedAt: any;
                appleTeam?: {
                    __typename?: 'AppleTeam';
                    id: string;
                    appleTeamIdentifier: string;
                    appleTeamName?: string | null;
                } | null;
                iosAppCredentialsList: Array<{
                    __typename?: 'IosAppCredentials';
                    id: string;
                    app: {
                        __typename?: 'App';
                        id: string;
                        fullName: string;
                        slug: string;
                    };
                    appleAppIdentifier: {
                        __typename?: 'AppleAppIdentifier';
                        id: string;
                        bundleIdentifier: string;
                    };
                }>;
            }>;
        };
    };
};
export declare type AppleTeamsByAccountNameQueryVariables = Exact<{
    accountName: Scalars['String'];
}>;
export declare type AppleTeamsByAccountNameQuery = {
    __typename?: 'RootQuery';
    account: {
        __typename?: 'AccountQuery';
        byName: {
            __typename?: 'Account';
            id: string;
            appleTeams: Array<{
                __typename?: 'AppleTeam';
                id: string;
                appleTeamName?: string | null;
                appleTeamIdentifier: string;
            }>;
        };
    };
};
export declare type AppleTeamByIdentifierQueryVariables = Exact<{
    accountId: Scalars['ID'];
    appleTeamIdentifier: Scalars['String'];
}>;
export declare type AppleTeamByIdentifierQuery = {
    __typename?: 'RootQuery';
    appleTeam: {
        __typename?: 'AppleTeamQuery';
        byAppleTeamIdentifier?: {
            __typename?: 'AppleTeam';
            id: string;
            appleTeamIdentifier: string;
            appleTeamName?: string | null;
        } | null;
    };
};
export declare type IosAppBuildCredentialsByAppleAppIdentiferAndDistributionQueryVariables = Exact<{
    projectFullName: Scalars['String'];
    appleAppIdentifierId: Scalars['String'];
    iosDistributionType: IosDistributionType;
}>;
export declare type IosAppBuildCredentialsByAppleAppIdentiferAndDistributionQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byFullName: {
            __typename?: 'App';
            id: string;
            iosAppCredentials: Array<{
                __typename?: 'IosAppCredentials';
                id: string;
                iosAppBuildCredentialsList: Array<{
                    __typename?: 'IosAppBuildCredentials';
                    id: string;
                    iosDistributionType: IosDistributionType;
                    distributionCertificate?: {
                        __typename?: 'AppleDistributionCertificate';
                        id: string;
                        certificateP12?: string | null;
                        certificatePassword?: string | null;
                        serialNumber: string;
                        developerPortalIdentifier?: string | null;
                        validityNotBefore: any;
                        validityNotAfter: any;
                        updatedAt: any;
                        appleTeam?: {
                            __typename?: 'AppleTeam';
                            id: string;
                            appleTeamIdentifier: string;
                            appleTeamName?: string | null;
                        } | null;
                        iosAppBuildCredentialsList: Array<{
                            __typename?: 'IosAppBuildCredentials';
                            id: string;
                            iosAppCredentials: {
                                __typename?: 'IosAppCredentials';
                                id: string;
                                app: {
                                    __typename?: 'App';
                                    id: string;
                                    fullName: string;
                                    slug: string;
                                };
                                appleAppIdentifier: {
                                    __typename?: 'AppleAppIdentifier';
                                    id: string;
                                    bundleIdentifier: string;
                                };
                            };
                            provisioningProfile?: {
                                __typename?: 'AppleProvisioningProfile';
                                id: string;
                                developerPortalIdentifier?: string | null;
                            } | null;
                        }>;
                    } | null;
                    provisioningProfile?: {
                        __typename?: 'AppleProvisioningProfile';
                        id: string;
                        expiration: any;
                        developerPortalIdentifier?: string | null;
                        provisioningProfile?: string | null;
                        updatedAt: any;
                        status: string;
                        appleTeam?: {
                            __typename?: 'AppleTeam';
                            id: string;
                            appleTeamIdentifier: string;
                            appleTeamName?: string | null;
                        } | null;
                        appleDevices: Array<{
                            __typename?: 'AppleDevice';
                            id: string;
                            identifier: string;
                            name?: string | null;
                            model?: string | null;
                            deviceClass?: AppleDeviceClass | null;
                        }>;
                    } | null;
                }>;
            }>;
        };
    };
};
export declare type IosAppCredentialsWithBuildCredentialsByAppIdentifierIdQueryVariables = Exact<{
    projectFullName: Scalars['String'];
    appleAppIdentifierId: Scalars['String'];
    iosDistributionType?: InputMaybe<IosDistributionType>;
}>;
export declare type IosAppCredentialsWithBuildCredentialsByAppIdentifierIdQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byFullName: {
            __typename?: 'App';
            id: string;
            iosAppCredentials: Array<{
                __typename?: 'IosAppCredentials';
                id: string;
                iosAppBuildCredentialsList: Array<{
                    __typename?: 'IosAppBuildCredentials';
                    id: string;
                    iosDistributionType: IosDistributionType;
                    distributionCertificate?: {
                        __typename?: 'AppleDistributionCertificate';
                        id: string;
                        certificateP12?: string | null;
                        certificatePassword?: string | null;
                        serialNumber: string;
                        developerPortalIdentifier?: string | null;
                        validityNotBefore: any;
                        validityNotAfter: any;
                        updatedAt: any;
                        appleTeam?: {
                            __typename?: 'AppleTeam';
                            id: string;
                            appleTeamIdentifier: string;
                            appleTeamName?: string | null;
                        } | null;
                        iosAppBuildCredentialsList: Array<{
                            __typename?: 'IosAppBuildCredentials';
                            id: string;
                            iosAppCredentials: {
                                __typename?: 'IosAppCredentials';
                                id: string;
                                app: {
                                    __typename?: 'App';
                                    id: string;
                                    fullName: string;
                                    slug: string;
                                };
                                appleAppIdentifier: {
                                    __typename?: 'AppleAppIdentifier';
                                    id: string;
                                    bundleIdentifier: string;
                                };
                            };
                            provisioningProfile?: {
                                __typename?: 'AppleProvisioningProfile';
                                id: string;
                                developerPortalIdentifier?: string | null;
                            } | null;
                        }>;
                    } | null;
                    provisioningProfile?: {
                        __typename?: 'AppleProvisioningProfile';
                        id: string;
                        expiration: any;
                        developerPortalIdentifier?: string | null;
                        provisioningProfile?: string | null;
                        updatedAt: any;
                        status: string;
                        appleTeam?: {
                            __typename?: 'AppleTeam';
                            id: string;
                            appleTeamIdentifier: string;
                            appleTeamName?: string | null;
                        } | null;
                        appleDevices: Array<{
                            __typename?: 'AppleDevice';
                            id: string;
                            identifier: string;
                            name?: string | null;
                            model?: string | null;
                            deviceClass?: AppleDeviceClass | null;
                        }>;
                    } | null;
                }>;
                app: {
                    __typename?: 'App';
                    id: string;
                    fullName: string;
                    slug: string;
                };
                appleTeam?: {
                    __typename?: 'AppleTeam';
                    id: string;
                    appleTeamIdentifier: string;
                    appleTeamName?: string | null;
                } | null;
                appleAppIdentifier: {
                    __typename?: 'AppleAppIdentifier';
                    id: string;
                    bundleIdentifier: string;
                };
                pushKey?: {
                    __typename?: 'ApplePushKey';
                    id: string;
                    keyIdentifier: string;
                    updatedAt: any;
                    appleTeam?: {
                        __typename?: 'AppleTeam';
                        id: string;
                        appleTeamIdentifier: string;
                        appleTeamName?: string | null;
                    } | null;
                    iosAppCredentialsList: Array<{
                        __typename?: 'IosAppCredentials';
                        id: string;
                        app: {
                            __typename?: 'App';
                            id: string;
                            fullName: string;
                            slug: string;
                        };
                        appleAppIdentifier: {
                            __typename?: 'AppleAppIdentifier';
                            id: string;
                            bundleIdentifier: string;
                        };
                    }>;
                } | null;
                appStoreConnectApiKeyForSubmissions?: {
                    __typename?: 'AppStoreConnectApiKey';
                    id: string;
                    issuerIdentifier: string;
                    keyIdentifier: string;
                    name?: string | null;
                    roles?: Array<AppStoreConnectUserRole> | null;
                    createdAt: any;
                    updatedAt: any;
                    appleTeam?: {
                        __typename?: 'AppleTeam';
                        id: string;
                        appleTeamIdentifier: string;
                        appleTeamName?: string | null;
                    } | null;
                } | null;
            }>;
        };
    };
};
export declare type CommonIosAppCredentialsWithBuildCredentialsByAppIdentifierIdQueryVariables = Exact<{
    projectFullName: Scalars['String'];
    appleAppIdentifierId: Scalars['String'];
}>;
export declare type CommonIosAppCredentialsWithBuildCredentialsByAppIdentifierIdQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byFullName: {
            __typename?: 'App';
            id: string;
            iosAppCredentials: Array<{
                __typename?: 'IosAppCredentials';
                id: string;
                iosAppBuildCredentialsList: Array<{
                    __typename?: 'IosAppBuildCredentials';
                    id: string;
                    iosDistributionType: IosDistributionType;
                    distributionCertificate?: {
                        __typename?: 'AppleDistributionCertificate';
                        id: string;
                        certificateP12?: string | null;
                        certificatePassword?: string | null;
                        serialNumber: string;
                        developerPortalIdentifier?: string | null;
                        validityNotBefore: any;
                        validityNotAfter: any;
                        updatedAt: any;
                        appleTeam?: {
                            __typename?: 'AppleTeam';
                            id: string;
                            appleTeamIdentifier: string;
                            appleTeamName?: string | null;
                        } | null;
                        iosAppBuildCredentialsList: Array<{
                            __typename?: 'IosAppBuildCredentials';
                            id: string;
                            iosAppCredentials: {
                                __typename?: 'IosAppCredentials';
                                id: string;
                                app: {
                                    __typename?: 'App';
                                    id: string;
                                    fullName: string;
                                    slug: string;
                                };
                                appleAppIdentifier: {
                                    __typename?: 'AppleAppIdentifier';
                                    id: string;
                                    bundleIdentifier: string;
                                };
                            };
                            provisioningProfile?: {
                                __typename?: 'AppleProvisioningProfile';
                                id: string;
                                developerPortalIdentifier?: string | null;
                            } | null;
                        }>;
                    } | null;
                    provisioningProfile?: {
                        __typename?: 'AppleProvisioningProfile';
                        id: string;
                        expiration: any;
                        developerPortalIdentifier?: string | null;
                        provisioningProfile?: string | null;
                        updatedAt: any;
                        status: string;
                        appleTeam?: {
                            __typename?: 'AppleTeam';
                            id: string;
                            appleTeamIdentifier: string;
                            appleTeamName?: string | null;
                        } | null;
                        appleDevices: Array<{
                            __typename?: 'AppleDevice';
                            id: string;
                            identifier: string;
                            name?: string | null;
                            model?: string | null;
                            deviceClass?: AppleDeviceClass | null;
                        }>;
                    } | null;
                }>;
                app: {
                    __typename?: 'App';
                    id: string;
                    fullName: string;
                    slug: string;
                };
                appleTeam?: {
                    __typename?: 'AppleTeam';
                    id: string;
                    appleTeamIdentifier: string;
                    appleTeamName?: string | null;
                } | null;
                appleAppIdentifier: {
                    __typename?: 'AppleAppIdentifier';
                    id: string;
                    bundleIdentifier: string;
                };
                pushKey?: {
                    __typename?: 'ApplePushKey';
                    id: string;
                    keyIdentifier: string;
                    updatedAt: any;
                    appleTeam?: {
                        __typename?: 'AppleTeam';
                        id: string;
                        appleTeamIdentifier: string;
                        appleTeamName?: string | null;
                    } | null;
                    iosAppCredentialsList: Array<{
                        __typename?: 'IosAppCredentials';
                        id: string;
                        app: {
                            __typename?: 'App';
                            id: string;
                            fullName: string;
                            slug: string;
                        };
                        appleAppIdentifier: {
                            __typename?: 'AppleAppIdentifier';
                            id: string;
                            bundleIdentifier: string;
                        };
                    }>;
                } | null;
                appStoreConnectApiKeyForSubmissions?: {
                    __typename?: 'AppStoreConnectApiKey';
                    id: string;
                    issuerIdentifier: string;
                    keyIdentifier: string;
                    name?: string | null;
                    roles?: Array<AppStoreConnectUserRole> | null;
                    createdAt: any;
                    updatedAt: any;
                    appleTeam?: {
                        __typename?: 'AppleTeam';
                        id: string;
                        appleTeamIdentifier: string;
                        appleTeamName?: string | null;
                    } | null;
                } | null;
            }>;
        };
    };
};
export declare type CreateAppMutationVariables = Exact<{
    appInput: AppInput;
}>;
export declare type CreateAppMutation = {
    __typename?: 'RootMutation';
    app?: {
        __typename?: 'AppMutation';
        createApp: {
            __typename?: 'App';
            id: string;
        };
    } | null;
};
export declare type CreateAndroidBuildMutationVariables = Exact<{
    appId: Scalars['ID'];
    job: AndroidJobInput;
    metadata?: InputMaybe<BuildMetadataInput>;
}>;
export declare type CreateAndroidBuildMutation = {
    __typename?: 'RootMutation';
    build: {
        __typename?: 'BuildMutation';
        createAndroidBuild: {
            __typename?: 'CreateBuildResult';
            build: {
                __typename?: 'Build';
                id: string;
                status: BuildStatus;
                platform: AppPlatform;
                channel?: string | null;
                releaseChannel?: string | null;
                distribution?: DistributionType | null;
                iosEnterpriseProvisioning?: BuildIosEnterpriseProvisioning | null;
                buildProfile?: string | null;
                sdkVersion?: string | null;
                appVersion?: string | null;
                appBuildVersion?: string | null;
                runtimeVersion?: string | null;
                gitCommitHash?: string | null;
                createdAt?: any | null;
                updatedAt?: any | null;
                error?: {
                    __typename?: 'BuildError';
                    errorCode: string;
                    message: string;
                    docsUrl?: string | null;
                } | null;
                artifacts?: {
                    __typename?: 'BuildArtifacts';
                    buildUrl?: string | null;
                    xcodeBuildLogsUrl?: string | null;
                } | null;
                initiatingActor?: {
                    __typename: 'Robot';
                    id: string;
                    displayName: string;
                } | {
                    __typename: 'User';
                    id: string;
                    displayName: string;
                } | null;
                project: {
                    __typename: 'App';
                    id: string;
                    name: string;
                    slug: string;
                    ownerAccount: {
                        __typename?: 'Account';
                        id: string;
                        name: string;
                    };
                } | {
                    __typename: 'Snack';
                    id: string;
                    name: string;
                    slug: string;
                };
            };
            deprecationInfo?: {
                __typename?: 'EASBuildDeprecationInfo';
                type: EasBuildDeprecationInfoType;
                message: string;
            } | null;
        };
    };
};
export declare type CreateIosBuildMutationVariables = Exact<{
    appId: Scalars['ID'];
    job: IosJobInput;
    metadata?: InputMaybe<BuildMetadataInput>;
}>;
export declare type CreateIosBuildMutation = {
    __typename?: 'RootMutation';
    build: {
        __typename?: 'BuildMutation';
        createIosBuild: {
            __typename?: 'CreateBuildResult';
            build: {
                __typename?: 'Build';
                id: string;
                status: BuildStatus;
                platform: AppPlatform;
                channel?: string | null;
                releaseChannel?: string | null;
                distribution?: DistributionType | null;
                iosEnterpriseProvisioning?: BuildIosEnterpriseProvisioning | null;
                buildProfile?: string | null;
                sdkVersion?: string | null;
                appVersion?: string | null;
                appBuildVersion?: string | null;
                runtimeVersion?: string | null;
                gitCommitHash?: string | null;
                createdAt?: any | null;
                updatedAt?: any | null;
                error?: {
                    __typename?: 'BuildError';
                    errorCode: string;
                    message: string;
                    docsUrl?: string | null;
                } | null;
                artifacts?: {
                    __typename?: 'BuildArtifacts';
                    buildUrl?: string | null;
                    xcodeBuildLogsUrl?: string | null;
                } | null;
                initiatingActor?: {
                    __typename: 'Robot';
                    id: string;
                    displayName: string;
                } | {
                    __typename: 'User';
                    id: string;
                    displayName: string;
                } | null;
                project: {
                    __typename: 'App';
                    id: string;
                    name: string;
                    slug: string;
                    ownerAccount: {
                        __typename?: 'Account';
                        id: string;
                        name: string;
                    };
                } | {
                    __typename: 'Snack';
                    id: string;
                    name: string;
                    slug: string;
                };
            };
            deprecationInfo?: {
                __typename?: 'EASBuildDeprecationInfo';
                type: EasBuildDeprecationInfoType;
                message: string;
            } | null;
        };
    };
};
export declare type CreateEnvironmentSecretForAccountMutationVariables = Exact<{
    input: CreateEnvironmentSecretInput;
    accountId: Scalars['String'];
}>;
export declare type CreateEnvironmentSecretForAccountMutation = {
    __typename?: 'RootMutation';
    environmentSecret: {
        __typename?: 'EnvironmentSecretMutation';
        createEnvironmentSecretForAccount: {
            __typename?: 'EnvironmentSecret';
            id: string;
            name: string;
            createdAt: any;
        };
    };
};
export declare type CreateEnvironmentSecretForAppMutationVariables = Exact<{
    input: CreateEnvironmentSecretInput;
    appId: Scalars['String'];
}>;
export declare type CreateEnvironmentSecretForAppMutation = {
    __typename?: 'RootMutation';
    environmentSecret: {
        __typename?: 'EnvironmentSecretMutation';
        createEnvironmentSecretForApp: {
            __typename?: 'EnvironmentSecret';
            id: string;
            name: string;
            createdAt: any;
        };
    };
};
export declare type DeleteEnvironmentSecretMutationVariables = Exact<{
    id: Scalars['String'];
}>;
export declare type DeleteEnvironmentSecretMutation = {
    __typename?: 'RootMutation';
    environmentSecret: {
        __typename?: 'EnvironmentSecretMutation';
        deleteEnvironmentSecret: {
            __typename?: 'DeleteEnvironmentSecretResult';
            id: string;
        };
    };
};
export declare type CreateKeystoreGenerationUrlMutationVariables = Exact<{
    [key: string]: never;
}>;
export declare type CreateKeystoreGenerationUrlMutation = {
    __typename?: 'RootMutation';
    keystoreGenerationUrl: {
        __typename?: 'KeystoreGenerationUrlMutation';
        createKeystoreGenerationUrl: {
            __typename?: 'KeystoreGenerationUrl';
            id: string;
            url: string;
        };
    };
};
export declare type GetSignedUploadMutationVariables = Exact<{
    contentTypes: Array<Scalars['String']> | Scalars['String'];
}>;
export declare type GetSignedUploadMutation = {
    __typename?: 'RootMutation';
    asset: {
        __typename?: 'AssetMutation';
        getSignedAssetUploadSpecifications: {
            __typename?: 'GetSignedAssetUploadSpecificationsResult';
            specifications: Array<string>;
        };
    };
};
export declare type UpdatePublishMutationVariables = Exact<{
    publishUpdateGroupsInput: Array<PublishUpdateGroupInput> | PublishUpdateGroupInput;
}>;
export declare type UpdatePublishMutation = {
    __typename?: 'RootMutation';
    updateBranch: {
        __typename?: 'UpdateBranchMutation';
        publishUpdateGroups: Array<{
            __typename?: 'Update';
            id: string;
            group: string;
            runtimeVersion: string;
            platform: string;
            manifestPermalink: string;
        }>;
    };
};
export declare type SetCodeSigningInfoMutationVariables = Exact<{
    updateId: Scalars['ID'];
    codeSigningInfo: CodeSigningInfoInput;
}>;
export declare type SetCodeSigningInfoMutation = {
    __typename?: 'RootMutation';
    update: {
        __typename?: 'UpdateMutation';
        setCodeSigningInfo: {
            __typename?: 'Update';
            id: string;
            group: string;
            awaitingCodeSigningInfo: boolean;
            codeSigningInfo?: {
                __typename?: 'CodeSigningInfo';
                keyid: string;
                alg: string;
                sig: string;
            } | null;
        };
    };
};
export declare type CreateAndroidSubmissionMutationVariables = Exact<{
    appId: Scalars['ID'];
    config: AndroidSubmissionConfigInput;
    submittedBuildId?: InputMaybe<Scalars['ID']>;
}>;
export declare type CreateAndroidSubmissionMutation = {
    __typename?: 'RootMutation';
    submission: {
        __typename?: 'SubmissionMutation';
        createAndroidSubmission: {
            __typename?: 'CreateSubmissionResult';
            submission: {
                __typename?: 'Submission';
                id: string;
                status: SubmissionStatus;
                platform: AppPlatform;
                logsUrl?: string | null;
                app: {
                    __typename?: 'App';
                    id: string;
                    name: string;
                    slug: string;
                    ownerAccount: {
                        __typename?: 'Account';
                        id: string;
                        name: string;
                    };
                };
                androidConfig?: {
                    __typename?: 'AndroidSubmissionConfig';
                    applicationIdentifier?: string | null;
                    track: SubmissionAndroidTrack;
                    releaseStatus?: SubmissionAndroidReleaseStatus | null;
                } | null;
                iosConfig?: {
                    __typename?: 'IosSubmissionConfig';
                    ascAppIdentifier: string;
                    appleIdUsername?: string | null;
                } | null;
                error?: {
                    __typename?: 'SubmissionError';
                    errorCode?: string | null;
                    message?: string | null;
                } | null;
            };
        };
    };
};
export declare type CreateIosSubmissionMutationVariables = Exact<{
    appId: Scalars['ID'];
    config: IosSubmissionConfigInput;
    submittedBuildId?: InputMaybe<Scalars['ID']>;
}>;
export declare type CreateIosSubmissionMutation = {
    __typename?: 'RootMutation';
    submission: {
        __typename?: 'SubmissionMutation';
        createIosSubmission: {
            __typename?: 'CreateSubmissionResult';
            submission: {
                __typename?: 'Submission';
                id: string;
                status: SubmissionStatus;
                platform: AppPlatform;
                logsUrl?: string | null;
                app: {
                    __typename?: 'App';
                    id: string;
                    name: string;
                    slug: string;
                    ownerAccount: {
                        __typename?: 'Account';
                        id: string;
                        name: string;
                    };
                };
                androidConfig?: {
                    __typename?: 'AndroidSubmissionConfig';
                    applicationIdentifier?: string | null;
                    track: SubmissionAndroidTrack;
                    releaseStatus?: SubmissionAndroidReleaseStatus | null;
                } | null;
                iosConfig?: {
                    __typename?: 'IosSubmissionConfig';
                    ascAppIdentifier: string;
                    appleIdUsername?: string | null;
                } | null;
                error?: {
                    __typename?: 'SubmissionError';
                    errorCode?: string | null;
                    message?: string | null;
                } | null;
            };
        };
    };
};
export declare type CreateUploadSessionMutationVariables = Exact<{
    type: UploadSessionType;
}>;
export declare type CreateUploadSessionMutation = {
    __typename?: 'RootMutation';
    uploadSession: {
        __typename?: 'UploadSession';
        createUploadSession: any;
    };
};
export declare type CreateWebhookMutationVariables = Exact<{
    appId: Scalars['String'];
    webhookInput: WebhookInput;
}>;
export declare type CreateWebhookMutation = {
    __typename?: 'RootMutation';
    webhook: {
        __typename?: 'WebhookMutation';
        createWebhook: {
            __typename?: 'Webhook';
            id: string;
            event: WebhookType;
            url: string;
            createdAt: any;
            updatedAt: any;
        };
    };
};
export declare type UpdateWebhookMutationVariables = Exact<{
    webhookId: Scalars['ID'];
    webhookInput: WebhookInput;
}>;
export declare type UpdateWebhookMutation = {
    __typename?: 'RootMutation';
    webhook: {
        __typename?: 'WebhookMutation';
        updateWebhook: {
            __typename?: 'Webhook';
            id: string;
            event: WebhookType;
            url: string;
            createdAt: any;
            updatedAt: any;
        };
    };
};
export declare type DeleteWebhookMutationVariables = Exact<{
    webhookId: Scalars['ID'];
}>;
export declare type DeleteWebhookMutation = {
    __typename?: 'RootMutation';
    webhook: {
        __typename?: 'WebhookMutation';
        deleteWebhook: {
            __typename?: 'DeleteWebhookResult';
            id: string;
        };
    };
};
export declare type ViewBranchQueryVariables = Exact<{
    appId: Scalars['String'];
    name: Scalars['String'];
}>;
export declare type ViewBranchQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byId: {
            __typename?: 'App';
            id: string;
            updateBranchByName?: {
                __typename?: 'UpdateBranch';
                id: string;
                name: string;
            } | null;
        };
    };
};
export declare type BuildsByIdQueryVariables = Exact<{
    buildId: Scalars['ID'];
}>;
export declare type BuildsByIdQuery = {
    __typename?: 'RootQuery';
    builds: {
        __typename?: 'BuildQuery';
        byId: {
            __typename?: 'Build';
            id: string;
            status: BuildStatus;
            platform: AppPlatform;
            channel?: string | null;
            releaseChannel?: string | null;
            distribution?: DistributionType | null;
            iosEnterpriseProvisioning?: BuildIosEnterpriseProvisioning | null;
            buildProfile?: string | null;
            sdkVersion?: string | null;
            appVersion?: string | null;
            appBuildVersion?: string | null;
            runtimeVersion?: string | null;
            gitCommitHash?: string | null;
            createdAt?: any | null;
            updatedAt?: any | null;
            error?: {
                __typename?: 'BuildError';
                errorCode: string;
                message: string;
                docsUrl?: string | null;
            } | null;
            artifacts?: {
                __typename?: 'BuildArtifacts';
                buildUrl?: string | null;
                xcodeBuildLogsUrl?: string | null;
            } | null;
            initiatingActor?: {
                __typename: 'Robot';
                id: string;
                displayName: string;
            } | {
                __typename: 'User';
                id: string;
                displayName: string;
            } | null;
            project: {
                __typename: 'App';
                id: string;
                name: string;
                slug: string;
                ownerAccount: {
                    __typename?: 'Account';
                    id: string;
                    name: string;
                };
            } | {
                __typename: 'Snack';
                id: string;
                name: string;
                slug: string;
            };
        };
    };
};
export declare type GetAllBuildsForAppQueryVariables = Exact<{
    appId: Scalars['String'];
    offset: Scalars['Int'];
    limit: Scalars['Int'];
    filter?: InputMaybe<BuildFilter>;
}>;
export declare type GetAllBuildsForAppQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byId: {
            __typename?: 'App';
            id: string;
            builds: Array<{
                __typename?: 'Build';
                id: string;
                status: BuildStatus;
                platform: AppPlatform;
                channel?: string | null;
                releaseChannel?: string | null;
                distribution?: DistributionType | null;
                iosEnterpriseProvisioning?: BuildIosEnterpriseProvisioning | null;
                buildProfile?: string | null;
                sdkVersion?: string | null;
                appVersion?: string | null;
                appBuildVersion?: string | null;
                runtimeVersion?: string | null;
                gitCommitHash?: string | null;
                createdAt?: any | null;
                updatedAt?: any | null;
                error?: {
                    __typename?: 'BuildError';
                    errorCode: string;
                    message: string;
                    docsUrl?: string | null;
                } | null;
                artifacts?: {
                    __typename?: 'BuildArtifacts';
                    buildUrl?: string | null;
                    xcodeBuildLogsUrl?: string | null;
                } | null;
                initiatingActor?: {
                    __typename: 'Robot';
                    id: string;
                    displayName: string;
                } | {
                    __typename: 'User';
                    id: string;
                    displayName: string;
                } | null;
                project: {
                    __typename: 'App';
                    id: string;
                    name: string;
                    slug: string;
                    ownerAccount: {
                        __typename?: 'Account';
                        id: string;
                        name: string;
                    };
                } | {
                    __typename: 'Snack';
                    id: string;
                    name: string;
                    slug: string;
                };
            }>;
        };
    };
};
export declare type GetChannelByNameForAppQueryVariables = Exact<{
    appId: Scalars['String'];
    channelName: Scalars['String'];
}>;
export declare type GetChannelByNameForAppQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byId: {
            __typename?: 'App';
            id: string;
            updateChannelByName?: {
                __typename?: 'UpdateChannel';
                id: string;
                name: string;
                createdAt: any;
                branchMapping: string;
                updateBranches: Array<{
                    __typename?: 'UpdateBranch';
                    id: string;
                    name: string;
                    updates: Array<{
                        __typename?: 'Update';
                        id: string;
                        group: string;
                        message?: string | null;
                        runtimeVersion: string;
                        createdAt: any;
                        platform: string;
                        actor?: {
                            __typename?: 'Robot';
                            firstName?: string | null;
                            id: string;
                        } | {
                            __typename?: 'User';
                            username: string;
                            id: string;
                        } | null;
                    }>;
                }>;
            } | null;
        };
    };
};
export declare type EnvironmentSecretsByAccountNameQueryVariables = Exact<{
    accountName: Scalars['String'];
}>;
export declare type EnvironmentSecretsByAccountNameQuery = {
    __typename?: 'RootQuery';
    account: {
        __typename?: 'AccountQuery';
        byName: {
            __typename?: 'Account';
            id: string;
            environmentSecrets: Array<{
                __typename?: 'EnvironmentSecret';
                id: string;
                name: string;
                createdAt: any;
            }>;
        };
    };
};
export declare type EnvironmentSecretsByAppIdQueryVariables = Exact<{
    appId: Scalars['String'];
}>;
export declare type EnvironmentSecretsByAppIdQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byId: {
            __typename?: 'App';
            id: string;
            environmentSecrets: Array<{
                __typename?: 'EnvironmentSecret';
                id: string;
                name: string;
                createdAt: any;
            }>;
        };
    };
};
export declare type ProjectByUsernameAndSlugQueryVariables = Exact<{
    username: Scalars['String'];
    slug: Scalars['String'];
}>;
export declare type ProjectByUsernameAndSlugQuery = {
    __typename?: 'RootQuery';
    project: {
        __typename?: 'ProjectQuery';
        byUsernameAndSlug: {
            __typename?: 'App';
            id: string;
        } | {
            __typename?: 'Snack';
            id: string;
        };
    };
};
export declare type GetAssetMetadataQueryVariables = Exact<{
    storageKeys: Array<Scalars['String']> | Scalars['String'];
}>;
export declare type GetAssetMetadataQuery = {
    __typename?: 'RootQuery';
    asset: {
        __typename?: 'AssetQuery';
        metadata: Array<{
            __typename?: 'AssetMetadataResult';
            storageKey: string;
            status: AssetMetadataStatus;
        }>;
    };
};
export declare type SubmissionsByIdQueryVariables = Exact<{
    submissionId: Scalars['ID'];
}>;
export declare type SubmissionsByIdQuery = {
    __typename?: 'RootQuery';
    submissions: {
        __typename?: 'SubmissionQuery';
        byId: {
            __typename?: 'Submission';
            id: string;
            status: SubmissionStatus;
            platform: AppPlatform;
            logsUrl?: string | null;
            app: {
                __typename?: 'App';
                id: string;
                name: string;
                slug: string;
                ownerAccount: {
                    __typename?: 'Account';
                    id: string;
                    name: string;
                };
            };
            androidConfig?: {
                __typename?: 'AndroidSubmissionConfig';
                applicationIdentifier?: string | null;
                track: SubmissionAndroidTrack;
                releaseStatus?: SubmissionAndroidReleaseStatus | null;
            } | null;
            iosConfig?: {
                __typename?: 'IosSubmissionConfig';
                ascAppIdentifier: string;
                appleIdUsername?: string | null;
            } | null;
            error?: {
                __typename?: 'SubmissionError';
                errorCode?: string | null;
                message?: string | null;
            } | null;
        };
    };
};
export declare type GetAllSubmissionsForAppQueryVariables = Exact<{
    appId: Scalars['String'];
    offset: Scalars['Int'];
    limit: Scalars['Int'];
    status?: InputMaybe<SubmissionStatus>;
    platform?: InputMaybe<AppPlatform>;
}>;
export declare type GetAllSubmissionsForAppQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byId: {
            __typename?: 'App';
            id: string;
            submissions: Array<{
                __typename?: 'Submission';
                id: string;
                status: SubmissionStatus;
                platform: AppPlatform;
                logsUrl?: string | null;
                app: {
                    __typename?: 'App';
                    id: string;
                    name: string;
                    slug: string;
                    ownerAccount: {
                        __typename?: 'Account';
                        id: string;
                        name: string;
                    };
                };
                androidConfig?: {
                    __typename?: 'AndroidSubmissionConfig';
                    applicationIdentifier?: string | null;
                    track: SubmissionAndroidTrack;
                    releaseStatus?: SubmissionAndroidReleaseStatus | null;
                } | null;
                iosConfig?: {
                    __typename?: 'IosSubmissionConfig';
                    ascAppIdentifier: string;
                    appleIdUsername?: string | null;
                } | null;
                error?: {
                    __typename?: 'SubmissionError';
                    errorCode?: string | null;
                    message?: string | null;
                } | null;
            }>;
        };
    };
};
export declare type ViewAllUpdatesQueryVariables = Exact<{
    appId: Scalars['String'];
    limit: Scalars['Int'];
}>;
export declare type ViewAllUpdatesQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byId: {
            __typename?: 'App';
            id: string;
            updateBranches: Array<{
                __typename?: 'UpdateBranch';
                id: string;
                name: string;
                updates: Array<{
                    __typename?: 'Update';
                    id: string;
                    group: string;
                    message?: string | null;
                    createdAt: any;
                    runtimeVersion: string;
                    platform: string;
                    actor?: {
                        __typename?: 'Robot';
                        firstName?: string | null;
                        id: string;
                    } | {
                        __typename?: 'User';
                        username: string;
                        id: string;
                    } | null;
                }>;
            }>;
        };
    };
};
export declare type ViewBranchUpdatesQueryVariables = Exact<{
    appId: Scalars['String'];
    name: Scalars['String'];
    limit: Scalars['Int'];
}>;
export declare type ViewBranchUpdatesQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byId: {
            __typename?: 'App';
            id: string;
            updateBranchByName?: {
                __typename?: 'UpdateBranch';
                id: string;
                name: string;
                updates: Array<{
                    __typename?: 'Update';
                    id: string;
                    group: string;
                    message?: string | null;
                    createdAt: any;
                    runtimeVersion: string;
                    platform: string;
                    manifestFragment: string;
                    actor?: {
                        __typename?: 'Robot';
                        firstName?: string | null;
                        id: string;
                    } | {
                        __typename?: 'User';
                        username: string;
                        id: string;
                    } | null;
                }>;
            } | null;
        };
    };
};
export declare type CurrentUserQueryVariables = Exact<{
    [key: string]: never;
}>;
export declare type CurrentUserQuery = {
    __typename?: 'RootQuery';
    meActor?: {
        __typename: 'Robot';
        firstName?: string | null;
        id: string;
        isExpoAdmin: boolean;
        accounts: Array<{
            __typename?: 'Account';
            id: string;
            name: string;
        }>;
    } | {
        __typename: 'User';
        username: string;
        id: string;
        isExpoAdmin: boolean;
        accounts: Array<{
            __typename?: 'Account';
            id: string;
            name: string;
        }>;
    } | null;
};
export declare type WebhooksByAppIdQueryVariables = Exact<{
    appId: Scalars['String'];
    webhookFilter?: InputMaybe<WebhookFilter>;
}>;
export declare type WebhooksByAppIdQuery = {
    __typename?: 'RootQuery';
    app: {
        __typename?: 'AppQuery';
        byId: {
            __typename?: 'App';
            id: string;
            webhooks: Array<{
                __typename?: 'Webhook';
                id: string;
                event: WebhookType;
                url: string;
                createdAt: any;
                updatedAt: any;
            }>;
        };
    };
};
export declare type WebhookByIdQueryVariables = Exact<{
    webhookId: Scalars['ID'];
}>;
export declare type WebhookByIdQuery = {
    __typename?: 'RootQuery';
    webhook: {
        __typename?: 'WebhookQuery';
        byId: {
            __typename?: 'Webhook';
            id: string;
            event: WebhookType;
            url: string;
            createdAt: any;
            updatedAt: any;
        };
    };
};
export declare type AppFragment = {
    __typename?: 'App';
    id: string;
    fullName: string;
    slug: string;
};
export declare type BuildFragment = {
    __typename?: 'Build';
    id: string;
    status: BuildStatus;
    platform: AppPlatform;
    channel?: string | null;
    releaseChannel?: string | null;
    distribution?: DistributionType | null;
    iosEnterpriseProvisioning?: BuildIosEnterpriseProvisioning | null;
    buildProfile?: string | null;
    sdkVersion?: string | null;
    appVersion?: string | null;
    appBuildVersion?: string | null;
    runtimeVersion?: string | null;
    gitCommitHash?: string | null;
    createdAt?: any | null;
    updatedAt?: any | null;
    error?: {
        __typename?: 'BuildError';
        errorCode: string;
        message: string;
        docsUrl?: string | null;
    } | null;
    artifacts?: {
        __typename?: 'BuildArtifacts';
        buildUrl?: string | null;
        xcodeBuildLogsUrl?: string | null;
    } | null;
    initiatingActor?: {
        __typename: 'Robot';
        id: string;
        displayName: string;
    } | {
        __typename: 'User';
        id: string;
        displayName: string;
    } | null;
    project: {
        __typename: 'App';
        id: string;
        name: string;
        slug: string;
        ownerAccount: {
            __typename?: 'Account';
            id: string;
            name: string;
        };
    } | {
        __typename: 'Snack';
        id: string;
        name: string;
        slug: string;
    };
};
export declare type EnvironmentSecretFragment = {
    __typename?: 'EnvironmentSecret';
    id: string;
    name: string;
    createdAt: any;
};
export declare type SubmissionFragment = {
    __typename?: 'Submission';
    id: string;
    status: SubmissionStatus;
    platform: AppPlatform;
    logsUrl?: string | null;
    app: {
        __typename?: 'App';
        id: string;
        name: string;
        slug: string;
        ownerAccount: {
            __typename?: 'Account';
            id: string;
            name: string;
        };
    };
    androidConfig?: {
        __typename?: 'AndroidSubmissionConfig';
        applicationIdentifier?: string | null;
        track: SubmissionAndroidTrack;
        releaseStatus?: SubmissionAndroidReleaseStatus | null;
    } | null;
    iosConfig?: {
        __typename?: 'IosSubmissionConfig';
        ascAppIdentifier: string;
        appleIdUsername?: string | null;
    } | null;
    error?: {
        __typename?: 'SubmissionError';
        errorCode?: string | null;
        message?: string | null;
    } | null;
};
export declare type UpdateBranchFragment = {
    __typename?: 'UpdateBranch';
    id: string;
    name: string;
    updates: Array<{
        __typename?: 'Update';
        id: string;
        createdAt: any;
        message?: string | null;
        runtimeVersion: string;
        group: string;
        platform: string;
        actor?: {
            __typename: 'Robot';
            firstName?: string | null;
            id: string;
        } | {
            __typename: 'User';
            username: string;
            id: string;
        } | null;
    }>;
};
export declare type WebhookFragment = {
    __typename?: 'Webhook';
    id: string;
    event: WebhookType;
    url: string;
    createdAt: any;
    updatedAt: any;
};
export declare type AndroidAppBuildCredentialsFragment = {
    __typename?: 'AndroidAppBuildCredentials';
    id: string;
    isDefault: boolean;
    isLegacy: boolean;
    name: string;
    androidKeystore?: {
        __typename?: 'AndroidKeystore';
        id: string;
        type: AndroidKeystoreType;
        keystore: string;
        keystorePassword: string;
        keyAlias: string;
        keyPassword?: string | null;
        md5CertificateFingerprint?: string | null;
        sha1CertificateFingerprint?: string | null;
        sha256CertificateFingerprint?: string | null;
        createdAt: any;
        updatedAt: any;
    } | null;
};
export declare type CommonAndroidAppCredentialsFragment = {
    __typename?: 'AndroidAppCredentials';
    id: string;
    applicationIdentifier?: string | null;
    isLegacy: boolean;
    app: {
        __typename?: 'App';
        id: string;
        fullName: string;
        slug: string;
    };
    androidFcm?: {
        __typename?: 'AndroidFcm';
        id: string;
        credential: any;
        version: AndroidFcmVersion;
        createdAt: any;
        updatedAt: any;
        snippet: {
            __typename?: 'FcmSnippetLegacy';
            firstFourCharacters: string;
            lastFourCharacters: string;
        } | {
            __typename?: 'FcmSnippetV1';
            projectId: string;
            keyId: string;
            serviceAccountEmail: string;
            clientId?: string | null;
        };
    } | null;
    googleServiceAccountKeyForSubmissions?: {
        __typename?: 'GoogleServiceAccountKey';
        id: string;
        projectIdentifier: string;
        privateKeyIdentifier: string;
        clientEmail: string;
        clientIdentifier: string;
        createdAt: any;
        updatedAt: any;
    } | null;
    androidAppBuildCredentialsList: Array<{
        __typename?: 'AndroidAppBuildCredentials';
        id: string;
        isDefault: boolean;
        isLegacy: boolean;
        name: string;
        androidKeystore?: {
            __typename?: 'AndroidKeystore';
            id: string;
            type: AndroidKeystoreType;
            keystore: string;
            keystorePassword: string;
            keyAlias: string;
            keyPassword?: string | null;
            md5CertificateFingerprint?: string | null;
            sha1CertificateFingerprint?: string | null;
            sha256CertificateFingerprint?: string | null;
            createdAt: any;
            updatedAt: any;
        } | null;
    }>;
};
export declare type AndroidFcmFragment = {
    __typename?: 'AndroidFcm';
    id: string;
    credential: any;
    version: AndroidFcmVersion;
    createdAt: any;
    updatedAt: any;
    snippet: {
        __typename?: 'FcmSnippetLegacy';
        firstFourCharacters: string;
        lastFourCharacters: string;
    } | {
        __typename?: 'FcmSnippetV1';
        projectId: string;
        keyId: string;
        serviceAccountEmail: string;
        clientId?: string | null;
    };
};
export declare type AndroidKeystoreFragment = {
    __typename?: 'AndroidKeystore';
    id: string;
    type: AndroidKeystoreType;
    keystore: string;
    keystorePassword: string;
    keyAlias: string;
    keyPassword?: string | null;
    md5CertificateFingerprint?: string | null;
    sha1CertificateFingerprint?: string | null;
    sha256CertificateFingerprint?: string | null;
    createdAt: any;
    updatedAt: any;
};
export declare type AppStoreConnectApiKeyFragment = {
    __typename?: 'AppStoreConnectApiKey';
    id: string;
    issuerIdentifier: string;
    keyIdentifier: string;
    name?: string | null;
    roles?: Array<AppStoreConnectUserRole> | null;
    createdAt: any;
    updatedAt: any;
    appleTeam?: {
        __typename?: 'AppleTeam';
        id: string;
        appleTeamIdentifier: string;
        appleTeamName?: string | null;
    } | null;
};
export declare type AppleAppIdentifierFragment = {
    __typename?: 'AppleAppIdentifier';
    id: string;
    bundleIdentifier: string;
};
export declare type AppleDeviceFragment = {
    __typename?: 'AppleDevice';
    id: string;
    identifier: string;
    name?: string | null;
    model?: string | null;
    deviceClass?: AppleDeviceClass | null;
};
export declare type AppleDeviceRegistrationRequestFragment = {
    __typename?: 'AppleDeviceRegistrationRequest';
    id: string;
};
export declare type AppleDistributionCertificateFragment = {
    __typename?: 'AppleDistributionCertificate';
    id: string;
    certificateP12?: string | null;
    certificatePassword?: string | null;
    serialNumber: string;
    developerPortalIdentifier?: string | null;
    validityNotBefore: any;
    validityNotAfter: any;
    updatedAt: any;
    appleTeam?: {
        __typename?: 'AppleTeam';
        id: string;
        appleTeamIdentifier: string;
        appleTeamName?: string | null;
    } | null;
    iosAppBuildCredentialsList: Array<{
        __typename?: 'IosAppBuildCredentials';
        id: string;
        iosAppCredentials: {
            __typename?: 'IosAppCredentials';
            id: string;
            app: {
                __typename?: 'App';
                id: string;
                fullName: string;
                slug: string;
            };
            appleAppIdentifier: {
                __typename?: 'AppleAppIdentifier';
                id: string;
                bundleIdentifier: string;
            };
        };
        provisioningProfile?: {
            __typename?: 'AppleProvisioningProfile';
            id: string;
            developerPortalIdentifier?: string | null;
        } | null;
    }>;
};
export declare type AppleProvisioningProfileFragment = {
    __typename?: 'AppleProvisioningProfile';
    id: string;
    expiration: any;
    developerPortalIdentifier?: string | null;
    provisioningProfile?: string | null;
    updatedAt: any;
    status: string;
    appleTeam?: {
        __typename?: 'AppleTeam';
        id: string;
        appleTeamIdentifier: string;
        appleTeamName?: string | null;
    } | null;
    appleDevices: Array<{
        __typename?: 'AppleDevice';
        id: string;
        identifier: string;
        name?: string | null;
        model?: string | null;
        deviceClass?: AppleDeviceClass | null;
    }>;
};
export declare type AppleProvisioningProfileIdentifiersFragment = {
    __typename?: 'AppleProvisioningProfile';
    id: string;
    developerPortalIdentifier?: string | null;
};
export declare type ApplePushKeyFragment = {
    __typename?: 'ApplePushKey';
    id: string;
    keyIdentifier: string;
    updatedAt: any;
    appleTeam?: {
        __typename?: 'AppleTeam';
        id: string;
        appleTeamIdentifier: string;
        appleTeamName?: string | null;
    } | null;
    iosAppCredentialsList: Array<{
        __typename?: 'IosAppCredentials';
        id: string;
        app: {
            __typename?: 'App';
            id: string;
            fullName: string;
            slug: string;
        };
        appleAppIdentifier: {
            __typename?: 'AppleAppIdentifier';
            id: string;
            bundleIdentifier: string;
        };
    }>;
};
export declare type AppleTeamFragment = {
    __typename?: 'AppleTeam';
    id: string;
    appleTeamIdentifier: string;
    appleTeamName?: string | null;
};
export declare type GoogleServiceAccountKeyFragment = {
    __typename?: 'GoogleServiceAccountKey';
    id: string;
    projectIdentifier: string;
    privateKeyIdentifier: string;
    clientEmail: string;
    clientIdentifier: string;
    createdAt: any;
    updatedAt: any;
};
export declare type IosAppBuildCredentialsFragment = {
    __typename?: 'IosAppBuildCredentials';
    id: string;
    iosDistributionType: IosDistributionType;
    distributionCertificate?: {
        __typename?: 'AppleDistributionCertificate';
        id: string;
        certificateP12?: string | null;
        certificatePassword?: string | null;
        serialNumber: string;
        developerPortalIdentifier?: string | null;
        validityNotBefore: any;
        validityNotAfter: any;
        updatedAt: any;
        appleTeam?: {
            __typename?: 'AppleTeam';
            id: string;
            appleTeamIdentifier: string;
            appleTeamName?: string | null;
        } | null;
        iosAppBuildCredentialsList: Array<{
            __typename?: 'IosAppBuildCredentials';
            id: string;
            iosAppCredentials: {
                __typename?: 'IosAppCredentials';
                id: string;
                app: {
                    __typename?: 'App';
                    id: string;
                    fullName: string;
                    slug: string;
                };
                appleAppIdentifier: {
                    __typename?: 'AppleAppIdentifier';
                    id: string;
                    bundleIdentifier: string;
                };
            };
            provisioningProfile?: {
                __typename?: 'AppleProvisioningProfile';
                id: string;
                developerPortalIdentifier?: string | null;
            } | null;
        }>;
    } | null;
    provisioningProfile?: {
        __typename?: 'AppleProvisioningProfile';
        id: string;
        expiration: any;
        developerPortalIdentifier?: string | null;
        provisioningProfile?: string | null;
        updatedAt: any;
        status: string;
        appleTeam?: {
            __typename?: 'AppleTeam';
            id: string;
            appleTeamIdentifier: string;
            appleTeamName?: string | null;
        } | null;
        appleDevices: Array<{
            __typename?: 'AppleDevice';
            id: string;
            identifier: string;
            name?: string | null;
            model?: string | null;
            deviceClass?: AppleDeviceClass | null;
        }>;
    } | null;
};
export declare type CommonIosAppCredentialsWithoutBuildCredentialsFragment = {
    __typename?: 'IosAppCredentials';
    id: string;
    app: {
        __typename?: 'App';
        id: string;
        fullName: string;
        slug: string;
    };
    appleTeam?: {
        __typename?: 'AppleTeam';
        id: string;
        appleTeamIdentifier: string;
        appleTeamName?: string | null;
    } | null;
    appleAppIdentifier: {
        __typename?: 'AppleAppIdentifier';
        id: string;
        bundleIdentifier: string;
    };
    pushKey?: {
        __typename?: 'ApplePushKey';
        id: string;
        keyIdentifier: string;
        updatedAt: any;
        appleTeam?: {
            __typename?: 'AppleTeam';
            id: string;
            appleTeamIdentifier: string;
            appleTeamName?: string | null;
        } | null;
        iosAppCredentialsList: Array<{
            __typename?: 'IosAppCredentials';
            id: string;
            app: {
                __typename?: 'App';
                id: string;
                fullName: string;
                slug: string;
            };
            appleAppIdentifier: {
                __typename?: 'AppleAppIdentifier';
                id: string;
                bundleIdentifier: string;
            };
        }>;
    } | null;
    appStoreConnectApiKeyForSubmissions?: {
        __typename?: 'AppStoreConnectApiKey';
        id: string;
        issuerIdentifier: string;
        keyIdentifier: string;
        name?: string | null;
        roles?: Array<AppStoreConnectUserRole> | null;
        createdAt: any;
        updatedAt: any;
        appleTeam?: {
            __typename?: 'AppleTeam';
            id: string;
            appleTeamIdentifier: string;
            appleTeamName?: string | null;
        } | null;
    } | null;
};
export declare type CommonIosAppCredentialsFragment = {
    __typename?: 'IosAppCredentials';
    id: string;
    iosAppBuildCredentialsList: Array<{
        __typename?: 'IosAppBuildCredentials';
        id: string;
        iosDistributionType: IosDistributionType;
        distributionCertificate?: {
            __typename?: 'AppleDistributionCertificate';
            id: string;
            certificateP12?: string | null;
            certificatePassword?: string | null;
            serialNumber: string;
            developerPortalIdentifier?: string | null;
            validityNotBefore: any;
            validityNotAfter: any;
            updatedAt: any;
            appleTeam?: {
                __typename?: 'AppleTeam';
                id: string;
                appleTeamIdentifier: string;
                appleTeamName?: string | null;
            } | null;
            iosAppBuildCredentialsList: Array<{
                __typename?: 'IosAppBuildCredentials';
                id: string;
                iosAppCredentials: {
                    __typename?: 'IosAppCredentials';
                    id: string;
                    app: {
                        __typename?: 'App';
                        id: string;
                        fullName: string;
                        slug: string;
                    };
                    appleAppIdentifier: {
                        __typename?: 'AppleAppIdentifier';
                        id: string;
                        bundleIdentifier: string;
                    };
                };
                provisioningProfile?: {
                    __typename?: 'AppleProvisioningProfile';
                    id: string;
                    developerPortalIdentifier?: string | null;
                } | null;
            }>;
        } | null;
        provisioningProfile?: {
            __typename?: 'AppleProvisioningProfile';
            id: string;
            expiration: any;
            developerPortalIdentifier?: string | null;
            provisioningProfile?: string | null;
            updatedAt: any;
            status: string;
            appleTeam?: {
                __typename?: 'AppleTeam';
                id: string;
                appleTeamIdentifier: string;
                appleTeamName?: string | null;
            } | null;
            appleDevices: Array<{
                __typename?: 'AppleDevice';
                id: string;
                identifier: string;
                name?: string | null;
                model?: string | null;
                deviceClass?: AppleDeviceClass | null;
            }>;
        } | null;
    }>;
    app: {
        __typename?: 'App';
        id: string;
        fullName: string;
        slug: string;
    };
    appleTeam?: {
        __typename?: 'AppleTeam';
        id: string;
        appleTeamIdentifier: string;
        appleTeamName?: string | null;
    } | null;
    appleAppIdentifier: {
        __typename?: 'AppleAppIdentifier';
        id: string;
        bundleIdentifier: string;
    };
    pushKey?: {
        __typename?: 'ApplePushKey';
        id: string;
        keyIdentifier: string;
        updatedAt: any;
        appleTeam?: {
            __typename?: 'AppleTeam';
            id: string;
            appleTeamIdentifier: string;
            appleTeamName?: string | null;
        } | null;
        iosAppCredentialsList: Array<{
            __typename?: 'IosAppCredentials';
            id: string;
            app: {
                __typename?: 'App';
                id: string;
                fullName: string;
                slug: string;
            };
            appleAppIdentifier: {
                __typename?: 'AppleAppIdentifier';
                id: string;
                bundleIdentifier: string;
            };
        }>;
    } | null;
    appStoreConnectApiKeyForSubmissions?: {
        __typename?: 'AppStoreConnectApiKey';
        id: string;
        issuerIdentifier: string;
        keyIdentifier: string;
        name?: string | null;
        roles?: Array<AppStoreConnectUserRole> | null;
        createdAt: any;
        updatedAt: any;
        appleTeam?: {
            __typename?: 'AppleTeam';
            id: string;
            appleTeamIdentifier: string;
            appleTeamName?: string | null;
        } | null;
    } | null;
};
