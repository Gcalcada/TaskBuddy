"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphqlError = exports.withErrorHandlingAsync = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@urql/core");
Object.defineProperty(exports, "GraphqlError", { enumerable: true, get: function () { return core_1.CombinedError; } });
const log_1 = tslib_1.__importDefault(require("../log"));
async function withErrorHandlingAsync(promise) {
    const { data, error } = await promise;
    if (error) {
        if (error.graphQLErrors.some(e => {
            var _a, _b;
            return ((_a = e === null || e === void 0 ? void 0 : e.extensions) === null || _a === void 0 ? void 0 : _a.isTransient) &&
                ![
                    'EAS_BUILD_FREE_TIER_LIMIT_EXCEEDED',
                    'EAS_BUILD_FREE_TIER_IOS_LIMIT_EXCEEDED',
                ].includes((_b = e === null || e === void 0 ? void 0 : e.extensions) === null || _b === void 0 ? void 0 : _b.errorCode);
        })) {
            log_1.default.error(`We've encountered a transient error. Try again shortly.`);
        }
        throw error;
    }
    // Check for malformed response. This only checks the root query existence,
    // It doesn't affect returning responses with empty resultset.
    if (!data) {
        throw new Error('Returned query result data is null!');
    }
    return data;
}
exports.withErrorHandlingAsync = withErrorHandlingAsync;
