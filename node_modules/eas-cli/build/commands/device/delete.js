"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const apple_utils_1 = require("@expo/apple-utils");
const config_1 = require("@expo/config");
const core_1 = require("@oclif/core");
const assert_1 = tslib_1.__importDefault(require("assert"));
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const DeviceUtils_1 = require("../../credentials/ios/actions/DeviceUtils");
const AppleDeviceMutation_1 = require("../../credentials/ios/api/graphql/mutations/AppleDeviceMutation");
const AppleDeviceQuery_1 = require("../../credentials/ios/api/graphql/queries/AppleDeviceQuery");
const AppleTeamQuery_1 = require("../../credentials/ios/api/graphql/queries/AppleTeamQuery");
const authenticate_1 = require("../../credentials/ios/appstore/authenticate");
const formatDevice_1 = tslib_1.__importDefault(require("../../devices/utils/formatDevice"));
const log_1 = tslib_1.__importDefault(require("../../log"));
const ora_1 = require("../../ora");
const projectUtils_1 = require("../../project/projectUtils");
const prompts_1 = require("../../prompts");
class DeviceDelete extends EasCommand_1.default {
    async runAsync() {
        let { flags: { 'apple-team-id': appleTeamIdentifier, udid: udids }, } = await this.parse(DeviceDelete);
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const { exp } = (0, config_1.getConfig)(projectDir, { skipSDKVersionRequirement: true });
        const accountName = await (0, projectUtils_1.getProjectAccountNameAsync)(exp);
        if (!appleTeamIdentifier) {
            appleTeamIdentifier = await this.askForAppleTeamAsync(accountName);
        }
        (0, assert_1.default)(appleTeamIdentifier, 'No team identifier is specified');
        const appleDevicesResult = await this.getDevicesForTeamAsync(accountName, appleTeamIdentifier);
        if (!appleDevicesResult) {
            return;
        }
        const { appleTeamName, appleDevices } = appleDevicesResult;
        const chosenDevices = await this.chooseDevicesToDeleteAsync(appleDevices, udids);
        if (chosenDevices.length === 0) {
            log_1.default.newLine();
            log_1.default.warn('No devices were chosen to be removed.');
            return;
        }
        this.logChosenDevices(chosenDevices, appleTeamName, appleTeamIdentifier);
        const hasRemoved = await this.askAndRemoveFromExpoAsync(chosenDevices);
        if (!hasRemoved) {
            return;
        }
        await this.askAndDisableOnAppleAsync(chosenDevices, appleTeamIdentifier);
    }
    async askAndDisableOnAppleAsync(chosenDevices, appleTeamIdentifier) {
        log_1.default.newLine();
        const deleteOnApple = await (0, prompts_1.toggleConfirmAsync)({
            message: 'Do you want to disable these devices on your Apple account as well?',
        });
        if (!deleteOnApple) {
            return;
        }
        const ctx = await (0, authenticate_1.authenticateAsync)({ teamId: appleTeamIdentifier });
        const context = (0, authenticate_1.getRequestContext)(ctx);
        log_1.default.addNewLineIfNone();
        const removeAppleSpinner = (0, ora_1.ora)('Disabling devices on Apple').start();
        try {
            let realDevices = await apple_utils_1.Device.getAllIOSProfileDevicesAsync(context);
            realDevices = realDevices.filter(d => chosenDevices.map(cd => cd.identifier).includes(d.attributes.udid));
            for (const device of realDevices) {
                await device.updateAsync({ status: apple_utils_1.DeviceStatus.DISABLED });
            }
            removeAppleSpinner.succeed('Disabled devices on Apple');
        }
        catch (err) {
            removeAppleSpinner.fail();
            throw err;
        }
    }
    async askAndRemoveFromExpoAsync(chosenDevices) {
        log_1.default.warn(`You are about to remove the Apple device${chosenDevices.length > 1 ? 's' : ''} listed above from your Expo account.`);
        log_1.default.newLine();
        const confirmed = await (0, prompts_1.toggleConfirmAsync)({
            message: 'Are you sure you wish to proceed?',
        });
        if (confirmed) {
            const removalSpinner = (0, ora_1.ora)(`Removing Apple devices on Expo`).start();
            try {
                for (const chosenDevice of chosenDevices) {
                    await AppleDeviceMutation_1.AppleDeviceMutation.deleteAppleDeviceAsync(chosenDevice.id);
                }
                removalSpinner.succeed('Removed Apple devices from Expo');
            }
            catch (err) {
                removalSpinner.fail();
                throw err;
            }
        }
        return confirmed;
    }
    logChosenDevices(chosenDevices, appleTeamName, appleTeamIdentifier) {
        log_1.default.addNewLineIfNone();
        chosenDevices.forEach(device => {
            log_1.default.log((0, formatDevice_1.default)(device, {
                appleTeamName,
                appleTeamIdentifier: appleTeamIdentifier,
            }));
            log_1.default.newLine();
        });
    }
    async chooseDevicesToDeleteAsync(appleDevices, udids) {
        let chosenDevices = [];
        log_1.default.newLine();
        if (udids) {
            udids.forEach(udid => {
                const foundDevice = appleDevices.find(device => device.identifier === udid);
                if (foundDevice) {
                    chosenDevices.push(foundDevice);
                }
                else {
                    log_1.default.warn(`No device found with UDID ${udid}.`);
                }
            });
        }
        if (chosenDevices.length === 0) {
            log_1.default.addNewLineIfNone();
            chosenDevices = await (0, DeviceUtils_1.chooseDevicesToDeleteAsync)(appleDevices);
            log_1.default.newLine();
        }
        return chosenDevices;
    }
    async getDevicesForTeamAsync(accountName, appleTeamIdentifier) {
        const devicesSpinner = (0, ora_1.ora)().start('Fetching the list of devices for the team…');
        try {
            const result = await AppleDeviceQuery_1.AppleDeviceQuery.getAllForAppleTeamAsync(accountName, appleTeamIdentifier);
            if (result === null || result === void 0 ? void 0 : result.appleDevices.length) {
                const { appleTeamName, appleDevices } = result;
                devicesSpinner.succeed(`Found ${appleDevices.length} devices for team ${appleTeamName !== null && appleTeamName !== void 0 ? appleTeamName : appleTeamIdentifier}`);
                return result;
            }
            else {
                devicesSpinner.fail(`Couldn't find any devices for the team ${appleTeamIdentifier}`);
                return;
            }
        }
        catch (e) {
            devicesSpinner.fail(`Something went wrong and we couldn't fetch the device list`);
            throw e;
        }
    }
    async askForAppleTeamAsync(accountName) {
        const teamSpinner = (0, ora_1.ora)().start('Fetching the list of teams for the project…');
        try {
            const teams = await AppleTeamQuery_1.AppleTeamQuery.getAllForAccountAsync(accountName);
            if (teams.length > 0) {
                teamSpinner.succeed('Fetched the list of teams for the project');
                if (teams.length === 1) {
                    return teams[0].appleTeamIdentifier;
                }
                const result = await (0, prompts_1.promptAsync)({
                    type: 'select',
                    name: 'appleTeamIdentifier',
                    message: 'What Apple Team would you like to list devices for?',
                    choices: teams.map(team => ({
                        title: team.appleTeamName
                            ? `${team.appleTeamName} (ID: ${team.appleTeamIdentifier})`
                            : team.appleTeamIdentifier,
                        value: team.appleTeamIdentifier,
                    })),
                });
                return result.appleTeamIdentifier;
            }
            else {
                teamSpinner.fail(`Couldn't find any teams for the account ${accountName}`);
                return;
            }
        }
        catch (e) {
            teamSpinner.fail(`Something went wrong and we couldn't fetch the list of teams`);
            throw e;
        }
    }
}
exports.default = DeviceDelete;
DeviceDelete.description = 'remove a registered device from your account';
DeviceDelete.flags = {
    'apple-team-id': core_1.Flags.string(),
    udid: core_1.Flags.string({ multiple: true }),
};
