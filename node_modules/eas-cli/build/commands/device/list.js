"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const config_1 = require("@expo/config");
const core_1 = require("@oclif/core");
const assert_1 = tslib_1.__importDefault(require("assert"));
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const AppleDeviceQuery_1 = require("../../credentials/ios/api/graphql/queries/AppleDeviceQuery");
const AppleTeamQuery_1 = require("../../credentials/ios/api/graphql/queries/AppleTeamQuery");
const formatDevice_1 = tslib_1.__importDefault(require("../../devices/utils/formatDevice"));
const log_1 = tslib_1.__importDefault(require("../../log"));
const ora_1 = require("../../ora");
const projectUtils_1 = require("../../project/projectUtils");
const prompts_1 = require("../../prompts");
class BuildList extends EasCommand_1.default {
    async runAsync() {
        let appleTeamIdentifier = (await this.parse(BuildList)).flags['apple-team-id'];
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const { exp } = (0, config_1.getConfig)(projectDir, { skipSDKVersionRequirement: true });
        const accountName = await (0, projectUtils_1.getProjectAccountNameAsync)(exp);
        let spinner;
        if (!appleTeamIdentifier) {
            spinner = (0, ora_1.ora)().start('Fetching the list of teams for the project…');
            try {
                const teams = await AppleTeamQuery_1.AppleTeamQuery.getAllForAccountAsync(accountName);
                if (teams.length > 0) {
                    spinner.succeed();
                    if (teams.length === 1) {
                        appleTeamIdentifier = teams[0].appleTeamIdentifier;
                    }
                    else {
                        const result = await (0, prompts_1.promptAsync)({
                            type: 'select',
                            name: 'appleTeamIdentifier',
                            message: 'What Apple Team would you like to list devices for?',
                            choices: teams.map(team => ({
                                title: team.appleTeamName
                                    ? `${team.appleTeamName} (ID: ${team.appleTeamIdentifier})`
                                    : team.appleTeamIdentifier,
                                value: team.appleTeamIdentifier,
                            })),
                        });
                        appleTeamIdentifier = result.appleTeamIdentifier;
                    }
                }
                else {
                    spinner.fail(`Couldn't find any teams for the account ${accountName}`);
                }
            }
            catch (e) {
                spinner.fail(`Something went wrong and we couldn't fetch the list of teams`);
                throw e;
            }
        }
        (0, assert_1.default)(appleTeamIdentifier, 'No team identifier is specified');
        spinner = (0, ora_1.ora)().start('Fetching the list of devices for the team…');
        try {
            const result = await AppleDeviceQuery_1.AppleDeviceQuery.getAllForAppleTeamAsync(accountName, appleTeamIdentifier);
            if (result === null || result === void 0 ? void 0 : result.appleDevices.length) {
                const { appleTeamName, appleDevices } = result;
                spinner.succeed(`Found ${appleDevices.length} devices for team ${appleTeamName !== null && appleTeamName !== void 0 ? appleTeamName : appleTeamIdentifier}`);
                const list = appleDevices
                    .map(device => (0, formatDevice_1.default)(device, { appleTeamName, appleTeamIdentifier: appleTeamIdentifier }))
                    .join(`\n\n${chalk_1.default.dim('———')}\n\n`);
                log_1.default.log(`\n${list}`);
            }
            else {
                spinner.fail(`Couldn't find any devices for the team ${appleTeamIdentifier}`);
            }
        }
        catch (e) {
            spinner.fail(`Something went wrong and we couldn't fetch the device list`);
            throw e;
        }
    }
}
exports.default = BuildList;
BuildList.description = 'list all registered devices for your account';
BuildList.flags = {
    'apple-team-id': core_1.Flags.string(),
};
