"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const config_1 = require("@expo/config");
const core_1 = require("@oclif/core");
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const client_1 = require("../../graphql/client");
const log_1 = tslib_1.__importDefault(require("../../log"));
const projectUtils_1 = require("../../project/projectUtils");
const prompts_1 = require("../../prompts");
const json_1 = require("../../utils/json");
class ChannelDelete extends EasCommand_1.default {
    async runAsync() {
        var _a, _b;
        const { args: { name: nameArg }, flags: { json: jsonFlag, 'non-interactive': nonInteractiveFlag }, } = await this.parse(ChannelDelete);
        if (jsonFlag && !nonInteractiveFlag) {
            throw new Error('--json is allowed only in non-interactive mode');
        }
        if (jsonFlag) {
            (0, json_1.enableJsonOutput)();
        }
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const { exp } = (0, config_1.getConfig)(projectDir, { skipSDKVersionRequirement: true });
        const fullName = await (0, projectUtils_1.getProjectFullNameAsync)(exp);
        const projectId = await (0, projectUtils_1.getProjectIdAsync)(exp);
        let name;
        if (nameArg) {
            name = nameArg;
        }
        else {
            if (nonInteractiveFlag) {
                throw new Error('Channel name must be set when running in non-interactive mode');
            }
            name = (await (0, prompts_1.promptAsync)({
                type: 'text',
                name: 'name',
                message: 'Please enter the name of the channel to delete:',
                validate: (value) => (value ? true : 'Channel name may not be empty.'),
            })).name;
        }
        const data = await getChannelInfoAsync({ appId: projectId, name });
        const channelId = (_b = (_a = data.app) === null || _a === void 0 ? void 0 : _a.byId.updateChannelByName) === null || _b === void 0 ? void 0 : _b.id;
        if (!channelId) {
            throw new Error(`Could not find channel ${name} on ${fullName}`);
        }
        if (!nonInteractiveFlag) {
            log_1.default.addNewLineIfNone();
            log_1.default.warn(`You are about to permamently delete channel: "${name}".\nThis action is irreversible.`);
            log_1.default.newLine();
            const confirmed = await (0, prompts_1.toggleConfirmAsync)({ message: 'Are you sure you wish to proceed?' });
            if (!confirmed) {
                log_1.default.error(`Canceled deletion of channel: "${name}".`);
                process.exit(1);
            }
        }
        const deletionResult = await deleteChannelOnAppAsync({
            channelId,
        });
        if (jsonFlag) {
            (0, json_1.printJsonOnlyOutput)(deletionResult);
        }
        else {
            log_1.default.withTick(`Ô∏èDeleted channel "${name}".`);
        }
    }
}
exports.default = ChannelDelete;
ChannelDelete.hidden = true;
ChannelDelete.description = 'Delete a channel';
ChannelDelete.args = [
    {
        name: 'name',
        required: false,
        description: 'Name of the channel to delete',
    },
];
ChannelDelete.flags = {
    json: core_1.Flags.boolean({
        description: 'print output as a JSON object',
        default: false,
    }),
    'non-interactive': core_1.Flags.boolean({
        default: false,
        description: 'Run command in non-interactive mode',
    }),
};
async function getChannelInfoAsync({ appId, name, }) {
    const data = await (0, client_1.withErrorHandlingAsync)(client_1.graphqlClient
        .query((0, graphql_tag_1.default) `
          query GetChannelInfo($appId: String!, $name: String!) {
            app {
              byId(appId: $appId) {
                id
                updateChannelByName(name: $name) {
                  id
                  name
                }
              }
            }
          }
        `, {
        appId,
        name,
    }, { additionalTypenames: ['UpdateChannel'] })
        .toPromise());
    return data;
}
async function deleteChannelOnAppAsync({ channelId, }) {
    const data = await (0, client_1.withErrorHandlingAsync)(client_1.graphqlClient
        .mutation((0, graphql_tag_1.default) `
          mutation DeleteUpdateChannel($channelId: ID!) {
            updateChannel {
              deleteUpdateChannel(channelId: $channelId) {
                id
              }
            }
          }
        `, {
        channelId,
    })
        .toPromise());
    return data.updateChannel.deleteUpdateChannel;
}
