"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUpdateChannelOnAppAsync = void 0;
const tslib_1 = require("tslib");
const config_1 = require("@expo/config");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const client_1 = require("../../graphql/client");
const BranchQuery_1 = require("../../graphql/queries/BranchQuery");
const log_1 = tslib_1.__importDefault(require("../../log"));
const projectUtils_1 = require("../../project/projectUtils");
const prompts_1 = require("../../prompts");
const formatFields_1 = tslib_1.__importDefault(require("../../utils/formatFields"));
const json_1 = require("../../utils/json");
const create_1 = require("../branch/create");
async function createUpdateChannelOnAppAsync({ appId, channelName, branchId, }) {
    // Point the new channel at a branch with its same name.
    const branchMapping = JSON.stringify({
        data: [{ branchId, branchMappingLogic: 'true' }],
        version: 0,
    });
    return await (0, client_1.withErrorHandlingAsync)(client_1.graphqlClient
        .mutation((0, graphql_tag_1.default) `
          mutation CreateUpdateChannelOnApp($appId: ID!, $name: String!, $branchMapping: String!) {
            updateChannel {
              createUpdateChannelForApp(appId: $appId, name: $name, branchMapping: $branchMapping) {
                id
                name
                branchMapping
              }
            }
          }
        `, {
        appId,
        name: channelName,
        branchMapping,
    })
        .toPromise());
}
exports.createUpdateChannelOnAppAsync = createUpdateChannelOnAppAsync;
class ChannelCreate extends EasCommand_1.default {
    async runAsync() {
        let { args: { name: channelName }, flags: { json: jsonFlag }, } = await this.parse(ChannelCreate);
        if (jsonFlag) {
            (0, json_1.enableJsonOutput)();
        }
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const { exp } = (0, config_1.getConfig)(projectDir, { skipSDKVersionRequirement: true });
        const projectId = await (0, projectUtils_1.getProjectIdAsync)(exp);
        if (!channelName) {
            const validationMessage = 'Channel name may not be empty.';
            if (jsonFlag) {
                throw new Error(validationMessage);
            }
            ({ name: channelName } = await (0, prompts_1.promptAsync)({
                type: 'text',
                name: 'name',
                message: 'Please name the channel:',
                validate: value => (value ? true : validationMessage),
            }));
        }
        let branchId;
        let branchMessage;
        const existingBranch = await BranchQuery_1.BranchQuery.getBranchByNameAsync({
            appId: projectId,
            name: channelName,
        });
        if (existingBranch) {
            branchId = existingBranch.id;
            branchMessage = `We found a branch with the same name`;
        }
        else {
            const newBranch = await (0, create_1.createUpdateBranchOnAppAsync)({
                appId: projectId,
                name: channelName,
            });
            branchId = newBranch.id;
            branchMessage = `We also went ahead and made a branch with the same name`;
        }
        const { updateChannel: { createUpdateChannelForApp: newChannel }, } = await createUpdateChannelOnAppAsync({
            appId: projectId,
            channelName,
            branchId,
        });
        if (!newChannel) {
            throw new Error(`Could not create channel with name ${channelName} on app with id ${projectId}`);
        }
        if (jsonFlag) {
            (0, json_1.printJsonOnlyOutput)(newChannel);
        }
        else {
            log_1.default.addNewLineIfNone();
            log_1.default.withTick(`Created a new channel on project ${chalk_1.default.bold(await (0, projectUtils_1.getProjectFullNameAsync)(exp))}`);
            log_1.default.log((0, formatFields_1.default)([
                { label: 'Name', value: newChannel.name },
                { label: 'ID', value: newChannel.id },
            ]));
            log_1.default.addNewLineIfNone();
            log_1.default.withTick(`${branchMessage} and have pointed the channel at it.`);
            log_1.default.log((0, formatFields_1.default)([
                { label: 'Name', value: newChannel.name },
                { label: 'ID', value: branchId },
            ]));
            log_1.default.addNewLineIfNone();
            log_1.default.log(chalk_1.default.bold('You can now update your app by publishing!'));
        }
    }
}
exports.default = ChannelCreate;
ChannelCreate.description = 'create a channel';
ChannelCreate.args = [
    {
        name: 'name',
        required: false,
        description: 'Name of the channel to create',
    },
];
ChannelCreate.flags = {
    json: core_1.Flags.boolean({
        description: 'print output as a JSON object with the new channel ID, name and branch mapping.',
        default: false,
    }),
};
