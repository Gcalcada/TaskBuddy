"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const config_1 = require("@expo/config");
const core_1 = require("@oclif/core");
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const client_1 = require("../../graphql/client");
const log_1 = tslib_1.__importDefault(require("../../log"));
const projectUtils_1 = require("../../project/projectUtils");
const formatFields_1 = tslib_1.__importDefault(require("../../utils/formatFields"));
const json_1 = require("../../utils/json");
const view_1 = require("./view");
const CHANNEL_LIMIT = 10000;
async function getAllUpdateChannelForAppAsync({ appId, }) {
    return await (0, client_1.withErrorHandlingAsync)(client_1.graphqlClient
        .query((0, graphql_tag_1.default) `
          query GetAllChannelsForApp($appId: String!, $offset: Int!, $limit: Int!) {
            app {
              byId(appId: $appId) {
                id
                updateChannels(offset: $offset, limit: $limit) {
                  id
                  name
                  branchMapping
                  updateBranches(offset: 0, limit: $limit) {
                    id
                    name
                    updates(offset: 0, limit: 10) {
                      id
                      group
                      message
                      runtimeVersion
                      createdAt
                      platform
                      actor {
                        id
                        ... on User {
                          username
                        }
                        ... on Robot {
                          firstName
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        `, { appId, offset: 0, limit: CHANNEL_LIMIT }, { additionalTypenames: ['UpdateChannel', 'UpdateBranch', 'Update'] })
        .toPromise());
}
class ChannelList extends EasCommand_1.default {
    async runAsync() {
        var _a;
        const { flags: { json: jsonFlag }, } = await this.parse(ChannelList);
        if (jsonFlag) {
            (0, json_1.enableJsonOutput)();
        }
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const { exp } = (0, config_1.getConfig)(projectDir, { skipSDKVersionRequirement: true });
        const projectId = await (0, projectUtils_1.getProjectIdAsync)(exp);
        const getAllUpdateChannelForAppResult = await getAllUpdateChannelForAppAsync({
            appId: projectId,
        });
        const channels = (_a = getAllUpdateChannelForAppResult.app) === null || _a === void 0 ? void 0 : _a.byId.updateChannels;
        if (!channels) {
            throw new Error(`Could not find channels on project with id ${projectId}`);
        }
        if (jsonFlag) {
            (0, json_1.printJsonOnlyOutput)(channels);
        }
        else {
            for (const channel of channels) {
                log_1.default.addNewLineIfNone();
                log_1.default.log((0, formatFields_1.default)([
                    { label: 'Name', value: channel.name },
                    { label: 'ID', value: channel.id },
                ]));
                (0, view_1.logChannelDetails)(channel);
            }
        }
    }
}
exports.default = ChannelList;
ChannelList.description = 'list all channels';
ChannelList.flags = {
    json: core_1.Flags.boolean({
        description: 'print output as a JSON object with the channel ID, name and branch mapping.',
        default: false,
    }),
};
