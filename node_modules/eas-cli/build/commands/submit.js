"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const config_1 = require("@expo/config");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const EasCommand_1 = tslib_1.__importDefault(require("../commandUtils/EasCommand"));
const AppPlatform_1 = require("../graphql/types/AppPlatform");
const log_1 = tslib_1.__importDefault(require("../log"));
const platform_1 = require("../platform");
const projectUtils_1 = require("../project/projectUtils");
const context_1 = require("../submit/context");
const submit_1 = require("../submit/submit");
const urls_1 = require("../submit/utils/urls");
const profiles_1 = require("../utils/profiles");
class Submit extends EasCommand_1.default {
    async runAsync() {
        const { flags: rawFlags } = await this.parse(Submit);
        const flags = await this.sanitizeFlagsAsync(rawFlags);
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const { exp } = (0, config_1.getConfig)(projectDir, { skipSDKVersionRequirement: true });
        const projectId = await (0, projectUtils_1.getProjectIdAsync)(exp);
        const platforms = (0, platform_1.toPlatforms)(flags.requestedPlatform);
        const submissionProfiles = await (0, profiles_1.getProfilesAsync)({
            type: 'submit',
            projectDir,
            platforms,
            profileName: flags.profile,
        });
        const submissions = [];
        for (const submissionProfile of submissionProfiles) {
            const ctx = await (0, context_1.createSubmissionContextAsync)({
                platform: submissionProfile.platform,
                projectDir,
                projectId,
                profile: submissionProfile.profile,
                archiveFlags: flags.archiveFlags,
                nonInteractive: flags.nonInteractive,
            });
            if (submissionProfiles.length > 1) {
                log_1.default.newLine();
                const appPlatform = (0, AppPlatform_1.toAppPlatform)(submissionProfile.platform);
                log_1.default.log(`${platform_1.appPlatformEmojis[appPlatform]} ${chalk_1.default.bold(`${platform_1.appPlatformDisplayNames[appPlatform]} submission`)}`);
            }
            const submission = await (0, submit_1.submitAsync)(ctx);
            submissions.push(submission);
        }
        log_1.default.newLine();
        (0, urls_1.printSubmissionDetailsUrls)(submissions);
        if (flags.wait) {
            await (0, submit_1.waitToCompleteAsync)(submissions, { verbose: flags.verbose });
        }
    }
    async sanitizeFlagsAsync(flags) {
        const { platform, verbose, wait, profile, 'non-interactive': nonInteractive, ...archiveFlags } = flags;
        if (!flags.platform && nonInteractive) {
            core_1.Errors.error('--platform is required when building in non-interactive mode', { exit: 1 });
        }
        const requestedPlatform = await (0, platform_1.selectRequestedPlatformAsync)(flags.platform);
        if (requestedPlatform === platform_1.RequestedPlatform.All) {
            if (archiveFlags.id || archiveFlags.path || archiveFlags.url) {
                core_1.Errors.error('--id, --path, and --url params are only supported when performing a single-platform submit', { exit: 1 });
            }
        }
        return {
            archiveFlags,
            requestedPlatform,
            verbose,
            wait,
            profile,
            nonInteractive,
        };
    }
}
exports.default = Submit;
Submit.description = 'submit app binary to App Store and/or Play Store';
Submit.aliases = ['build:submit'];
Submit.flags = {
    platform: core_1.Flags.enum({
        char: 'p',
        options: ['android', 'ios', 'all'],
    }),
    profile: core_1.Flags.string({
        description: 'Name of the submit profile from eas.json. Defaults to "production" if defined in eas.json.',
    }),
    latest: core_1.Flags.boolean({
        description: 'Submit the latest build for specified platform',
        exclusive: ['id', 'path', 'url'],
    }),
    id: core_1.Flags.string({
        description: 'ID of the build to submit',
        exclusive: ['latest, path, url'],
    }),
    path: core_1.Flags.string({
        description: 'Path to the .apk/.aab/.ipa file',
        exclusive: ['latest', 'id', 'url'],
    }),
    url: core_1.Flags.string({
        description: 'App archive url',
        exclusive: ['latest', 'id', 'path'],
    }),
    verbose: core_1.Flags.boolean({
        description: 'Always print logs from Submission Service',
        default: false,
    }),
    wait: core_1.Flags.boolean({
        description: 'Wait for submission to complete',
        default: true,
        allowNo: true,
    }),
    'non-interactive': core_1.Flags.boolean({
        default: false,
        description: 'Run command in non-interactive mode',
    }),
};
