"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const config_1 = require("@expo/config");
const core_1 = require("@oclif/core");
const formatBuild_1 = require("../../build/utils/formatBuild");
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const BuildQuery_1 = require("../../graphql/queries/BuildQuery");
const log_1 = tslib_1.__importDefault(require("../../log"));
const ora_1 = require("../../ora");
const projectUtils_1 = require("../../project/projectUtils");
const json_1 = require("../../utils/json");
class BuildView extends EasCommand_1.default {
    async runAsync() {
        const { args: { BUILD_ID: buildId }, flags, } = await this.parse(BuildView);
        if (flags.json) {
            (0, json_1.enableJsonOutput)();
        }
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const { exp } = (0, config_1.getConfig)(projectDir, { skipSDKVersionRequirement: true });
        const projectId = await (0, projectUtils_1.getProjectIdAsync)(exp);
        const projectName = await (0, projectUtils_1.getProjectFullNameAsync)(exp);
        const spinner = (0, ora_1.ora)().start('Fetching the buildâ€¦');
        try {
            let build;
            if (buildId) {
                build = await BuildQuery_1.BuildQuery.byIdAsync(buildId);
            }
            else {
                const builds = await BuildQuery_1.BuildQuery.allForAppAsync(projectId, { limit: 1 });
                if (builds.length === 0) {
                    spinner.fail(`Couldn't find any builds for the project ${projectName}`);
                    return;
                }
                build = builds[0];
            }
            if (buildId) {
                spinner.succeed(`Found a matching build for the project ${projectName}`);
            }
            else {
                spinner.succeed(`Showing the last build for the project ${projectName}`);
            }
            if (flags.json) {
                (0, json_1.printJsonOnlyOutput)(build);
            }
            else {
                log_1.default.log(`\n${(0, formatBuild_1.formatGraphQLBuild)(build)}`);
            }
        }
        catch (err) {
            if (buildId) {
                spinner.fail(`Something went wrong and we couldn't fetch the build with id ${buildId}`);
            }
            else {
                spinner.fail(`Something went wrong and we couldn't fetch the last build for the project ${projectName}`);
            }
            throw err;
        }
    }
}
exports.default = BuildView;
BuildView.description = 'view a build for your project';
BuildView.args = [{ name: 'BUILD_ID' }];
BuildView.flags = {
    json: core_1.Flags.boolean({
        description: 'Enable JSON output, non-JSON messages will be printed to stderr',
    }),
};
