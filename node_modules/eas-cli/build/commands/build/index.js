"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleDeprecatedEasJsonAsync = void 0;
const tslib_1 = require("tslib");
const eas_json_1 = require("@expo/eas-json");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const figures_1 = tslib_1.__importDefault(require("figures"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
const runBuildAndSubmit_1 = require("../../build/runBuildAndSubmit");
const repository_1 = require("../../build/utils/repository");
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const log_1 = tslib_1.__importStar(require("../../log"));
const platform_1 = require("../../platform");
const projectUtils_1 = require("../../project/projectUtils");
const prompts_1 = require("../../prompts");
const easCli_1 = require("../../utils/easCli");
const json_1 = require("../../utils/json");
const vcs_1 = require("../../vcs");
const git_1 = tslib_1.__importDefault(require("../../vcs/clients/git"));
class Build extends EasCommand_1.default {
    async runAsync() {
        const { flags: rawFlags } = await this.parse(Build);
        if (rawFlags.json) {
            (0, json_1.enableJsonOutput)();
        }
        const flags = await this.sanitizeFlagsAsync(rawFlags);
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        await handleDeprecatedEasJsonAsync(projectDir, flags.nonInteractive);
        await (0, runBuildAndSubmit_1.runBuildAndSubmitAsync)(projectDir, flags);
    }
    async sanitizeFlagsAsync(flags) {
        var _a;
        const nonInteractive = flags['non-interactive'];
        if (!flags.local && flags.output) {
            core_1.Errors.error('--output is allowed only for local builds', { exit: 1 });
        }
        if (!flags.platform && nonInteractive) {
            core_1.Errors.error('--platform is required when building in non-interactive mode', { exit: 1 });
        }
        if (flags.json && !nonInteractive) {
            core_1.Errors.error('--json is allowed only when building in non-interactive mode', { exit: 1 });
        }
        const requestedPlatform = await (0, platform_1.selectRequestedPlatformAsync)(flags.platform);
        if (flags.local) {
            if (flags['auto-submit'] || flags['auto-submit-with-profile'] !== undefined) {
                // TODO: implement this
                core_1.Errors.error('Auto-submits are not yet supported when building locally', { exit: 1 });
            }
            if (requestedPlatform === platform_1.RequestedPlatform.All) {
                core_1.Errors.error('Builds for multiple platforms are not supported with flag --local', {
                    exit: 1,
                });
            }
            else if (process.platform !== 'darwin' && requestedPlatform === platform_1.RequestedPlatform.Ios) {
                core_1.Errors.error('Unsupported platform, macOS is required to build apps for iOS', { exit: 1 });
            }
        }
        if (flags['skip-credentials-check']) {
            log_1.default.warnDeprecatedFlag('skip-credentials-check', 'Build credentials validation is always skipped with the --non-interactive flag. You can also skip interactively.');
            log_1.default.newLine();
        }
        if (flags['skip-project-configuration']) {
            log_1.default.warnDeprecatedFlag('skip-project-configuration', 'Automatic configuration of native code is no longer optional.');
            log_1.default.newLine();
        }
        const profile = flags['profile'];
        return {
            requestedPlatform,
            profile,
            nonInteractive,
            localBuildOptions: flags['local']
                ? {
                    enable: true,
                    verbose: true,
                    artifactPath: flags.output && path_1.default.resolve(process.cwd(), flags.output),
                }
                : {
                    enable: false,
                },
            wait: flags['wait'],
            clearCache: flags['clear-cache'],
            json: flags['json'],
            autoSubmit: flags['auto-submit'] || flags['auto-submit-with-profile'] !== undefined,
            submitProfile: (_a = flags['auto-submit-with-profile']) !== null && _a !== void 0 ? _a : profile,
        };
    }
}
exports.default = Build;
Build.description = 'start a build';
Build.flags = {
    platform: core_1.Flags.enum({
        char: 'p',
        options: ['android', 'ios', 'all'],
    }),
    'skip-credentials-check': core_1.Flags.boolean({
        default: false,
        hidden: true,
    }),
    json: core_1.Flags.boolean({
        description: 'Enable JSON output, non-JSON messages will be printed to stderr',
        default: false,
    }),
    'skip-project-configuration': core_1.Flags.boolean({
        default: false,
        hidden: true,
    }),
    profile: core_1.Flags.string({
        description: 'Name of the build profile from eas.json. Defaults to "production" if defined in eas.json.',
        helpValue: 'PROFILE_NAME',
    }),
    'non-interactive': core_1.Flags.boolean({
        default: false,
        description: 'Run command in non-interactive mode',
    }),
    local: core_1.Flags.boolean({
        default: false,
        description: 'Run build locally [experimental]',
    }),
    output: core_1.Flags.string({
        description: 'Output path for local build',
    }),
    wait: core_1.Flags.boolean({
        default: true,
        allowNo: true,
        description: 'Wait for build(s) to complete',
    }),
    'clear-cache': core_1.Flags.boolean({
        default: false,
        description: 'Clear cache before the build',
    }),
    'auto-submit': core_1.Flags.boolean({
        default: false,
        description: 'Submit on build complete using the submit profile with the same name as the build profile',
        exclusive: ['auto-submit-with-profile'],
    }),
    'auto-submit-with-profile': core_1.Flags.string({
        description: 'Submit on build complete using the submit profile with provided name',
        helpValue: 'PROFILE_NAME',
        exclusive: ['auto-submit'],
    }),
};
async function handleDeprecatedEasJsonAsync(projectDir, nonInteractive) {
    const easJsonPath = eas_json_1.EasJsonReader.formatEasJsonPath(projectDir);
    if (!(await fs_extra_1.default.pathExists(easJsonPath))) {
        return;
    }
    const easJsonReader = new eas_json_1.EasJsonReader(projectDir);
    const rawEasJson = await easJsonReader.readAsync();
    if (rawEasJson === null || rawEasJson === void 0 ? void 0 : rawEasJson.cli) {
        return;
    }
    if (nonInteractive) {
        log_1.default.warn(`${figures_1.default.warning} Action required: the default behavior of EAS CLI has changed and your eas.json must be updated to remove ambiguity around which Git integration workflow to use. Refer to ${(0, log_1.link)('https://expo.fyi/eas-vcs-workflow')} for more information.`);
        log_1.default.warn('This warning will become an error in an upcoming EAS CLI release. For now, we will proceed with the old default behavior to avoid disruption of your builds.');
        (0, vcs_1.setVcsClient)(new git_1.default());
        return;
    }
    log_1.default.log(`${chalk_1.default.bold('eas-cli@>=0.34.0 no longer requires that you commit changes to Git before starting a build.')} ${(0, log_1.learnMore)('https://expo.fyi/eas-vcs-workflow')}`);
    log_1.default.log(`If you want to continue using the Git integration, you can opt in with ${chalk_1.default.bold('cli.requireCommit')} in ${chalk_1.default.bold('eas.json')} or with the following prompt.`);
    log_1.default.newLine();
    const mode = await (0, prompts_1.selectAsync)('Select your preferred Git integration', [
        { title: 'Require changes to be committed in Git (old default)', value: 'requireCommit' },
        { title: 'Allow builds with dirty Git working tree (new default)', value: 'noCommit' },
    ]);
    if (mode === 'requireCommit') {
        (0, vcs_1.setVcsClient)(new git_1.default());
        await (0, repository_1.ensureRepoIsCleanAsync)(nonInteractive);
    }
    rawEasJson.cli =
        mode === 'requireCommit'
            ? { version: `>= ${easCli_1.easCliVersion}`, requireCommit: true }
            : { version: `>= ${easCli_1.easCliVersion}` };
    await fs_extra_1.default.writeJSON(easJsonPath, rawEasJson, { spaces: 2 });
    log_1.default.withTick('Updated eas.json');
    if (mode === 'requireCommit') {
        await (0, vcs_1.getVcsClient)().trackFileAsync(easJsonPath);
        await (0, repository_1.reviewAndCommitChangesAsync)('Set cli.requireCommit to true in eas.json', {
            nonInteractive,
        });
    }
}
exports.handleDeprecatedEasJsonAsync = handleDeprecatedEasJsonAsync;
