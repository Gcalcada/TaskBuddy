"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const config_1 = require("@expo/config");
const eas_build_job_1 = require("@expo/eas-build-job");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const syncProjectConfiguration_1 = require("../../build/android/syncProjectConfiguration");
const configure_1 = require("../../build/configure");
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const log_1 = tslib_1.__importStar(require("../../log"));
const platform_1 = require("../../platform");
const projectUtils_1 = require("../../project/projectUtils");
const workflow_1 = require("../../project/workflow");
const prompts_1 = require("../../prompts");
const UpdatesModule_1 = require("../../update/android/UpdatesModule");
const UpdatesModule_2 = require("../../update/ios/UpdatesModule");
const vcs_1 = require("../../vcs");
class BuildConfigure extends EasCommand_1.default {
    async runAsync() {
        var _a;
        const { flags } = await this.parse(BuildConfigure);
        log_1.default.log('ðŸ’¡ The following process will configure your iOS and/or Android project to be compatible with EAS Build. These changes only apply to your local project files and you can safely revert them at any time.');
        await (0, vcs_1.getVcsClient)().ensureRepoExistsAsync();
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const expoUpdatesIsInstalled = (0, projectUtils_1.isExpoUpdatesInstalled)(projectDir);
        const platform = (_a = flags.platform) !== null && _a !== void 0 ? _a : (await promptForPlatformAsync());
        // clean up old Android configuration
        if ([platform_1.RequestedPlatform.Android, platform_1.RequestedPlatform.All].includes(platform)) {
            await (0, syncProjectConfiguration_1.cleanUpOldEasBuildGradleScriptAsync)(projectDir);
        }
        // ensure eas.json exists
        log_1.default.newLine();
        await (0, configure_1.ensureProjectConfiguredAsync)({
            projectDir,
            nonInteractive: false,
        });
        // configure expo-updates
        if (expoUpdatesIsInstalled) {
            const { exp } = (0, config_1.getConfig)(projectDir, { skipSDKVersionRequirement: true });
            if ([platform_1.RequestedPlatform.Android, platform_1.RequestedPlatform.All].includes(platform)) {
                const workflow = await (0, workflow_1.resolveWorkflowAsync)(projectDir, eas_build_job_1.Platform.ANDROID);
                if (workflow === eas_build_job_1.Workflow.GENERIC) {
                    await (0, UpdatesModule_1.syncUpdatesConfigurationAsync)(projectDir, exp);
                }
            }
            if ([platform_1.RequestedPlatform.Ios, platform_1.RequestedPlatform.All].includes(platform)) {
                const workflow = await (0, workflow_1.resolveWorkflowAsync)(projectDir, eas_build_job_1.Platform.IOS);
                if (workflow === eas_build_job_1.Workflow.GENERIC) {
                    await (0, UpdatesModule_2.syncUpdatesConfigurationAsync)(projectDir, exp);
                }
            }
        }
        log_1.default.addNewLineIfNone();
        log_1.default.log(`ðŸŽ‰ Your project is ready to build.

- Run ${chalk_1.default.bold('eas build')} when you are ready to create your first build.
- Once the build is completed, run ${chalk_1.default.bold('eas submit')} to upload the app to app stores.
- ${(0, log_1.learnMore)('https://docs.expo.dev/build/introduction', {
            learnMoreMessage: 'Learn more about other capabilities of EAS Build',
        })}`);
    }
}
exports.default = BuildConfigure;
BuildConfigure.description = 'configure the project to support EAS Build';
BuildConfigure.flags = {
    platform: core_1.Flags.enum({
        description: 'Platform to configure',
        char: 'p',
        options: ['android', 'ios', 'all'],
    }),
};
async function promptForPlatformAsync() {
    log_1.default.addNewLineIfNone();
    const { platform } = await (0, prompts_1.promptAsync)({
        type: 'select',
        message: 'Which platforms would you like to configure for EAS Build?',
        name: 'platform',
        choices: [
            {
                title: 'All',
                value: platform_1.RequestedPlatform.All,
            },
            {
                title: 'iOS',
                value: platform_1.RequestedPlatform.Ios,
            },
            {
                title: 'Android',
                value: platform_1.RequestedPlatform.Android,
            },
        ],
    });
    return platform;
}
