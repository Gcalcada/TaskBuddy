"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const config_1 = require("@expo/config");
const core_1 = require("@oclif/core");
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const generated_1 = require("../../graphql/generated");
const WebhookMutation_1 = require("../../graphql/mutations/WebhookMutation");
const ora_1 = require("../../ora");
const projectUtils_1 = require("../../project/projectUtils");
const input_1 = require("../../webhooks/input");
class WebhookCreate extends EasCommand_1.default {
    async runAsync() {
        const { flags } = await this.parse(WebhookCreate);
        const webhookInputParams = await (0, input_1.prepareInputParamsAsync)(flags);
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const { exp } = (0, config_1.getConfig)(projectDir, { skipSDKVersionRequirement: true });
        const projectId = await (0, projectUtils_1.getProjectIdAsync)(exp);
        const spinner = (0, ora_1.ora)('Creating a webhook').start();
        try {
            await WebhookMutation_1.WebhookMutation.createWebhookAsync(projectId, webhookInputParams);
            spinner.succeed('Successfully created a webhook');
        }
        catch (err) {
            spinner.fail('Failed to create a webhook');
            throw err;
        }
    }
}
exports.default = WebhookCreate;
WebhookCreate.description = 'create a webhook';
WebhookCreate.flags = {
    event: core_1.Flags.enum({
        description: 'Event type that triggers the webhook',
        options: [generated_1.WebhookType.Build, generated_1.WebhookType.Submit],
    }),
    url: core_1.Flags.string({
        description: 'Webhook URL',
    }),
    secret: core_1.Flags.string({
        description: "Secret used to create a hash signature of the request payload, provided in the 'Expo-Signature' header.",
    }),
};
