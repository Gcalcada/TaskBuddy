"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.viewUpdateAsync = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const cli_table3_1 = tslib_1.__importDefault(require("cli-table3"));
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const client_1 = require("../../graphql/client");
const log_1 = tslib_1.__importDefault(require("../../log"));
const utils_1 = require("../../update/utils");
const json_1 = require("../../utils/json");
async function viewUpdateAsync({ groupId, }) {
    const data = await (0, client_1.withErrorHandlingAsync)(client_1.graphqlClient
        .query((0, graphql_tag_1.default) `
          query UpdatesByGroup($groupId: ID!) {
            updatesByGroup(group: $groupId) {
              id
              group
              runtimeVersion
              platform
              message
              actor {
                id
                ... on User {
                  username
                }
                ... on Robot {
                  firstName
                }
              }
              createdAt
            }
          }
        `, {
        groupId,
    }, { additionalTypenames: ['Update'] })
        .toPromise());
    if (data.updatesByGroup.length === 0) {
        throw new Error(`Could not find any updates with group ID: "${groupId}"`);
    }
    return data;
}
exports.viewUpdateAsync = viewUpdateAsync;
class UpdateView extends EasCommand_1.default {
    async runAsync() {
        var _a;
        const { args: { groupId }, flags: { json: jsonFlag }, } = await this.parse(UpdateView);
        if (jsonFlag) {
            (0, json_1.enableJsonOutput)();
        }
        const { updatesByGroup } = await viewUpdateAsync({ groupId });
        if (jsonFlag) {
            (0, json_1.printJsonOnlyOutput)(updatesByGroup);
        }
        else {
            const groupTable = new cli_table3_1.default({
                head: [...utils_1.UPDATE_COLUMNS],
                wordWrap: true,
            });
            const representativeUpdate = updatesByGroup[0];
            groupTable.push([
                (0, utils_1.formatUpdate)(representativeUpdate),
                representativeUpdate.runtimeVersion,
                representativeUpdate.group,
                (0, utils_1.getPlatformsForGroup)({
                    updates: updatesByGroup,
                    group: (_a = updatesByGroup[0]) === null || _a === void 0 ? void 0 : _a.group,
                }),
            ]);
            log_1.default.log(groupTable.toString());
        }
    }
}
exports.default = UpdateView;
UpdateView.description = 'update group details';
UpdateView.args = [
    {
        name: 'groupId',
        required: true,
        description: 'The ID of an update group.',
    },
];
UpdateView.flags = {
    json: core_1.Flags.boolean({
        description: `Return a json with the updates belonging to the group.`,
        default: false,
    }),
};
