"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const eas_build_job_1 = require("@expo/eas-build-job");
const envinfo_1 = tslib_1.__importDefault(require("envinfo"));
const EasCommand_1 = tslib_1.__importDefault(require("../commandUtils/EasCommand"));
const log_1 = tslib_1.__importDefault(require("../log"));
const projectUtils_1 = require("../project/projectUtils");
const workflow_1 = require("../project/workflow");
const easCli_1 = require("../utils/easCli");
class Diagnostics extends EasCommand_1.default {
    constructor() {
        super(...arguments);
        this.requiresAuthentication = false;
    }
    async runAsync() {
        const info = await envinfo_1.default.run({
            System: ['OS', 'Shell'],
            Binaries: ['Node', 'Yarn', 'npm'],
            Utilities: ['Git'],
            npmPackages: [
                'expo',
                'expo-cli',
                'react',
                'react-dom',
                'react-native',
                'react-native-web',
                'react-navigation',
                '@expo/webpack-config',
                'expo-dev-client',
                'expo-updates',
            ],
            npmGlobalPackages: ['eas-cli', 'expo-cli'],
        }, {
            title: `EAS CLI ${easCli_1.easCliVersion} environment info`,
        });
        log_1.default.log(info.trimEnd());
        await this.printWorkflowAsync();
        log_1.default.newLine();
    }
    async printWorkflowAsync() {
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const androidWorkflow = await (0, workflow_1.resolveWorkflowAsync)(projectDir, eas_build_job_1.Platform.ANDROID);
        const iosWorkflow = await (0, workflow_1.resolveWorkflowAsync)(projectDir, eas_build_job_1.Platform.IOS);
        if (androidWorkflow === iosWorkflow) {
            log_1.default.log(`    Project workflow: ${androidWorkflow}`);
        }
        else {
            log_1.default.log(`    Project Workflow:`);
            log_1.default.log(`      Android: ${androidWorkflow}`);
            log_1.default.log(`      iOS: ${iosWorkflow}`);
        }
    }
}
exports.default = Diagnostics;
Diagnostics.description = 'display environment info';
