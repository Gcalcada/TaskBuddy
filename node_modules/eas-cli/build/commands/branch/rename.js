"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const config_1 = require("@expo/config");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const client_1 = require("../../graphql/client");
const log_1 = tslib_1.__importDefault(require("../../log"));
const projectUtils_1 = require("../../project/projectUtils");
const prompts_1 = require("../../prompts");
const json_1 = require("../../utils/json");
async function renameUpdateBranchOnAppAsync({ appId, name, newName, }) {
    const data = await (0, client_1.withErrorHandlingAsync)(client_1.graphqlClient
        .mutation((0, graphql_tag_1.default) `
          mutation EditUpdateBranch($input: EditUpdateBranchInput!) {
            updateBranch {
              editUpdateBranch(input: $input) {
                id
                name
              }
            }
          }
        `, {
        input: {
            appId,
            name,
            newName,
        },
    })
        .toPromise());
    return data.updateBranch.editUpdateBranch;
}
class BranchRename extends EasCommand_1.default {
    async runAsync() {
        let { flags: { json: jsonFlag, from: currentName, to: newName }, } = await this.parse(BranchRename);
        if (jsonFlag) {
            (0, json_1.enableJsonOutput)();
        }
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const { exp } = (0, config_1.getConfig)(projectDir, { skipSDKVersionRequirement: true });
        const fullName = await (0, projectUtils_1.getProjectFullNameAsync)(exp);
        const projectId = await (0, projectUtils_1.getProjectIdAsync)(exp);
        if (!currentName) {
            const validationMessage = 'current name may not be empty.';
            if (jsonFlag) {
                throw new Error(validationMessage);
            }
            ({ currentName } = await (0, prompts_1.promptAsync)({
                type: 'text',
                name: 'currentName',
                message: 'Please enter the current name of the branch to rename:',
                validate: value => (value ? true : validationMessage),
            }));
        }
        if (!newName) {
            const validationMessage = 'new name may not be empty.';
            if (jsonFlag) {
                throw new Error(validationMessage);
            }
            ({ newName } = await (0, prompts_1.promptAsync)({
                type: 'text',
                name: 'newName',
                message: `Please rename ${currentName}`,
                validate: value => (value ? true : validationMessage),
            }));
        }
        const editedBranch = await renameUpdateBranchOnAppAsync({
            appId: projectId,
            name: currentName,
            newName: newName,
        });
        if (jsonFlag) {
            (0, json_1.printJsonOnlyOutput)(editedBranch);
        }
        else {
            log_1.default.withTick(`Ô∏èRenamed branch from ${currentName} to ${chalk_1.default.bold(editedBranch.name)} on project ${chalk_1.default.bold(fullName)}.`);
        }
    }
}
exports.default = BranchRename;
BranchRename.description = 'rename a branch';
BranchRename.flags = {
    from: core_1.Flags.string({
        description: 'current name of the branch.',
        required: false,
    }),
    to: core_1.Flags.string({
        description: 'new name of the branch.',
        required: false,
    }),
    json: core_1.Flags.boolean({
        description: `return a json with the edited branch's ID and name.`,
        default: false,
    }),
};
