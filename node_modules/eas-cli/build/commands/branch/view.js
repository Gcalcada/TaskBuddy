"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const config_1 = require("@expo/config");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const cli_table3_1 = tslib_1.__importDefault(require("cli-table3"));
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const UpdateQuery_1 = require("../../graphql/queries/UpdateQuery");
const log_1 = tslib_1.__importDefault(require("../../log"));
const projectUtils_1 = require("../../project/projectUtils");
const prompts_1 = require("../../prompts");
const utils_1 = require("../../update/utils");
const groupBy_1 = tslib_1.__importDefault(require("../../utils/expodash/groupBy"));
const formatFields_1 = tslib_1.__importDefault(require("../../utils/formatFields"));
const json_1 = require("../../utils/json");
class BranchView extends EasCommand_1.default {
    async runAsync() {
        let { args: { name }, flags: { json: jsonFlag }, } = await this.parse(BranchView);
        if (jsonFlag) {
            (0, json_1.enableJsonOutput)();
        }
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const { exp } = (0, config_1.getConfig)(projectDir, { skipSDKVersionRequirement: true });
        const projectId = await (0, projectUtils_1.getProjectIdAsync)(exp);
        if (!name) {
            const validationMessage = 'Branch name may not be empty.';
            if (jsonFlag) {
                throw new Error(validationMessage);
            }
            ({ name } = await (0, prompts_1.promptAsync)({
                type: 'text',
                name: 'name',
                message: 'Please enter the name of the branch to view:',
                validate: value => (value ? true : validationMessage),
            }));
        }
        const { app } = await UpdateQuery_1.UpdateQuery.viewBranchAsync({
            appId: projectId,
            name,
        });
        const UpdateBranch = app === null || app === void 0 ? void 0 : app.byId.updateBranchByName;
        if (!UpdateBranch) {
            throw new Error(`Could not find branch "${name}"`);
        }
        const updates = Object.values((0, groupBy_1.default)(UpdateBranch.updates, u => u.group)).map(group => group[0]);
        if (jsonFlag) {
            (0, json_1.printJsonOnlyOutput)({ ...UpdateBranch, updates });
        }
        else {
            const groupTable = new cli_table3_1.default({
                head: utils_1.UPDATE_COLUMNS,
                wordWrap: true,
            });
            for (const update of updates) {
                groupTable.push([
                    (0, utils_1.formatUpdate)(update),
                    update.runtimeVersion,
                    update.group,
                    (0, utils_1.getPlatformsForGroup)({
                        updates: UpdateBranch.updates,
                        group: update.group,
                    }),
                ]);
            }
            log_1.default.addNewLineIfNone();
            log_1.default.log(chalk_1.default.bold('Branch:'));
            log_1.default.log((0, formatFields_1.default)([
                { label: 'Name', value: UpdateBranch.name },
                { label: 'ID', value: UpdateBranch.id },
            ]));
            log_1.default.addNewLineIfNone();
            log_1.default.log(chalk_1.default.bold('Recently published update groups:'));
            log_1.default.log(groupTable.toString());
        }
    }
}
exports.default = BranchView;
BranchView.description = 'view a branch';
BranchView.args = [
    {
        name: 'name',
        required: false,
        description: 'Name of the branch to view',
    },
];
BranchView.flags = {
    json: core_1.Flags.boolean({
        description: `return a json with the branch's ID name and recent update groups.`,
        default: false,
    }),
};
