"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const config_1 = require("@expo/config");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const client_1 = require("../../graphql/client");
const log_1 = tslib_1.__importDefault(require("../../log"));
const projectUtils_1 = require("../../project/projectUtils");
const prompts_1 = require("../../prompts");
const json_1 = require("../../utils/json");
async function getBranchInfoAsync({ appId, name, }) {
    const data = await (0, client_1.withErrorHandlingAsync)(client_1.graphqlClient
        .query((0, graphql_tag_1.default) `
          query GetBranchInfo($appId: String!, $name: String!) {
            app {
              byId(appId: $appId) {
                id
                updateBranchByName(name: $name) {
                  id
                  name
                }
              }
            }
          }
        `, {
        appId,
        name,
    }, { additionalTypenames: ['UpdateBranch'] })
        .toPromise());
    return data;
}
async function deleteBranchOnAppAsync({ branchId, }) {
    const data = await (0, client_1.withErrorHandlingAsync)(client_1.graphqlClient
        .mutation((0, graphql_tag_1.default) `
          mutation DeleteUpdateBranch($branchId: ID!) {
            updateBranch {
              deleteUpdateBranch(branchId: $branchId) {
                id
              }
            }
          }
        `, {
        branchId,
    })
        .toPromise());
    return data.updateBranch.deleteUpdateBranch;
}
class BranchDelete extends EasCommand_1.default {
    async runAsync() {
        var _a, _b;
        let { args: { name }, flags: { json: jsonFlag }, } = await this.parse(BranchDelete);
        if (jsonFlag) {
            (0, json_1.enableJsonOutput)();
        }
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const { exp } = (0, config_1.getConfig)(projectDir, { skipSDKVersionRequirement: true });
        const fullName = await (0, projectUtils_1.getProjectFullNameAsync)(exp);
        const projectId = await (0, projectUtils_1.getProjectIdAsync)(exp);
        if (!name) {
            const validationMessage = 'branch name may not be empty.';
            if (jsonFlag) {
                throw new Error(validationMessage);
            }
            ({ name } = await (0, prompts_1.promptAsync)({
                type: 'text',
                name: 'name',
                message: 'Please enter the name of the branch to delete:',
                validate: value => (value ? true : validationMessage),
            }));
        }
        const data = await getBranchInfoAsync({ appId: projectId, name });
        const branchId = (_b = (_a = data.app) === null || _a === void 0 ? void 0 : _a.byId.updateBranchByName) === null || _b === void 0 ? void 0 : _b.id;
        if (!branchId) {
            throw new Error(`Could not find branch ${name} on ${fullName}`);
        }
        if (!jsonFlag) {
            log_1.default.addNewLineIfNone();
            log_1.default.warn(`You are about to permamently delete branch: "${name}" and all of the updates published on it.` +
                `\nThis action is irreversible.`);
            log_1.default.newLine();
            const confirmed = await (0, prompts_1.toggleConfirmAsync)({ message: 'Are you sure you wish to proceed?' });
            if (!confirmed) {
                log_1.default.error(`Cancelled deletion of branch: "${name}".`);
                process.exit(1);
            }
        }
        const deletionResult = await deleteBranchOnAppAsync({
            branchId,
        });
        if (jsonFlag) {
            (0, json_1.printJsonOnlyOutput)(deletionResult);
        }
        else {
            log_1.default.withTick(`Ô∏èDeleted branch "${name}" and all of its updates on project ${chalk_1.default.bold(fullName)}.`);
        }
    }
}
exports.default = BranchDelete;
BranchDelete.description = 'delete a branch';
BranchDelete.args = [
    {
        name: 'name',
        required: false,
        description: 'Name of the branch to delete',
    },
];
BranchDelete.flags = {
    json: core_1.Flags.boolean({
        description: `return JSON with the edited branch's ID and name.`,
        default: false,
    }),
};
