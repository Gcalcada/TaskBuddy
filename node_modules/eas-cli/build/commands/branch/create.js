"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUpdateBranchOnAppAsync = void 0;
const tslib_1 = require("tslib");
const config_1 = require("@expo/config");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const client_1 = require("../../graphql/client");
const log_1 = tslib_1.__importDefault(require("../../log"));
const projectUtils_1 = require("../../project/projectUtils");
const prompts_1 = require("../../prompts");
const json_1 = require("../../utils/json");
const vcs_1 = require("../../vcs");
async function createUpdateBranchOnAppAsync({ appId, name, }) {
    const result = await (0, client_1.withErrorHandlingAsync)(client_1.graphqlClient
        .mutation((0, graphql_tag_1.default) `
          mutation createUpdateBranchForApp($appId: ID!, $name: String!) {
            updateBranch {
              createUpdateBranchForApp(appId: $appId, name: $name) {
                id
                name
              }
            }
          }
        `, {
        appId,
        name,
    })
        .toPromise());
    const newBranch = result.updateBranch.createUpdateBranchForApp;
    if (!newBranch) {
        throw new Error(`Could not create branch ${name}.`);
    }
    return newBranch;
}
exports.createUpdateBranchOnAppAsync = createUpdateBranchOnAppAsync;
class BranchCreate extends EasCommand_1.default {
    async runAsync() {
        let { args: { name }, flags, } = await this.parse(BranchCreate);
        if (flags.json) {
            (0, json_1.enableJsonOutput)();
        }
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const { exp } = (0, config_1.getConfig)(projectDir, { skipSDKVersionRequirement: true });
        const fullName = await (0, projectUtils_1.getProjectFullNameAsync)(exp);
        const projectId = await (0, projectUtils_1.getProjectIdAsync)(exp);
        if (!name) {
            const validationMessage = 'Branch name may not be empty.';
            if (flags.json) {
                throw new Error(validationMessage);
            }
            ({ name } = await (0, prompts_1.promptAsync)({
                type: 'text',
                name: 'name',
                message: 'Please name the branch:',
                initial: (await (0, vcs_1.getVcsClient)().getBranchNameAsync()) ||
                    `branch-${Math.random().toString(36).substr(2, 4)}`,
                validate: value => (value ? true : validationMessage),
            }));
        }
        const newBranch = await createUpdateBranchOnAppAsync({ appId: projectId, name });
        if (flags.json) {
            (0, json_1.printJsonOnlyOutput)(newBranch);
        }
        else {
            log_1.default.withTick(`Ô∏èCreated a new branch: ${chalk_1.default.bold(newBranch.name)} on project ${chalk_1.default.bold(fullName)}.`);
        }
    }
}
exports.default = BranchCreate;
BranchCreate.description = 'create a branch';
BranchCreate.args = [
    {
        name: 'name',
        required: false,
        description: 'Name of the branch to create',
    },
];
BranchCreate.flags = {
    json: core_1.Flags.boolean({
        description: 'return a json with the new branch ID and name.',
        default: false,
    }),
};
