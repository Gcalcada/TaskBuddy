"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const config_1 = require("@expo/config");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const cli_table3_1 = tslib_1.__importDefault(require("cli-table3"));
const dateformat_1 = tslib_1.__importDefault(require("dateformat"));
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const EnvironmentSecretsQuery_1 = require("../../graphql/queries/EnvironmentSecretsQuery");
const log_1 = tslib_1.__importDefault(require("../../log"));
const projectUtils_1 = require("../../project/projectUtils");
class EnvironmentSecretList extends EasCommand_1.default {
    async runAsync() {
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const { exp } = (0, config_1.getConfig)(projectDir, { skipSDKVersionRequirement: true });
        const projectId = await (0, projectUtils_1.getProjectIdAsync)(exp);
        const projectAccountName = await (0, projectUtils_1.getProjectAccountNameAsync)(exp);
        if (!projectDir) {
            throw new Error("Please run this command inside your project's directory");
        }
        const secrets = await EnvironmentSecretsQuery_1.EnvironmentSecretsQuery.allAsync(projectAccountName, projectId);
        const table = new cli_table3_1.default({
            head: ['Name', 'Scope', 'ID', 'Updated at'],
            wordWrap: true,
        });
        for (const secret of secrets) {
            const { name, createdAt: updatedAt, scope, id } = secret;
            table.push([name, scope, id, (0, dateformat_1.default)(updatedAt, 'mmm dd HH:MM:ss')]);
        }
        log_1.default.log((0, chalk_1.default) `{bold Secrets for this account and project:}`);
        log_1.default.log(table.toString());
    }
}
exports.default = EnvironmentSecretList;
EnvironmentSecretList.description = 'list environment secrets available for your current app';
