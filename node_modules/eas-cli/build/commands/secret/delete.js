"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const config_1 = require("@expo/config");
const core_1 = require("@oclif/core");
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const EnvironmentSecretMutation_1 = require("../../graphql/mutations/EnvironmentSecretMutation");
const EnvironmentSecretsQuery_1 = require("../../graphql/queries/EnvironmentSecretsQuery");
const log_1 = tslib_1.__importDefault(require("../../log"));
const projectUtils_1 = require("../../project/projectUtils");
const prompts_1 = require("../../prompts");
class EnvironmentSecretDelete extends EasCommand_1.default {
    async runAsync() {
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const { exp } = (0, config_1.getConfig)(projectDir, { skipSDKVersionRequirement: true });
        const projectId = await (0, projectUtils_1.getProjectIdAsync)(exp);
        const projectAccountName = await (0, projectUtils_1.getProjectAccountNameAsync)(exp);
        let { flags: { id }, } = await this.parse(EnvironmentSecretDelete);
        let secret;
        if (!id) {
            const validationMessage = 'You must select which secret to delete.';
            const secrets = await EnvironmentSecretsQuery_1.EnvironmentSecretsQuery.allAsync(projectAccountName, projectId);
            ({ secret } = await (0, prompts_1.promptAsync)({
                type: 'autocomplete',
                name: 'secret',
                message: 'Pick the secret to be deleted:',
                choices: secrets.map(secret => ({
                    title: `${secret.name} (${secret.scope})`,
                    value: secret,
                })),
            }));
            id = secret === null || secret === void 0 ? void 0 : secret.id;
            if (!id) {
                throw new Error(validationMessage);
            }
        }
        log_1.default.addNewLineIfNone();
        log_1.default.warn(`You are about to permamently delete secret${(secret === null || secret === void 0 ? void 0 : secret.name) ? ` "${secret === null || secret === void 0 ? void 0 : secret.name}"` : ''} with id: "${id}".\nThis action is irreversible.`);
        log_1.default.newLine();
        const confirmed = await (0, prompts_1.toggleConfirmAsync)({
            message: `Are you sure you wish to proceed?${(secret === null || secret === void 0 ? void 0 : secret.scope) === EnvironmentSecretsQuery_1.EnvironmentSecretScope.ACCOUNT
                ? ' This secret is applied across your whole account and may affect multiple apps.'
                : ''}`,
        });
        if (!confirmed) {
            log_1.default.error(`Canceled deletion of secret${(secret === null || secret === void 0 ? void 0 : secret.name) ? ` "${secret === null || secret === void 0 ? void 0 : secret.name}"` : ''} with id: "${id}".`);
            process.exit(1);
        }
        await EnvironmentSecretMutation_1.EnvironmentSecretMutation.deleteAsync(id);
        log_1.default.withTick(`Ô∏èDeleted secret${(secret === null || secret === void 0 ? void 0 : secret.name) ? ` "${secret === null || secret === void 0 ? void 0 : secret.name}"` : ''} with id "${id}".`);
    }
}
exports.default = EnvironmentSecretDelete;
EnvironmentSecretDelete.description = 'delete an environment secret by ID';
EnvironmentSecretDelete.flags = {
    id: core_1.Flags.string({
        description: 'ID of the secret to delete',
    }),
};
