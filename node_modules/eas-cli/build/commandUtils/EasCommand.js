"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const eas_json_1 = require("@expo/eas-json");
const core_1 = require("@oclif/core");
const semver_1 = tslib_1.__importDefault(require("semver"));
const rudderstackClient_1 = require("../analytics/rudderstackClient");
const projectUtils_1 = require("../project/projectUtils");
const User_1 = require("../user/User");
const actions_1 = require("../user/actions");
const easCli_1 = require("../utils/easCli");
const vcs_1 = require("../vcs");
const git_1 = tslib_1.__importDefault(require("../vcs/clients/git"));
class EasCommand extends core_1.Command {
    constructor() {
        super(...arguments);
        /**
         * When user data is unavailable locally, determines if the command will
         * force the user to log in
         */
        this.requiresAuthentication = true;
        this.mustBeRunInsideProject = true;
    }
    // eslint-disable-next-line async-protect/async-suffix
    async run() {
        var _a;
        await (0, rudderstackClient_1.initAsync)();
        if (this.mustBeRunInsideProject) {
            await this.applyCliConfigAsync();
        }
        if (this.requiresAuthentication) {
            const { flags } = await this.parse();
            const nonInteractive = (_a = flags['non-interactive']) !== null && _a !== void 0 ? _a : false;
            await (0, actions_1.ensureLoggedInAsync)({ nonInteractive });
        }
        else {
            await (0, User_1.getUserAsync)();
        }
        (0, rudderstackClient_1.logEvent)(rudderstackClient_1.AnalyticsEvent.ACTION, {
            // id is assigned by oclif in constructor based on the filepath:
            // commands/submit === submit, commands/build/list === build:list
            action: `eas ${this.id}`,
        });
        return this.runAsync();
    }
    // eslint-disable-next-line async-protect/async-suffix
    async finally(err) {
        await (0, rudderstackClient_1.flushAsync)();
        return super.finally(err);
    }
    async applyCliConfigAsync() {
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const easJsonReader = new eas_json_1.EasJsonReader(projectDir);
        const config = await easJsonReader.getCliConfigAsync();
        if ((config === null || config === void 0 ? void 0 : config.version) && !semver_1.default.satisfies(easCli_1.easCliVersion, config.version)) {
            throw new Error(`You are on eas-cli@${easCli_1.easCliVersion} which does not satisfy the CLI version constraint in eas.json (${config.version})`);
        }
        if (config === null || config === void 0 ? void 0 : config.requireCommit) {
            (0, vcs_1.setVcsClient)(new git_1.default());
        }
    }
}
exports.default = EasCommand;
