"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSubmissionContextAsync = void 0;
const uuid_1 = require("uuid");
const events_1 = require("../analytics/events");
const context_1 = require("../credentials/context");
const expoConfig_1 = require("../project/expoConfig");
const projectUtils_1 = require("../project/projectUtils");
const Account_1 = require("../user/Account");
const actions_1 = require("../user/actions");
async function createSubmissionContextAsync(params) {
    var _a;
    const { applicationIdentifier, projectDir, nonInteractive } = params;
    const exp = (0, expoConfig_1.getExpoConfig)(projectDir, { env: params.env });
    const { env, ...rest } = params;
    const user = await (0, actions_1.ensureLoggedInAsync)();
    const projectName = exp.slug;
    const accountName = (0, projectUtils_1.getProjectAccountName)(exp, user);
    const accountId = (_a = (0, Account_1.findAccountByName)(user.accounts, accountName)) === null || _a === void 0 ? void 0 : _a.id;
    let credentialsCtx = params.credentialsCtx;
    if (!credentialsCtx) {
        credentialsCtx = new context_1.CredentialsContext({ projectDir, user, exp, nonInteractive });
    }
    const trackingCtx = {
        tracking_id: (0, uuid_1.v4)(),
        platform: params.platform,
        ...(accountId && { account_id: accountId }),
        project_id: params.projectId,
    };
    events_1.Analytics.logEvent(events_1.SubmissionEvent.SUBMIT_COMMAND, trackingCtx);
    return {
        ...rest,
        accountName,
        credentialsCtx,
        exp,
        projectName,
        user,
        trackingCtx,
        applicationIdentifierOverride: applicationIdentifier,
    };
}
exports.createSubmissionContextAsync = createSubmissionContextAsync;
