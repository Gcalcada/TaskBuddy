"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFromCredentialsServiceAsync = exports.CREDENTIALS_SERVICE_SOURCE = void 0;
const tslib_1 = require("tslib");
const nullthrows_1 = tslib_1.__importDefault(require("nullthrows"));
const SetUpSubmissionCredentials_1 = require("../../credentials/ios/actions/SetUpSubmissionCredentials");
const log_1 = tslib_1.__importDefault(require("../../log"));
const bundleIdentifier_1 = require("../../project/ios/bundleIdentifier");
const prompts_1 = require("../../prompts");
const Account_1 = require("../../user/Account");
const AppSpecificPasswordSource_1 = require("./AppSpecificPasswordSource");
/**
 * The Credentials Service will either return an ASC API Key or an App Specific Password
 * When we no longer support the App Specific Password user prompt, refactor this into the AscApiKeySource
 */
exports.CREDENTIALS_SERVICE_SOURCE = 'CREDENTIALS_SERVICE_SOURCE';
async function promptForBundleIdentifierAsync() {
    const { bundleIdentifier } = await (0, prompts_1.promptAsync)({
        name: 'bundleIdentifier',
        message: 'Bundle identifier:',
        type: 'text',
        validate: value => ((0, bundleIdentifier_1.isBundleIdentifierValid)(value) ? true : bundleIdentifier_1.INVALID_BUNDLE_IDENTIFIER_MESSAGE),
    });
    return bundleIdentifier;
}
async function getFromCredentialsServiceAsync(ctx, source) {
    var _a;
    const bundleIdentifier = (_a = source.bundleIdentifier) !== null && _a !== void 0 ? _a : (await promptForBundleIdentifierAsync());
    log_1.default.log(`Looking up credentials configuration for ${bundleIdentifier}...`);
    const appLookupParams = {
        account: (0, nullthrows_1.default)((0, Account_1.findAccountByName)(ctx.user.accounts, ctx.accountName), `You do not have access to account: ${ctx.accountName}`),
        projectName: ctx.projectName,
        bundleIdentifier,
    };
    const setupSubmissionCredentialsAction = new SetUpSubmissionCredentials_1.SetUpSubmissionCredentials(appLookupParams);
    const ascOrAsp = await setupSubmissionCredentialsAction.runAsync(ctx.credentialsCtx);
    const isAppSpecificPassword = typeof ascOrAsp === 'string';
    if (isAppSpecificPassword) {
        return {
            appSpecificPassword: {
                password: ascOrAsp,
                appleIdUsername: await (0, AppSpecificPasswordSource_1.getAppleIdUsernameAsync)(ctx),
            },
        };
    }
    else {
        const ascKeyForSubmissions = (0, nullthrows_1.default)(ascOrAsp.appStoreConnectApiKeyForSubmissions, `An EAS Submit ASC API Key could not be found for ${ascOrAsp.appleAppIdentifier.bundleIdentifier}`);
        const { id, keyIdentifier, name } = ascKeyForSubmissions;
        return {
            ascApiKeyResult: {
                result: {
                    ascApiKeyId: id,
                },
                summary: {
                    source: 'EAS servers',
                    keyId: keyIdentifier,
                    name: name !== null && name !== void 0 ? name : undefined,
                },
            },
        };
    }
}
exports.getFromCredentialsServiceAsync = getFromCredentialsServiceAsync;
