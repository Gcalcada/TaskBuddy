"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAscApiKeyPathAsync = exports.getAscApiKeyLocallyAsync = exports.AscApiKeySourceType = void 0;
const tslib_1 = require("tslib");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const AscApiKeyUtils_1 = require("../../credentials/ios/actions/AscApiKeyUtils");
const log_1 = tslib_1.__importDefault(require("../../log"));
const files_1 = require("../utils/files");
var AscApiKeySourceType;
(function (AscApiKeySourceType) {
    AscApiKeySourceType[AscApiKeySourceType["path"] = 0] = "path";
    AscApiKeySourceType[AscApiKeySourceType["prompt"] = 1] = "prompt";
})(AscApiKeySourceType = exports.AscApiKeySourceType || (exports.AscApiKeySourceType = {}));
async function getAscApiKeyLocallyAsync(ctx, source) {
    const ascApiKeyPath = await getAscApiKeyPathAsync(ctx, source);
    const { keyP8Path, keyId, issuerId } = ascApiKeyPath;
    const keyP8 = await fs_extra_1.default.readFile(keyP8Path, 'utf-8');
    return {
        result: { keyP8, keyId, issuerId },
        summary: {
            source: 'local',
            path: keyP8Path,
            keyId,
        },
    };
}
exports.getAscApiKeyLocallyAsync = getAscApiKeyLocallyAsync;
async function getAscApiKeyPathAsync(ctx, source) {
    switch (source.sourceType) {
        case AscApiKeySourceType.path:
            return await handlePathSourceAsync(ctx, source);
        case AscApiKeySourceType.prompt:
            return await handlePromptSourceAsync(ctx, source);
    }
}
exports.getAscApiKeyPathAsync = getAscApiKeyPathAsync;
async function handlePathSourceAsync(ctx, source) {
    const { keyP8Path } = source.path;
    if (!(await (0, files_1.isExistingFileAsync)(keyP8Path))) {
        log_1.default.warn(`File ${keyP8Path} doesn't exist.`);
        return await getAscApiKeyPathAsync(ctx, { sourceType: AscApiKeySourceType.prompt });
    }
    return source.path;
}
async function handlePromptSourceAsync(ctx, _source) {
    const ascApiKeyPath = await (0, AscApiKeyUtils_1.promptForAscApiKeyPathAsync)(ctx.credentialsCtx);
    return await getAscApiKeyPathAsync(ctx, {
        sourceType: AscApiKeySourceType.path,
        path: ascApiKeyPath,
    });
}
