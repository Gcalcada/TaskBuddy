"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatProjectFullName = exports.getGoogleServiceAccountKeysForAccountAsync = exports.deleteGoogleServiceAccountKeyAsync = exports.createGoogleServiceAccountKeyAsync = exports.deleteFcmAsync = exports.createFcmAsync = exports.deleteKeystoreAsync = exports.createKeystoreAsync = exports.createOrUpdateDefaultIosAppBuildCredentialsAsync = exports.createOrUpdateAndroidAppBuildCredentialsByNameAsync = exports.getAndroidAppBuildCredentialsByNameAsync = exports.getDefaultAndroidAppBuildCredentialsAsync = exports.createAndroidAppBuildCredentialsAsync = exports.updateAndroidAppBuildCredentialsAsync = exports.updateAndroidAppCredentialsAsync = exports.createOrGetExistingAndroidAppCredentialsWithBuildCredentialsAsync = exports.getLegacyAndroidAppBuildCredentialsAsync = exports.getLegacyAndroidAppCredentialsWithCommonFieldsAsync = exports.getAndroidAppBuildCredentialsListAsync = exports.getAndroidAppCredentialsWithCommonFieldsAsync = void 0;
const AppQuery_1 = require("../../ios/api/graphql/queries/AppQuery");
const AndroidAppBuildCredentialsMutation_1 = require("./graphql/mutations/AndroidAppBuildCredentialsMutation");
const AndroidAppCredentialsMutation_1 = require("./graphql/mutations/AndroidAppCredentialsMutation");
const AndroidFcmMutation_1 = require("./graphql/mutations/AndroidFcmMutation");
const AndroidKeystoreMutation_1 = require("./graphql/mutations/AndroidKeystoreMutation");
const GoogleServiceAccountKeyMutation_1 = require("./graphql/mutations/GoogleServiceAccountKeyMutation");
const AndroidAppCredentialsQuery_1 = require("./graphql/queries/AndroidAppCredentialsQuery");
const GoogleServiceAccountKeyQuery_1 = require("./graphql/queries/GoogleServiceAccountKeyQuery");
async function getAndroidAppCredentialsWithCommonFieldsAsync(appLookupParams) {
    const { androidApplicationIdentifier } = appLookupParams;
    const projectFullName = (0, exports.formatProjectFullName)(appLookupParams);
    return await AndroidAppCredentialsQuery_1.AndroidAppCredentialsQuery.withCommonFieldsByApplicationIdentifierAsync(projectFullName, {
        androidApplicationIdentifier,
        legacyOnly: false,
    });
}
exports.getAndroidAppCredentialsWithCommonFieldsAsync = getAndroidAppCredentialsWithCommonFieldsAsync;
async function getAndroidAppBuildCredentialsListAsync(appLookupParams) {
    var _a;
    const appCredentials = await getAndroidAppCredentialsWithCommonFieldsAsync(appLookupParams);
    return (_a = appCredentials === null || appCredentials === void 0 ? void 0 : appCredentials.androidAppBuildCredentialsList) !== null && _a !== void 0 ? _a : [];
}
exports.getAndroidAppBuildCredentialsListAsync = getAndroidAppBuildCredentialsListAsync;
/* There is at most one set of legacy android app credentials associated with an Expo App */
async function getLegacyAndroidAppCredentialsWithCommonFieldsAsync(appLookupParams) {
    const projectFullName = (0, exports.formatProjectFullName)(appLookupParams);
    return await AndroidAppCredentialsQuery_1.AndroidAppCredentialsQuery.withCommonFieldsByApplicationIdentifierAsync(projectFullName, {
        legacyOnly: true,
    });
}
exports.getLegacyAndroidAppCredentialsWithCommonFieldsAsync = getLegacyAndroidAppCredentialsWithCommonFieldsAsync;
/* There is at most one set of legacy android app build credentials associated with an Expo App */
async function getLegacyAndroidAppBuildCredentialsAsync(appLookupParams) {
    var _a;
    const legacyAppCredentials = await getLegacyAndroidAppCredentialsWithCommonFieldsAsync(appLookupParams);
    return (_a = legacyAppCredentials === null || legacyAppCredentials === void 0 ? void 0 : legacyAppCredentials.androidAppBuildCredentialsList[0]) !== null && _a !== void 0 ? _a : null;
}
exports.getLegacyAndroidAppBuildCredentialsAsync = getLegacyAndroidAppBuildCredentialsAsync;
async function createOrGetExistingAndroidAppCredentialsWithBuildCredentialsAsync(appLookupParams) {
    const maybeAndroidAppCredentials = await getAndroidAppCredentialsWithCommonFieldsAsync(appLookupParams);
    if (maybeAndroidAppCredentials) {
        return maybeAndroidAppCredentials;
    }
    else {
        const app = await getAppAsync(appLookupParams);
        return await AndroidAppCredentialsMutation_1.AndroidAppCredentialsMutation.createAndroidAppCredentialsAsync({}, app.id, appLookupParams.androidApplicationIdentifier);
    }
}
exports.createOrGetExistingAndroidAppCredentialsWithBuildCredentialsAsync = createOrGetExistingAndroidAppCredentialsWithBuildCredentialsAsync;
async function updateAndroidAppCredentialsAsync(appCredentials, { androidFcmId, googleServiceAccountKeyForSubmissionsId, }) {
    let updatedAppCredentials = appCredentials;
    if (androidFcmId) {
        updatedAppCredentials = await AndroidAppCredentialsMutation_1.AndroidAppCredentialsMutation.setFcmKeyAsync(appCredentials.id, androidFcmId);
    }
    if (googleServiceAccountKeyForSubmissionsId) {
        updatedAppCredentials =
            await AndroidAppCredentialsMutation_1.AndroidAppCredentialsMutation.setGoogleServiceAccountKeyForSubmissionsAsync(appCredentials.id, googleServiceAccountKeyForSubmissionsId);
    }
    return updatedAppCredentials;
}
exports.updateAndroidAppCredentialsAsync = updateAndroidAppCredentialsAsync;
async function updateAndroidAppBuildCredentialsAsync(buildCredentials, { androidKeystoreId, }) {
    return await AndroidAppBuildCredentialsMutation_1.AndroidAppBuildCredentialsMutation.setKeystoreAsync(buildCredentials.id, androidKeystoreId);
}
exports.updateAndroidAppBuildCredentialsAsync = updateAndroidAppBuildCredentialsAsync;
async function createAndroidAppBuildCredentialsAsync(appLookupParams, { name, isDefault, androidKeystoreId, }) {
    var _a;
    const androidAppCredentials = await createOrGetExistingAndroidAppCredentialsWithBuildCredentialsAsync(appLookupParams);
    const buildCredentialsList = androidAppCredentials.androidAppBuildCredentialsList;
    const existingDefaultBuildCredentials = (_a = buildCredentialsList.find(buildCredentials => buildCredentials.isDefault)) !== null && _a !== void 0 ? _a : null;
    if (existingDefaultBuildCredentials && isDefault) {
        throw new Error('Cannot create new default Android Build Credentials. A set of default credentials exists already.');
    }
    return await AndroidAppBuildCredentialsMutation_1.AndroidAppBuildCredentialsMutation.createAndroidAppBuildCredentialsAsync({
        name,
        isDefault,
        keystoreId: androidKeystoreId,
    }, androidAppCredentials.id);
}
exports.createAndroidAppBuildCredentialsAsync = createAndroidAppBuildCredentialsAsync;
async function getDefaultAndroidAppBuildCredentialsAsync(appLookupParams) {
    var _a;
    const buildCredentialsList = await getAndroidAppBuildCredentialsListAsync(appLookupParams);
    return (_a = buildCredentialsList.find(buildCredentials => buildCredentials.isDefault)) !== null && _a !== void 0 ? _a : null;
}
exports.getDefaultAndroidAppBuildCredentialsAsync = getDefaultAndroidAppBuildCredentialsAsync;
async function getAndroidAppBuildCredentialsByNameAsync(appLookupParams, name) {
    var _a;
    const buildCredentialsList = await getAndroidAppBuildCredentialsListAsync(appLookupParams);
    return (_a = buildCredentialsList.find(buildCredentials => buildCredentials.name === name)) !== null && _a !== void 0 ? _a : null;
}
exports.getAndroidAppBuildCredentialsByNameAsync = getAndroidAppBuildCredentialsByNameAsync;
async function createOrUpdateAndroidAppBuildCredentialsByNameAsync(appLookupParams, name, { androidKeystoreId, }) {
    const existingBuildCredentialsWithName = await getAndroidAppBuildCredentialsByNameAsync(appLookupParams, name);
    if (existingBuildCredentialsWithName) {
        return await updateAndroidAppBuildCredentialsAsync(existingBuildCredentialsWithName, {
            androidKeystoreId,
        });
    }
    const defaultBuildCredentialsExist = !!(await getDefaultAndroidAppBuildCredentialsAsync(appLookupParams));
    return await createAndroidAppBuildCredentialsAsync(appLookupParams, {
        name,
        isDefault: !defaultBuildCredentialsExist,
        androidKeystoreId,
    });
}
exports.createOrUpdateAndroidAppBuildCredentialsByNameAsync = createOrUpdateAndroidAppBuildCredentialsByNameAsync;
async function createOrUpdateDefaultIosAppBuildCredentialsAsync() {
    throw new Error('This requires user prompting. Look for me in BuildCredentialsUtils');
}
exports.createOrUpdateDefaultIosAppBuildCredentialsAsync = createOrUpdateDefaultIosAppBuildCredentialsAsync;
async function createKeystoreAsync(account, keystore) {
    return await AndroidKeystoreMutation_1.AndroidKeystoreMutation.createAndroidKeystoreAsync({
        base64EncodedKeystore: keystore.keystore,
        keystorePassword: keystore.keystorePassword,
        keyAlias: keystore.keyAlias,
        keyPassword: keystore.keyPassword,
        type: keystore.type,
    }, account.id);
}
exports.createKeystoreAsync = createKeystoreAsync;
async function deleteKeystoreAsync(keystore) {
    return await AndroidKeystoreMutation_1.AndroidKeystoreMutation.deleteAndroidKeystoreAsync(keystore.id);
}
exports.deleteKeystoreAsync = deleteKeystoreAsync;
async function createFcmAsync(account, fcmApiKey, version) {
    return await AndroidFcmMutation_1.AndroidFcmMutation.createAndroidFcmAsync({ credential: fcmApiKey, version }, account.id);
}
exports.createFcmAsync = createFcmAsync;
async function deleteFcmAsync(fcm) {
    return await AndroidFcmMutation_1.AndroidFcmMutation.deleteAndroidFcmAsync(fcm.id);
}
exports.deleteFcmAsync = deleteFcmAsync;
async function createGoogleServiceAccountKeyAsync(account, jsonKey) {
    return await GoogleServiceAccountKeyMutation_1.GoogleServiceAccountKeyMutation.createGoogleServiceAccountKeyAsync({ jsonKey }, account.id);
}
exports.createGoogleServiceAccountKeyAsync = createGoogleServiceAccountKeyAsync;
async function deleteGoogleServiceAccountKeyAsync(googleServiceAccountKey) {
    return await GoogleServiceAccountKeyMutation_1.GoogleServiceAccountKeyMutation.deleteGoogleServiceAccountKeyAsync(googleServiceAccountKey.id);
}
exports.deleteGoogleServiceAccountKeyAsync = deleteGoogleServiceAccountKeyAsync;
async function getGoogleServiceAccountKeysForAccountAsync(account) {
    return await GoogleServiceAccountKeyQuery_1.GoogleServiceAccountKeyQuery.getAllForAccountAsync(account.name);
}
exports.getGoogleServiceAccountKeysForAccountAsync = getGoogleServiceAccountKeysForAccountAsync;
async function getAppAsync(appLookupParams) {
    const projectFullName = (0, exports.formatProjectFullName)(appLookupParams);
    return await AppQuery_1.AppQuery.byFullNameAsync(projectFullName);
}
const formatProjectFullName = ({ account, projectName }) => `@${account.name}/${projectName}`;
exports.formatProjectFullName = formatProjectFullName;
