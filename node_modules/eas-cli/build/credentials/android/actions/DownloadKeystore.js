"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupKeystore = exports.DownloadKeystore = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const log_1 = tslib_1.__importDefault(require("../../../log"));
const prompts_1 = require("../../../prompts");
const files_1 = require("../../../utils/files");
const GraphqlClient_1 = require("../api/GraphqlClient");
const printCredentials_1 = require("../utils/printCredentials");
class DownloadKeystore {
    constructor(options) {
        this.options = options;
    }
    async runAsync(ctx, buildCredentials) {
        var _a, _b, _c;
        const keystore = buildCredentials.androidKeystore;
        if (!keystore) {
            log_1.default.warn(`There is no valid Keystore defined for build credentials: ${buildCredentials.name}`);
            return;
        }
        let displaySensitiveInformation = (_a = this.options) === null || _a === void 0 ? void 0 : _a.displaySensitiveInformation;
        if (displaySensitiveInformation === undefined && !ctx.nonInteractive) {
            displaySensitiveInformation = await (0, prompts_1.confirmAsync)({
                message: 'Do you want to display the sensitive information of the Android Keystore?',
            });
        }
        const projectFullName = (0, GraphqlClient_1.formatProjectFullName)(this.options.app);
        const keystorePath = (_c = (_b = this.options) === null || _b === void 0 ? void 0 : _b.outputPath) !== null && _c !== void 0 ? _c : `${projectFullName.replace('/', '__')}.jks`;
        await (0, files_1.maybeRenameExistingFileAsync)(ctx.projectDir, keystorePath);
        log_1.default.log(`Saving Keystore to ${keystorePath}`);
        await fs_extra_1.default.writeFile(keystorePath, keystore.keystore, 'base64');
        // non-sensitive information
        (0, printCredentials_1.displayAndroidKeystore)(keystore);
        if (displaySensitiveInformation) {
            log_1.default.newLine();
            log_1.default.log(`Sensitive Keystore information:
    Keystore password: ${chalk_1.default.bold(keystore.keystorePassword)}
    Key alias:         ${chalk_1.default.bold(keystore.keyAlias)}
    Key password:      ${chalk_1.default.bold(keystore.keyPassword)}

    Path to Keystore:  ${keystorePath}
      `);
        }
        log_1.default.newLine();
    }
}
exports.DownloadKeystore = DownloadKeystore;
class BackupKeystore {
    constructor(app) {
        this.app = app;
    }
    async runAsync(ctx, buildCredentials) {
        if (!buildCredentials.androidKeystore) {
            return;
        }
        const projectFullName = (0, GraphqlClient_1.formatProjectFullName)(this.app);
        log_1.default.warn('Backing up your old Android Keystore now...');
        await new DownloadKeystore({
            app: this.app,
            outputPath: `${projectFullName}.bak.jks`.replace('/', '__'),
            displaySensitiveInformation: true,
        }).runAsync(ctx, buildCredentials);
    }
}
exports.BackupKeystore = BackupKeystore;
