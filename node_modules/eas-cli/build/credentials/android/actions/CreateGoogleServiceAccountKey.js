"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateGoogleServiceAccountKey = void 0;
const tslib_1 = require("tslib");
const log_1 = tslib_1.__importDefault(require("../../../log"));
const prompts_1 = require("../../../prompts");
const googleServiceAccountKey_1 = require("../utils/googleServiceAccountKey");
class CreateGoogleServiceAccountKey {
    constructor(account) {
        this.account = account;
    }
    async runAsync(ctx) {
        if (ctx.nonInteractive) {
            throw new Error(`New Google Service Account Key cannot be created in non-interactive mode.`);
        }
        const jsonKeyObject = await this.provideAsync(ctx);
        const gsaKeyFragment = await ctx.android.createGoogleServiceAccountKeyAsync(this.account, jsonKeyObject);
        log_1.default.succeed('Uploaded Google Service Account Key.');
        return gsaKeyFragment;
    }
    async provideAsync(ctx) {
        try {
            const keyJsonPath = await this.provideKeyJsonPathAsync(ctx);
            return (0, googleServiceAccountKey_1.readAndValidateServiceAccountKey)(keyJsonPath);
        }
        catch (e) {
            log_1.default.error(e);
            return await this.provideAsync(ctx);
        }
    }
    async provideKeyJsonPathAsync(ctx) {
        const detectedPath = await (0, googleServiceAccountKey_1.detectGoogleServiceAccountKeyPathAsync)(ctx.projectDir);
        if (detectedPath) {
            return detectedPath;
        }
        const { keyJsonPath } = await (0, prompts_1.promptAsync)([
            {
                type: 'text',
                name: 'keyJsonPath',
                message: 'Path to Google Service Account Key JSON file:',
                validate: (value) => value.length > 0 || "Path can't be empty",
            },
        ]);
        return keyJsonPath;
    }
}
exports.CreateGoogleServiceAccountKey = CreateGoogleServiceAccountKey;
