"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManageAndroid = void 0;
const tslib_1 = require("tslib");
const eas_build_job_1 = require("@expo/eas-build-job");
const assert_1 = tslib_1.__importDefault(require("assert"));
const log_1 = tslib_1.__importStar(require("../../log"));
const gradle_1 = require("../../project/android/gradle");
const projectUtils_1 = require("../../project/projectUtils");
const prompts_1 = require("../../prompts");
const Account_1 = require("../../user/Account");
const actions_1 = require("../../user/actions");
const AssignFcm_1 = require("../android/actions/AssignFcm");
const AssignGoogleServiceAccountKey_1 = require("../android/actions/AssignGoogleServiceAccountKey");
const BuildCredentialsUtils_1 = require("../android/actions/BuildCredentialsUtils");
const CreateFcm_1 = require("../android/actions/CreateFcm");
const CreateGoogleServiceAccountKey_1 = require("../android/actions/CreateGoogleServiceAccountKey");
const CreateKeystore_1 = require("../android/actions/CreateKeystore");
const DownloadKeystore_1 = require("../android/actions/DownloadKeystore");
const RemoveFcm_1 = require("../android/actions/RemoveFcm");
const RemoveGoogleServiceAccountKey_1 = require("../android/actions/RemoveGoogleServiceAccountKey");
const RemoveKeystore_1 = require("../android/actions/RemoveKeystore");
const SetUpBuildCredentialsFromCredentialsJson_1 = require("../android/actions/SetUpBuildCredentialsFromCredentialsJson");
const SetUpGoogleServiceAccountKey_1 = require("../android/actions/SetUpGoogleServiceAccountKey");
const UpdateCredentialsJson_1 = require("../android/actions/UpdateCredentialsJson");
const UseExistingGoogleServiceAccountKey_1 = require("../android/actions/UseExistingGoogleServiceAccountKey");
const printCredentials_1 = require("../android/utils/printCredentials");
const context_1 = require("../context");
const Actions_1 = require("./Actions");
const AndroidActions_1 = require("./AndroidActions");
const HelperActions_1 = require("./HelperActions");
const SelectAndroidBuildCredentials_1 = require("./SelectAndroidBuildCredentials");
const SelectBuildProfileFromEasJson_1 = require("./SelectBuildProfileFromEasJson");
class ManageAndroid {
    constructor(callingAction, projectDir) {
        this.callingAction = callingAction;
        this.projectDir = projectDir;
    }
    async runAsync(currentActions = AndroidActions_1.highLevelActions) {
        const hasProjectContext = !!context_1.CredentialsContext.getExpoConfigInProject(this.projectDir);
        const buildProfile = hasProjectContext
            ? await new SelectBuildProfileFromEasJson_1.SelectBuildProfileFromEasJson(this.projectDir, eas_build_job_1.Platform.ANDROID).runAsync()
            : null;
        const ctx = new context_1.CredentialsContext({
            projectDir: process.cwd(),
            user: await (0, actions_1.ensureLoggedInAsync)(),
            env: buildProfile === null || buildProfile === void 0 ? void 0 : buildProfile.env,
        });
        const accountName = ctx.hasProjectContext
            ? (0, projectUtils_1.getProjectAccountName)(ctx.exp, ctx.user)
            : (0, actions_1.ensureActorHasUsername)(ctx.user);
        const account = (0, Account_1.findAccountByName)(ctx.user.accounts, accountName);
        if (!account) {
            throw new Error(`You do not have access to account: ${accountName}`);
        }
        let gradleContext;
        if (ctx.hasProjectContext) {
            (0, assert_1.default)(buildProfile, 'buildProfile must be defined in a project context');
            gradleContext = await this.createProjectContextAsync(ctx, buildProfile);
        }
        while (true) {
            try {
                if (ctx.hasProjectContext) {
                    const maybeProjectId = await (0, projectUtils_1.promptToCreateProjectIfNotExistsAsync)(ctx.exp);
                    if (!maybeProjectId) {
                        throw new Error('Your project must be registered with EAS in order to use the credentials manager.');
                    }
                    const appLookupParams = await (0, BuildCredentialsUtils_1.getAppLookupParamsFromContextAsync)(ctx, gradleContext);
                    const appCredentials = await ctx.android.getAndroidAppCredentialsWithCommonFieldsAsync(appLookupParams);
                    if (!appCredentials) {
                        (0, printCredentials_1.displayEmptyAndroidCredentials)(appLookupParams);
                    }
                    else {
                        (0, printCredentials_1.displayAndroidAppCredentials)({ appLookupParams, appCredentials });
                    }
                    // copy legacy credentials if user is new to EAS and has legacy credentials
                    const canCopyLegacyCredentials = await (0, BuildCredentialsUtils_1.canCopyLegacyCredentialsAsync)(ctx, appLookupParams);
                    if (canCopyLegacyCredentials) {
                        await (0, BuildCredentialsUtils_1.promptUserAndCopyLegacyCredentialsAsync)(ctx, appLookupParams);
                    }
                }
                const { action: chosenAction } = await (0, prompts_1.promptAsync)({
                    type: 'select',
                    name: 'action',
                    message: 'What do you want to do?',
                    choices: currentActions.map(action => ({
                        value: action.value,
                        title: action.title,
                    })),
                });
                const actionInfo = currentActions.find(action => action.value === chosenAction);
                if (!actionInfo) {
                    throw new Error('Action not supported yet');
                }
                if (actionInfo.scope === Actions_1.Scope.Manager) {
                    if (chosenAction === Actions_1.AndroidActionType.ManageBuildCredentials) {
                        currentActions = AndroidActions_1.buildCredentialsActions;
                        continue;
                    }
                    else if (chosenAction === Actions_1.AndroidActionType.ManageFcm) {
                        currentActions = AndroidActions_1.fcmActions;
                        continue;
                    }
                    else if (chosenAction === Actions_1.AndroidActionType.ManageGoogleServiceAccountKey) {
                        currentActions = AndroidActions_1.gsaKeyActions;
                        continue;
                    }
                    else if (chosenAction === Actions_1.AndroidActionType.ManageCredentialsJson) {
                        currentActions = AndroidActions_1.credentialsJsonActions;
                        continue;
                    }
                    else if (chosenAction === Actions_1.AndroidActionType.GoBackToHighLevelActions) {
                        currentActions = AndroidActions_1.highLevelActions;
                        continue;
                    }
                    else if (chosenAction === Actions_1.AndroidActionType.GoBackToCaller) {
                        return await this.callingAction.runAsync(ctx);
                    }
                }
                await this.runProjectSpecificActionAsync(ctx, chosenAction, gradleContext);
            }
            catch (err) {
                log_1.default.error(err);
                if (process.env.DEBUG) {
                    throw err; // breaks out of the loop so we can get stack trace
                }
                log_1.default.error(`Cryptic error? ${(0, log_1.learnMore)('https://expo.fyi/cryptic-error-eas')}`);
            }
            await new HelperActions_1.PressAnyKeyToContinue().runAsync();
        }
    }
    async createProjectContextAsync(ctx, buildProfile) {
        (0, assert_1.default)(ctx.hasProjectContext, 'createProjectContextAsync: must have project context.');
        const maybeProjectId = await (0, projectUtils_1.promptToCreateProjectIfNotExistsAsync)(ctx.exp);
        if (!maybeProjectId) {
            throw new Error('Your project must be registered with EAS in order to use the credentials manager.');
        }
        return await (0, gradle_1.resolveGradleBuildContextAsync)(ctx.projectDir, buildProfile);
    }
    async runProjectSpecificActionAsync(ctx, action, gradleContext) {
        (0, assert_1.default)(ctx.hasProjectContext, 'You must be in your project directory in order to perform this action');
        const appLookupParams = await (0, BuildCredentialsUtils_1.getAppLookupParamsFromContextAsync)(ctx, gradleContext);
        if (action === Actions_1.AndroidActionType.CreateKeystore) {
            const selectBuildCredentialsResult = await new SelectAndroidBuildCredentials_1.SelectAndroidBuildCredentials(appLookupParams).runAsync(ctx);
            const keystore = await new CreateKeystore_1.CreateKeystore(appLookupParams.account).runAsync(ctx);
            if (selectBuildCredentialsResult.resultType ===
                SelectAndroidBuildCredentials_1.SelectAndroidBuildCredentialsResultType.CREATE_REQUEST) {
                await ctx.android.createAndroidAppBuildCredentialsAsync(appLookupParams, {
                    ...selectBuildCredentialsResult.result,
                    androidKeystoreId: keystore.id,
                });
            }
            else {
                await ctx.android.updateAndroidAppBuildCredentialsAsync(selectBuildCredentialsResult.result, {
                    androidKeystoreId: keystore.id,
                });
            }
        }
        else if (action === Actions_1.AndroidActionType.DownloadKeystore) {
            const buildCredentials = await new SelectAndroidBuildCredentials_1.SelectExistingAndroidBuildCredentials(appLookupParams).runAsync(ctx);
            if (buildCredentials) {
                await new DownloadKeystore_1.DownloadKeystore({ app: appLookupParams }).runAsync(ctx, buildCredentials);
            }
        }
        else if (action === Actions_1.AndroidActionType.RemoveKeystore) {
            const buildCredentials = await new SelectAndroidBuildCredentials_1.SelectExistingAndroidBuildCredentials(appLookupParams).runAsync(ctx);
            if (buildCredentials) {
                await new RemoveKeystore_1.RemoveKeystore(appLookupParams).runAsync(ctx, buildCredentials);
            }
        }
        else if (action === Actions_1.AndroidActionType.CreateFcm) {
            const fcm = await new CreateFcm_1.CreateFcm(appLookupParams.account).runAsync(ctx);
            await new AssignFcm_1.AssignFcm(appLookupParams).runAsync(ctx, fcm);
        }
        else if (action === Actions_1.AndroidActionType.RemoveFcm) {
            await new RemoveFcm_1.RemoveFcm(appLookupParams).runAsync(ctx);
        }
        else if (action === Actions_1.AndroidActionType.CreateGsaKey) {
            const gsaKey = await new CreateGoogleServiceAccountKey_1.CreateGoogleServiceAccountKey(appLookupParams.account).runAsync(ctx);
            await new AssignGoogleServiceAccountKey_1.AssignGoogleServiceAccountKey(appLookupParams).runAsync(ctx, gsaKey);
        }
        else if (action === Actions_1.AndroidActionType.UseExistingGsaKey) {
            const gsaKey = await new UseExistingGoogleServiceAccountKey_1.UseExistingGoogleServiceAccountKey(appLookupParams.account).runAsync(ctx);
            if (gsaKey) {
                await new AssignGoogleServiceAccountKey_1.AssignGoogleServiceAccountKey(appLookupParams).runAsync(ctx, gsaKey);
            }
        }
        else if (action === Actions_1.AndroidActionType.RemoveGsaKey) {
            await new RemoveGoogleServiceAccountKey_1.SelectAndRemoveGoogleServiceAccountKey(appLookupParams.account).runAsync(ctx);
        }
        else if (action === Actions_1.AndroidActionType.SetUpGsaKey) {
            await new SetUpGoogleServiceAccountKey_1.SetUpGoogleServiceAccountKey(appLookupParams).runAsync(ctx);
        }
        else if (action === Actions_1.AndroidActionType.UpdateCredentialsJson) {
            const buildCredentials = await new SelectAndroidBuildCredentials_1.SelectExistingAndroidBuildCredentials(appLookupParams).runAsync(ctx);
            if (buildCredentials) {
                await new UpdateCredentialsJson_1.UpdateCredentialsJson().runAsync(ctx, buildCredentials);
            }
        }
        else if (action === Actions_1.AndroidActionType.SetUpBuildCredentialsFromCredentialsJson) {
            await new SetUpBuildCredentialsFromCredentialsJson_1.SetUpBuildCredentialsFromCredentialsJson(appLookupParams).runAsync(ctx);
        }
    }
}
exports.ManageAndroid = ManageAndroid;
