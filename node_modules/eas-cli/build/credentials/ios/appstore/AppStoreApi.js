"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ascApiKey_1 = require("./ascApiKey");
const authenticate_1 = require("./authenticate");
const distributionCertificate_1 = require("./distributionCertificate");
const ensureAppExists_1 = require("./ensureAppExists");
const provisioningProfile_1 = require("./provisioningProfile");
const provisioningProfileAdhoc_1 = require("./provisioningProfileAdhoc");
const pushKey_1 = require("./pushKey");
class AppStoreApi {
    async ensureAuthenticatedAsync(options) {
        if (!this.authCtx) {
            this.authCtx = await (0, authenticate_1.authenticateAsync)(options);
        }
        return this.authCtx;
    }
    async ensureBundleIdExistsAsync(app, options) {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, ensureAppExists_1.ensureBundleIdExistsAsync)(ctx, app, options);
    }
    async listDistributionCertificatesAsync() {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, distributionCertificate_1.listDistributionCertificatesAsync)(ctx);
    }
    async createDistributionCertificateAsync() {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, distributionCertificate_1.createDistributionCertificateAsync)(ctx);
    }
    async revokeDistributionCertificateAsync(ids) {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, distributionCertificate_1.revokeDistributionCertificateAsync)(ctx, ids);
    }
    async listPushKeysAsync() {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, pushKey_1.listPushKeysAsync)(ctx);
    }
    async createPushKeyAsync(name) {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, pushKey_1.createPushKeyAsync)(ctx, name);
    }
    async revokePushKeyAsync(ids) {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, pushKey_1.revokePushKeyAsync)(ctx, ids);
    }
    async useExistingProvisioningProfileAsync(bundleIdentifier, provisioningProfile, distCert) {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, provisioningProfile_1.useExistingProvisioningProfileAsync)(ctx, bundleIdentifier, provisioningProfile, distCert);
    }
    async listProvisioningProfilesAsync(bundleIdentifier, profileClass) {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, provisioningProfile_1.listProvisioningProfilesAsync)(ctx, bundleIdentifier, profileClass);
    }
    async createProvisioningProfileAsync(bundleIdentifier, distCert, profileName, profileClass) {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, provisioningProfile_1.createProvisioningProfileAsync)(ctx, bundleIdentifier, distCert, profileName, profileClass);
    }
    async revokeProvisioningProfileAsync(bundleIdentifier, profileClass) {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, provisioningProfile_1.revokeProvisioningProfileAsync)(ctx, bundleIdentifier, profileClass);
    }
    async createOrReuseAdhocProvisioningProfileAsync(udids, bundleIdentifier, distCertSerialNumber) {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, provisioningProfileAdhoc_1.createOrReuseAdhocProvisioningProfileAsync)(ctx, udids, bundleIdentifier, distCertSerialNumber);
    }
    async listAscApiKeysAsync() {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, ascApiKey_1.listAscApiKeysAsync)(ctx);
    }
    async getAscApiKeyAsync(keyId) {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, ascApiKey_1.getAscApiKeyAsync)(ctx, keyId);
    }
    async createAscApiKeyAsync({ nickname }) {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, ascApiKey_1.createAscApiKeyAsync)(ctx, { nickname });
    }
    async revokeAscApiKeyAsync(keyId) {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, ascApiKey_1.revokeAscApiKeyAsync)(ctx, keyId);
    }
}
exports.default = AppStoreApi;
