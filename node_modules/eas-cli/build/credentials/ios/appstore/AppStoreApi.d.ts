import { AscApiKey, AscApiKeyInfo, DistributionCertificate, DistributionCertificateStoreInfo, ProvisioningProfile, ProvisioningProfileStoreInfo, PushKey, PushKeyStoreInfo } from './Credentials.types';
import { AuthCtx, Options as AuthenticateOptions } from './authenticate';
import { AppLookupParams, IosCapabilitiesOptions } from './ensureAppExists';
import { ProfileClass } from './provisioningProfile';
export default class AppStoreApi {
    authCtx?: AuthCtx;
    ensureAuthenticatedAsync(options?: AuthenticateOptions): Promise<AuthCtx>;
    ensureBundleIdExistsAsync(app: AppLookupParams, options?: IosCapabilitiesOptions): Promise<void>;
    listDistributionCertificatesAsync(): Promise<DistributionCertificateStoreInfo[]>;
    createDistributionCertificateAsync(): Promise<DistributionCertificate>;
    revokeDistributionCertificateAsync(ids: string[]): Promise<void>;
    listPushKeysAsync(): Promise<PushKeyStoreInfo[]>;
    createPushKeyAsync(name?: string): Promise<PushKey>;
    revokePushKeyAsync(ids: string[]): Promise<void>;
    useExistingProvisioningProfileAsync(bundleIdentifier: string, provisioningProfile: ProvisioningProfile, distCert: DistributionCertificate): Promise<ProvisioningProfile>;
    listProvisioningProfilesAsync(bundleIdentifier: string, profileClass?: ProfileClass): Promise<ProvisioningProfileStoreInfo[]>;
    createProvisioningProfileAsync(bundleIdentifier: string, distCert: DistributionCertificate, profileName: string, profileClass?: ProfileClass): Promise<ProvisioningProfile>;
    revokeProvisioningProfileAsync(bundleIdentifier: string, profileClass?: ProfileClass): Promise<void>;
    createOrReuseAdhocProvisioningProfileAsync(udids: string[], bundleIdentifier: string, distCertSerialNumber: string): Promise<ProvisioningProfile>;
    listAscApiKeysAsync(): Promise<AscApiKeyInfo[]>;
    getAscApiKeyAsync(keyId: string): Promise<AscApiKeyInfo | null>;
    createAscApiKeyAsync({ nickname }: {
        nickname: string;
    }): Promise<AscApiKey>;
    revokeAscApiKeyAsync(keyId: string): Promise<AscApiKeyInfo>;
}
