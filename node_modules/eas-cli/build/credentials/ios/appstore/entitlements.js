"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveEntitlementsJsonAsync = exports.getManagedEntitlementsJsonAsync = void 0;
const config_plugins_1 = require("@expo/config-plugins");
const eas_build_job_1 = require("@expo/eas-build-job");
const prebuild_config_1 = require("@expo/prebuild-config");
const plist_1 = require("../../../utils/plist");
async function getManagedEntitlementsJsonAsync(projectDir, env) {
    var _a;
    const originalProcessEnv = process.env;
    try {
        process.env = {
            ...process.env,
            ...env,
        };
        const { exp } = await (0, prebuild_config_1.getPrebuildConfigAsync)(projectDir, { platforms: ['ios'] });
        const expWithMods = await (0, config_plugins_1.compileModsAsync)(exp, {
            projectRoot: projectDir,
            platforms: ['ios'],
            introspect: true,
        });
        return ((_a = expWithMods.ios) === null || _a === void 0 ? void 0 : _a.entitlements) || {};
    }
    finally {
        process.env = originalProcessEnv;
    }
}
exports.getManagedEntitlementsJsonAsync = getManagedEntitlementsJsonAsync;
async function resolveEntitlementsJsonAsync(projectDir, workflow, env) {
    if (workflow === eas_build_job_1.Workflow.GENERIC) {
        return (await getEntitlementsJsonAsync(projectDir)) || {};
    }
    else if (workflow === eas_build_job_1.Workflow.MANAGED) {
        return await getManagedEntitlementsJsonAsync(projectDir, env);
    }
    else {
        throw new Error(`Unknown workflow: ${workflow}`);
    }
}
exports.resolveEntitlementsJsonAsync = resolveEntitlementsJsonAsync;
async function getEntitlementsJsonAsync(projectDir) {
    const entitlementsPath = config_plugins_1.IOSConfig.Paths.getEntitlementsPath(projectDir);
    if (entitlementsPath) {
        const plist = await (0, plist_1.readPlistAsync)(entitlementsPath);
        return plist ? plist : null;
    }
    else {
        return null;
    }
}
