"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAscApiKeyInfo = exports.revokeAscApiKeyAsync = exports.createAscApiKeyAsync = exports.getAscApiKeyAsync = exports.listAscApiKeysAsync = void 0;
const tslib_1 = require("tslib");
const apple_utils_1 = require("@expo/apple-utils");
const log_1 = tslib_1.__importDefault(require("../../../log"));
const ora_1 = require("../../../ora");
const authenticate_1 = require("./authenticate");
async function listAscApiKeysAsync(authCtx) {
    const spinner = (0, ora_1.ora)(`Fetching App Store Connect API Keys.`).start();
    try {
        const context = (0, authenticate_1.getRequestContext)(authCtx);
        const keys = await apple_utils_1.ApiKey.getAsync(context);
        spinner.succeed(`Fetched App Store Connect API Keys.`);
        return keys.map(key => getAscApiKeyInfo(key, authCtx));
    }
    catch (error) {
        spinner.fail(`Failed to fetch App Store Connect API Keys.`);
        throw error;
    }
}
exports.listAscApiKeysAsync = listAscApiKeysAsync;
async function getAscApiKeyAsync(authCtx, keyId) {
    var _a;
    const spinner = (0, ora_1.ora)(`Fetching App Store Connect API Key.`).start();
    try {
        const context = (0, authenticate_1.getRequestContext)(authCtx);
        const apiKey = await apple_utils_1.ApiKey.infoAsync(context, { id: keyId });
        spinner.succeed(`Fetched App Store Connect API Key (ID: ${keyId}).`);
        return getAscApiKeyInfo(apiKey, authCtx);
    }
    catch (error) {
        const message = (_a = error === null || error === void 0 ? void 0 : error.message) !== null && _a !== void 0 ? _a : '';
        if (message.includes("There is no resource of type 'apiKeys' with id")) {
            spinner.stop();
            return null;
        }
        log_1.default.error(error);
        spinner.fail(`Failed to fetch App Store Connect API Key.`);
        throw error;
    }
}
exports.getAscApiKeyAsync = getAscApiKeyAsync;
async function createAscApiKeyAsync(authCtx, { nickname, allAppsVisible, roles, keyType, }) {
    const spinner = (0, ora_1.ora)(`Creating App Store Connect API Key.`).start();
    try {
        const context = (0, authenticate_1.getRequestContext)(authCtx);
        const key = await apple_utils_1.ApiKey.createAsync(context, {
            nickname: nickname !== null && nickname !== void 0 ? nickname : `[expo] ${new Date().getTime()}`,
            allAppsVisible: allAppsVisible !== null && allAppsVisible !== void 0 ? allAppsVisible : true,
            roles: roles !== null && roles !== void 0 ? roles : [apple_utils_1.UserRole.ADMIN],
            keyType: keyType !== null && keyType !== void 0 ? keyType : apple_utils_1.ApiKeyType.PUBLIC_API,
        });
        const keyP8 = await key.downloadAsync();
        if (!keyP8) {
            const { nickname, roles } = key.attributes;
            const humanReadableKey = `App Store Connect Key '${nickname}' (${key.id}) with roles {${roles.join(',')}}`;
            if (!key.attributes.canDownload) {
                // this case would be unexpected because we just created the key
                throw new Error(`${humanReadableKey} is not available for download from Apple.`);
            }
            else if (!key.attributes.isActive) {
                throw new Error(`${humanReadableKey} is inactive and could not be downloaded.`);
            }
            throw new Error(`Failed to download .p8 file of ${humanReadableKey}.`);
        }
        // this object has more optional parameters populated
        const fullKey = await apple_utils_1.ApiKey.infoAsync(context, { id: key.id });
        spinner.succeed(`Created App Store Connect API Key.`);
        return {
            ...getAscApiKeyInfo(fullKey, authCtx),
            keyP8,
        };
    }
    catch (err) {
        spinner.fail('Failed to create App Store Connect API Key.');
        throw err;
    }
}
exports.createAscApiKeyAsync = createAscApiKeyAsync;
async function revokeAscApiKeyAsync(authCtx, keyId) {
    const spinner = (0, ora_1.ora)(`Revoking App Store Connect API Key.`).start();
    try {
        const context = (0, authenticate_1.getRequestContext)(authCtx);
        const apiKey = await apple_utils_1.ApiKey.infoAsync(context, { id: keyId });
        const revokedKey = await apiKey.revokeAsync();
        spinner.succeed(`Revoked App Store Connect API Key.`);
        return getAscApiKeyInfo(revokedKey, authCtx);
    }
    catch (error) {
        log_1.default.error(error);
        spinner.fail(`Failed to revoke App Store Connect API Key.`);
        throw error;
    }
}
exports.revokeAscApiKeyAsync = revokeAscApiKeyAsync;
function getAscApiKeyInfo(apiKey, authCtx) {
    var _a;
    return {
        name: apiKey.attributes.nickname,
        keyId: apiKey.id,
        issuerId: (_a = apiKey.attributes.provider) === null || _a === void 0 ? void 0 : _a.id,
        teamId: authCtx.team.id,
        teamName: authCtx.team.name,
        roles: apiKey.attributes.roles,
        isRevoked: !!apiKey.attributes.revokingDate,
    };
}
exports.getAscApiKeyInfo = getAscApiKeyInfo;
