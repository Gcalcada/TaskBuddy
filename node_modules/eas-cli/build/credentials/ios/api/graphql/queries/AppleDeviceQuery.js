"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppleDeviceQuery = void 0;
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const graphql_1 = require("graphql");
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const client_1 = require("../../../../../graphql/client");
const AppleDevice_1 = require("../../../../../graphql/types/credentials/AppleDevice");
const AppleTeam_1 = require("../../../../../graphql/types/credentials/AppleTeam");
exports.AppleDeviceQuery = {
    async getAllByAppleTeamIdentifierAsync(accountId, appleTeamIdentifier, { useCache = true } = {}) {
        const data = await (0, client_1.withErrorHandlingAsync)(client_1.graphqlClient
            .query((0, graphql_tag_1.default) `
            query AppleDevicesByAppleTeamQuery($accountId: ID!, $appleTeamIdentifier: String!) {
              appleTeam {
                byAppleTeamIdentifier(accountId: $accountId, identifier: $appleTeamIdentifier) {
                  id
                  ...AppleTeamFragment
                  appleDevices {
                    id
                    ...AppleDeviceFragment
                    appleTeam {
                      id
                      ...AppleTeamFragment
                    }
                  }
                }
              }
            }
            ${(0, graphql_1.print)(AppleTeam_1.AppleTeamFragmentNode)}
            ${(0, graphql_1.print)(AppleDevice_1.AppleDeviceFragmentNode)}
          `, {
            accountId,
            appleTeamIdentifier,
        }, {
            additionalTypenames: ['AppleDevice'],
            requestPolicy: useCache ? 'cache-first' : 'network-only',
        })
            .toPromise());
        (0, assert_1.default)(data.appleTeam.byAppleTeamIdentifier, 'byAppleTeamIdentifier should be defined in this context - enforced by GraphQL');
        const { appleDevices } = data.appleTeam.byAppleTeamIdentifier;
        (0, assert_1.default)(appleDevices, 'Apple Devices should be defined in this context - enforced by GraphQL');
        return appleDevices;
    },
    async getAllForAppleTeamAsync(accountName, appleTeamIdentifier) {
        const data = await (0, client_1.withErrorHandlingAsync)(client_1.graphqlClient
            .query((0, graphql_tag_1.default) `
            query AppleDevicesByTeamIdentifier(
              $accountName: String!
              $appleTeamIdentifier: String!
            ) {
              account {
                byName(accountName: $accountName) {
                  id
                  appleTeams(appleTeamIdentifier: $appleTeamIdentifier) {
                    id
                    appleTeamIdentifier
                    appleTeamName
                    appleDevices {
                      id
                      identifier
                      name
                      deviceClass
                      enabled
                    }
                  }
                }
              }
            }
          `, { accountName, appleTeamIdentifier }, {
            additionalTypenames: ['AppleDevice', 'AppleTeam'],
        })
            .toPromise());
        return data.account.byName.appleTeams[0];
    },
    async getByDeviceIdentifierAsync(accountName, identifier) {
        var _a;
        const data = await (0, client_1.withErrorHandlingAsync)(client_1.graphqlClient
            .query((0, graphql_tag_1.default) `
            query AppleDevicesByIdentifier($accountName: String!, $identifier: String!) {
              account {
                byName(accountName: $accountName) {
                  id
                  appleDevices(identifier: $identifier) {
                    id
                    identifier
                    name
                    deviceClass
                    enabled
                    appleTeam {
                      id
                      appleTeamIdentifier
                      appleTeamName
                    }
                  }
                }
              }
            }
          `, { accountName, identifier }, {
            additionalTypenames: ['AppleDevice', 'AppleTeam'],
        })
            .toPromise());
        return (_a = data.account.byName.appleDevices[0]) !== null && _a !== void 0 ? _a : null;
    },
};
