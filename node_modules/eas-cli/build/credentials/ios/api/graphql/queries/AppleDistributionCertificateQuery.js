"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppleDistributionCertificateQuery = void 0;
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const graphql_1 = require("graphql");
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const client_1 = require("../../../../../graphql/client");
const AppleDistributionCertificate_1 = require("../../../../../graphql/types/credentials/AppleDistributionCertificate");
const AppleTeam_1 = require("../../../../../graphql/types/credentials/AppleTeam");
exports.AppleDistributionCertificateQuery = {
    async getForAppAsync(projectFullName, { appleAppIdentifierId, iosDistributionType, }) {
        var _a, _b, _c;
        const data = await (0, client_1.withErrorHandlingAsync)(client_1.graphqlClient
            .query((0, graphql_tag_1.default) `
            query AppleDistributionCertificateByAppQuery(
              $projectFullName: String!
              $appleAppIdentifierId: String!
              $iosDistributionType: IosDistributionType!
            ) {
              app {
                byFullName(fullName: $projectFullName) {
                  id
                  iosAppCredentials(filter: { appleAppIdentifierId: $appleAppIdentifierId }) {
                    id
                    iosAppBuildCredentialsList(
                      filter: { iosDistributionType: $iosDistributionType }
                    ) {
                      id
                      distributionCertificate {
                        id
                        ...AppleDistributionCertificateFragment
                        appleTeam {
                          id
                          ...AppleTeamFragment
                        }
                      }
                    }
                  }
                }
              }
            }
            ${(0, graphql_1.print)(AppleDistributionCertificate_1.AppleDistributionCertificateFragmentNode)}
            ${(0, graphql_1.print)(AppleTeam_1.AppleTeamFragmentNode)}
          `, {
            projectFullName,
            appleAppIdentifierId,
            iosDistributionType,
        }, {
            additionalTypenames: [
                'AppleDistributionCertificate',
                'IosAppCredentials',
                'IosAppBuildCredentials',
            ],
        })
            .toPromise());
        (0, assert_1.default)(data.app, 'GraphQL: `app` not defined in server response');
        return ((_c = (_b = (_a = data.app.byFullName.iosAppCredentials[0]) === null || _a === void 0 ? void 0 : _a.iosAppBuildCredentialsList[0]) === null || _b === void 0 ? void 0 : _b.distributionCertificate) !== null && _c !== void 0 ? _c : null);
    },
    async getAllForAccountAsync(accountName) {
        const data = await (0, client_1.withErrorHandlingAsync)(client_1.graphqlClient
            .query((0, graphql_tag_1.default) `
            query AppleDistributionCertificateByAccountQuery($accountName: String!) {
              account {
                byName(accountName: $accountName) {
                  id
                  appleDistributionCertificates {
                    id
                    ...AppleDistributionCertificateFragment
                  }
                }
              }
            }
            ${(0, graphql_1.print)(AppleDistributionCertificate_1.AppleDistributionCertificateFragmentNode)}
          `, {
            accountName,
        }, {
            additionalTypenames: ['AppleDistributionCertificate'],
        })
            .toPromise());
        return data.account.byName.appleDistributionCertificates;
    },
};
