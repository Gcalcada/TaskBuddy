import { AppStoreConnectApiKeyFragment, AppleAppIdentifierFragment, AppleDeviceFragment, AppleDistributionCertificateFragment, ApplePushKeyFragment, AppleTeamFragment, CommonIosAppCredentialsFragment, IosAppBuildCredentialsFragment, IosDistributionType } from '../../../graphql/generated';
import { Account } from '../../../user/Account';
import { DistributionCertificate, PushKey } from '../appstore/Credentials.types';
import { MinimalAscApiKey } from '../credentials';
import { AppleDistributionCertificateMutationResult } from './graphql/mutations/AppleDistributionCertificateMutation';
import { AppleProvisioningProfileMutationResult } from './graphql/mutations/AppleProvisioningProfileMutation';
import { AppleProvisioningProfileQueryResult } from './graphql/queries/AppleProvisioningProfileQuery';
export interface AppLookupParams {
    account: Account;
    projectName: string;
    bundleIdentifier: string;
    parentBundleIdentifier?: string;
}
export declare function createOrUpdateIosAppBuildCredentialsAsync(appLookupParams: AppLookupParams, { appleTeam, appleAppIdentifierId, iosDistributionType, appleProvisioningProfileId, appleDistributionCertificateId, }: {
    appleTeam: AppleTeamFragment;
    appleAppIdentifierId: string;
    iosDistributionType: IosDistributionType;
    appleProvisioningProfileId: string;
    appleDistributionCertificateId: string;
}): Promise<IosAppBuildCredentialsFragment>;
export declare function getIosAppCredentialsWithBuildCredentialsAsync(appLookupParams: AppLookupParams, { iosDistributionType }: {
    iosDistributionType?: IosDistributionType;
}): Promise<CommonIosAppCredentialsFragment | null>;
export declare function getIosAppCredentialsWithCommonFieldsAsync(appLookupParams: AppLookupParams): Promise<CommonIosAppCredentialsFragment | null>;
export declare function createOrGetIosAppCredentialsWithCommonFieldsAsync(appLookupParams: AppLookupParams, { appleTeam, }: {
    appleTeam?: AppleTeamFragment;
}): Promise<CommonIosAppCredentialsFragment>;
export declare function updateIosAppCredentialsAsync(appCredentials: CommonIosAppCredentialsFragment, { applePushKeyId, ascApiKeyIdForSubmissions, }: {
    applePushKeyId?: string;
    ascApiKeyIdForSubmissions?: string;
}): Promise<CommonIosAppCredentialsFragment>;
export declare function createOrGetExistingAppleTeamAsync(account: Account, { appleTeamIdentifier, appleTeamName }: {
    appleTeamIdentifier: string;
    appleTeamName?: string;
}): Promise<AppleTeamFragment>;
export declare function createOrGetExistingAppleAppIdentifierAsync({ account, projectName, bundleIdentifier, parentBundleIdentifier }: AppLookupParams, appleTeam: AppleTeamFragment | null): Promise<AppleAppIdentifierFragment>;
export declare function getDevicesForAppleTeamAsync({ account }: AppLookupParams, { appleTeamIdentifier }: AppleTeamFragment, { useCache }?: {
    useCache?: boolean;
}): Promise<AppleDeviceFragment[]>;
export declare function createProvisioningProfileAsync({ account }: AppLookupParams, appleAppIdentifier: AppleAppIdentifierFragment, appleProvisioningProfileInput: {
    appleProvisioningProfile: string;
    developerPortalIdentifier?: string;
}): Promise<AppleProvisioningProfileMutationResult>;
export declare function getProvisioningProfileAsync(appLookupParams: AppLookupParams, iosDistributionType: IosDistributionType, { appleTeam }?: {
    appleTeam: AppleTeamFragment | null;
}): Promise<AppleProvisioningProfileQueryResult | null>;
export declare function updateProvisioningProfileAsync(appleProvisioningProfileId: string, appleProvisioningProfileInput: {
    appleProvisioningProfile: string;
    developerPortalIdentifier?: string;
}): Promise<AppleProvisioningProfileMutationResult>;
export declare function deleteProvisioningProfilesAsync(appleProvisioningProfileIds: string[]): Promise<void>;
export declare function getDistributionCertificateForAppAsync(appLookupParams: AppLookupParams, iosDistributionType: IosDistributionType, { appleTeam }?: {
    appleTeam: AppleTeamFragment | null;
}): Promise<AppleDistributionCertificateFragment | null>;
export declare function getDistributionCertificatesForAccountAsync(account: Account): Promise<AppleDistributionCertificateFragment[]>;
export declare function createDistributionCertificateAsync(account: Account, distCert: DistributionCertificate): Promise<AppleDistributionCertificateMutationResult>;
export declare function deleteDistributionCertificateAsync(distributionCertificateId: string): Promise<void>;
export declare function createPushKeyAsync(account: Account, pushKey: PushKey): Promise<ApplePushKeyFragment>;
export declare function getPushKeysForAccountAsync(account: Account): Promise<ApplePushKeyFragment[]>;
export declare function getPushKeyForAppAsync(appLookupParams: AppLookupParams): Promise<ApplePushKeyFragment | null>;
export declare function deletePushKeyAsync(pushKeyId: string): Promise<void>;
export declare function createAscApiKeyAsync(account: Account, ascApiKey: MinimalAscApiKey): Promise<AppStoreConnectApiKeyFragment>;
export declare function getAscApiKeysForAccountAsync(account: Account): Promise<AppStoreConnectApiKeyFragment[]>;
export declare function getAscApiKeyForAppSubmissionsAsync(appLookupParams: AppLookupParams): Promise<AppStoreConnectApiKeyFragment | null>;
export declare function deleteAscApiKeyAsync(ascApiKeyId: string): Promise<void>;
