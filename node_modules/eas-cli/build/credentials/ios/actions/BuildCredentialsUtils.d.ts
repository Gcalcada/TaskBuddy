import { AppleDistributionCertificateFragment, AppleProvisioningProfileFragment, AppleTeamFragment, IosDistributionType as GraphQLIosDistributionType, IosAppBuildCredentialsFragment } from '../../../graphql/generated';
import { CredentialsContext } from '../../context';
import { AppLookupParams } from '../api/GraphqlClient';
import { App, Target } from '../types';
export declare function getAllBuildCredentialsAsync(ctx: CredentialsContext, app: AppLookupParams): Promise<IosAppBuildCredentialsFragment[]>;
export declare function getBuildCredentialsAsync(ctx: CredentialsContext, app: AppLookupParams, iosDistributionType: GraphQLIosDistributionType): Promise<IosAppBuildCredentialsFragment | null>;
export declare function getProvisioningProfileAsync(ctx: CredentialsContext, app: AppLookupParams, iosDistributionType: GraphQLIosDistributionType): Promise<AppleProvisioningProfileFragment | null>;
export declare function getDistributionCertificateAsync(ctx: CredentialsContext, app: AppLookupParams, iosDistributionType: GraphQLIosDistributionType): Promise<AppleDistributionCertificateFragment | null>;
export declare function assignBuildCredentialsAsync(ctx: CredentialsContext, app: AppLookupParams, iosDistributionType: GraphQLIosDistributionType, distCert: AppleDistributionCertificateFragment, provisioningProfile: AppleProvisioningProfileFragment, appleTeam?: AppleTeamFragment): Promise<IosAppBuildCredentialsFragment>;
export declare function getAppFromContext(ctx: CredentialsContext): App;
export declare function getAppLookupParamsFromContext(ctx: CredentialsContext, target: Target): AppLookupParams;
