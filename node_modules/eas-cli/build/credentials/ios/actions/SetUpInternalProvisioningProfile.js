"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetUpInternalProvisioningProfile = void 0;
const tslib_1 = require("tslib");
const generated_1 = require("../../../graphql/generated");
const log_1 = tslib_1.__importStar(require("../../../log"));
const prompts_1 = require("../../../prompts");
const BuildCredentialsUtils_1 = require("./BuildCredentialsUtils");
const SetUpAdhocProvisioningProfile_1 = require("./SetUpAdhocProvisioningProfile");
const SetUpProvisioningProfile_1 = require("./SetUpProvisioningProfile");
/**
 * It's used when setting up credentials for internal distribution but `enterpriseProvisioning` is not set.
 *
 * TLDR: If the user authenticates with an account with Apple Developer Enterprise Program membership we ask them
 * to choose if they want to set up an adhoc or universal distribution provisioning profile. Otherwise, always
 * set up an adhoc provisioning profile.
 */
class SetUpInternalProvisioningProfile {
    constructor(app) {
        this.app = app;
    }
    async runAsync(ctx) {
        const buildCredentials = await (0, BuildCredentialsUtils_1.getAllBuildCredentialsAsync)(ctx, this.app);
        const adhocBuildCredentialsExist = buildCredentials.filter(({ iosDistributionType }) => iosDistributionType === generated_1.IosDistributionType.AdHoc).length > 0;
        const enterpriseBuildCredentialsExist = buildCredentials.filter(({ iosDistributionType }) => iosDistributionType === generated_1.IosDistributionType.Enterprise).length > 0;
        if (!ctx.nonInteractive) {
            if (ctx.appStore.authCtx) {
                if (ctx.appStore.authCtx.team.inHouse) {
                    return await this.askForDistributionTypeAndSetupAsync(ctx, 'Which credentials would you like to set up?');
                }
                else {
                    return await this.setupAdhocProvisioningProfileAsync(ctx);
                }
            }
            else {
                if (adhocBuildCredentialsExist && enterpriseBuildCredentialsExist) {
                    log_1.default.log('You have set up both adhoc and universal distribution credentials.');
                    return await this.askForDistributionTypeAndSetupAsync(ctx, 'Which credentials would you like to use?');
                }
                else if (adhocBuildCredentialsExist) {
                    return await this.setupAdhocProvisioningProfileAsync(ctx);
                }
                else if (enterpriseBuildCredentialsExist) {
                    return await this.setupUniversalProvisioningProfileAsync(ctx);
                }
                else {
                    log_1.default.addNewLineIfNone();
                    log_1.default.log('You need to log in to your Apple Developer account to generate credentials for internal distribution builds, or provide credentials via credentials.json');
                    log_1.default.log((0, log_1.learnMore)('https://docs.expo.dev/app-signing/local-credentials/'));
                    const { team } = await ctx.appStore.ensureAuthenticatedAsync();
                    if (team.inHouse) {
                        return await this.askForDistributionTypeAndSetupAsync(ctx, 'Which credentials would you like to set up?');
                    }
                    else {
                        return await this.setupAdhocProvisioningProfileAsync(ctx);
                    }
                }
            }
        }
        else {
            if (adhocBuildCredentialsExist && enterpriseBuildCredentialsExist) {
                throw new Error(`You're in non-interactive mode. You have set up both adhoc and universal distribution credentials. Please set the 'enterpriseProvisioning' property (to 'adhoc' or 'universal') in eas.json to choose the credentials to use.`);
            }
            else if (adhocBuildCredentialsExist) {
                return await this.setupAdhocProvisioningProfileAsync(ctx);
            }
            else if (enterpriseBuildCredentialsExist) {
                return await this.setupUniversalProvisioningProfileAsync(ctx);
            }
            else {
                throw new Error(`You're in non-interactive mode. EAS CLI couldn't find any credentials suitable for internal distribution. Please run again in interactive mode.`);
            }
        }
    }
    async setupAdhocProvisioningProfileAsync(ctx) {
        return await new SetUpAdhocProvisioningProfile_1.SetUpAdhocProvisioningProfile(this.app).runAsync(ctx);
    }
    async setupUniversalProvisioningProfileAsync(ctx) {
        return await new SetUpProvisioningProfile_1.SetUpProvisioningProfile(this.app, generated_1.IosDistributionType.Enterprise).runAsync(ctx);
    }
    async askForDistributionTypeAndSetupAsync(ctx, message) {
        const { distributionType } = await (0, prompts_1.promptAsync)({
            type: 'select',
            name: 'distributionType',
            message,
            choices: [
                { title: 'Universal Distribution', value: generated_1.IosDistributionType.Enterprise },
                { title: 'Adhoc Distribution', value: generated_1.IosDistributionType.AdHoc },
            ],
        });
        if (distributionType === generated_1.IosDistributionType.Enterprise) {
            return await this.setupUniversalProvisioningProfileAsync(ctx);
        }
        else {
            return await this.setupAdhocProvisioningProfileAsync(ctx);
        }
    }
}
exports.SetUpInternalProvisioningProfile = SetUpInternalProvisioningProfile;
