"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetUpProvisioningProfile = void 0;
const tslib_1 = require("tslib");
const nullthrows_1 = tslib_1.__importDefault(require("nullthrows"));
const prompts_1 = require("../../../prompts");
const errors_1 = require("../../errors");
const validateProvisioningProfile_1 = require("../validators/validateProvisioningProfile");
const BuildCredentialsUtils_1 = require("./BuildCredentialsUtils");
const ConfigureProvisioningProfile_1 = require("./ConfigureProvisioningProfile");
const CreateProvisioningProfile_1 = require("./CreateProvisioningProfile");
const ProvisioningProfileUtils_1 = require("./ProvisioningProfileUtils");
const SetUpDistributionCertificate_1 = require("./SetUpDistributionCertificate");
/**
 * Sets up either APP_STORE or ENTERPRISE provisioning profiles
 */
class SetUpProvisioningProfile {
    constructor(app, distributionType) {
        this.app = app;
        this.distributionType = distributionType;
    }
    async areBuildCredentialsSetupAsync(ctx) {
        const buildCredentials = await (0, BuildCredentialsUtils_1.getBuildCredentialsAsync)(ctx, this.app, this.distributionType);
        return await (0, validateProvisioningProfile_1.validateProvisioningProfileAsync)(ctx, this.app, buildCredentials);
    }
    async assignNewAndDeleteOldProfileAsync(ctx, distCert, currentProfile) {
        const buildCredentials = await this.createAndAssignProfileAsync(ctx, distCert);
        // delete 'currentProfile' since its no longer valid
        await ctx.ios.deleteProvisioningProfilesAsync([currentProfile.id]);
        return buildCredentials;
    }
    async createAndAssignProfileAsync(ctx, distCert) {
        const provisioningProfile = await new CreateProvisioningProfile_1.CreateProvisioningProfile(this.app, distCert).runAsync(ctx);
        return await (0, BuildCredentialsUtils_1.assignBuildCredentialsAsync)(ctx, this.app, this.distributionType, distCert, provisioningProfile);
    }
    async configureAndAssignProfileAsync(ctx, distCert, originalProvisioningProfile) {
        const profileConfigurator = new ConfigureProvisioningProfile_1.ConfigureProvisioningProfile(this.app, distCert, originalProvisioningProfile);
        const updatedProvisioningProfile = await profileConfigurator.runAsync(ctx);
        if (!updatedProvisioningProfile) {
            return null;
        }
        return await (0, BuildCredentialsUtils_1.assignBuildCredentialsAsync)(ctx, this.app, this.distributionType, distCert, updatedProvisioningProfile);
    }
    async runAsync(ctx) {
        const distCert = await new SetUpDistributionCertificate_1.SetUpDistributionCertificate(this.app, this.distributionType).runAsync(ctx);
        const areBuildCredentialsSetup = await this.areBuildCredentialsSetupAsync(ctx);
        if (areBuildCredentialsSetup) {
            return (0, nullthrows_1.default)(await (0, BuildCredentialsUtils_1.getBuildCredentialsAsync)(ctx, this.app, this.distributionType));
        }
        if (ctx.nonInteractive) {
            throw new errors_1.MissingCredentialsNonInteractiveError('Provisioning profile is not configured correctly. Please run this command again in interactive mode.');
        }
        const currentProfile = await (0, BuildCredentialsUtils_1.getProvisioningProfileAsync)(ctx, this.app, this.distributionType);
        if (!currentProfile) {
            return await this.createAndAssignProfileAsync(ctx, distCert);
        }
        // See if the profile we have exists on the Apple Servers
        const existingProfiles = await ctx.appStore.listProvisioningProfilesAsync(this.app.bundleIdentifier);
        const currentProfileFromServer = this.getCurrentProfileStoreInfo(existingProfiles, currentProfile);
        if (!currentProfileFromServer) {
            return await this.assignNewAndDeleteOldProfileAsync(ctx, distCert, currentProfile);
        }
        const confirm = await (0, prompts_1.confirmAsync)({
            message: `${(0, ProvisioningProfileUtils_1.formatProvisioningProfileFromApple)(currentProfileFromServer)} \n  Would you like to reuse the original profile?`,
        });
        if (!confirm) {
            return await this.assignNewAndDeleteOldProfileAsync(ctx, distCert, currentProfile);
        }
        // If we get here, we've verified the current profile still exists on Apple
        // But something wasn't quite right, so we want to fix and update it
        const updatedProfile = await this.configureAndAssignProfileAsync(ctx, distCert, currentProfile);
        if (!updatedProfile) {
            // Something went wrong, so just create a new profile instead
            return await this.assignNewAndDeleteOldProfileAsync(ctx, distCert, currentProfile);
        }
        return updatedProfile;
    }
    getCurrentProfileStoreInfo(profiles, currentProfile) {
        var _a;
        return ((_a = profiles.find(profile => currentProfile.developerPortalIdentifier
            ? currentProfile.developerPortalIdentifier === profile.provisioningProfileId
            : currentProfile.provisioningProfile === profile.provisioningProfile)) !== null && _a !== void 0 ? _a : null);
    }
}
exports.SetUpProvisioningProfile = SetUpProvisioningProfile;
