"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetUpBuildCredentials = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const nullthrows_1 = tslib_1.__importDefault(require("nullthrows"));
const log_1 = tslib_1.__importDefault(require("../../../log"));
const printCredentials_1 = require("../utils/printCredentials");
const SetUpTargetBuildCredentials_1 = require("./SetUpTargetBuildCredentials");
class SetUpBuildCredentials {
    constructor(options) {
        this.options = options;
    }
    async runAsync(ctx) {
        const hasManyTargets = this.options.targets.length > 1;
        const iosAppBuildCredentialsMap = {};
        if (hasManyTargets) {
            log_1.default.newLine();
            log_1.default.log(`We found that the scheme you want to build consists of many targets.`);
            log_1.default.log(`You have to set up credentials for each of the targets.`);
            log_1.default.log(`They can share the same Distribution Certificate but require separate Provisioning Profiles.`);
            log_1.default.newLine();
            log_1.default.log(`Setting up credentials for following targets:`);
            for (const { targetName, bundleIdentifier } of this.options.targets) {
                log_1.default.log(`- Target: ${chalk_1.default.bold(targetName)}`);
                log_1.default.log(`  Bundle Identifier: ${chalk_1.default.bold(bundleIdentifier)}`);
            }
        }
        for (const target of this.options.targets) {
            if (hasManyTargets) {
                log_1.default.newLine();
                log_1.default.log(`Setting up credentials for target ${chalk_1.default.bold(target.targetName)} (${chalk_1.default.bold(target.bundleIdentifier)})`);
                log_1.default.newLine();
            }
            else {
                log_1.default.newLine();
            }
            const action = new SetUpTargetBuildCredentials_1.SetUpTargetBuildCredentials({
                ...this.options,
                app: {
                    ...this.options.app,
                    bundleIdentifier: target.bundleIdentifier,
                    parentBundleIdentifier: target.parentBundleIdentifier,
                },
            });
            iosAppBuildCredentialsMap[target.targetName] = await action.runAsync(ctx);
        }
        const appInfo = formatAppInfo(this.options.app, this.options.targets);
        log_1.default.newLine();
        (0, printCredentials_1.displayProjectCredentials)(this.options.app, iosAppBuildCredentialsMap, this.options.targets);
        log_1.default.log(chalk_1.default.green(`All credentials are ready to build ${chalk_1.default.bold(appInfo)}`));
        log_1.default.newLine();
        return toIosCredentials(iosAppBuildCredentialsMap);
    }
}
exports.SetUpBuildCredentials = SetUpBuildCredentials;
function toIosCredentials(appBuildCredentialsMap) {
    return Object.entries(appBuildCredentialsMap).reduce((acc, [targetName, appBuildCredentials]) => {
        var _a, _b, _c;
        acc[targetName] = {
            distributionCertificate: {
                certificateP12: (0, nullthrows_1.default)((_a = appBuildCredentials.distributionCertificate) === null || _a === void 0 ? void 0 : _a.certificateP12),
                certificatePassword: (0, nullthrows_1.default)((_b = appBuildCredentials.distributionCertificate) === null || _b === void 0 ? void 0 : _b.certificatePassword),
            },
            provisioningProfile: (0, nullthrows_1.default)((_c = appBuildCredentials.provisioningProfile) === null || _c === void 0 ? void 0 : _c.provisioningProfile),
        };
        return acc;
    }, {});
}
function formatAppInfo({ account, projectName }, targets) {
    const bundleIds = targets.map(target => target.bundleIdentifier);
    return `@${account.name}/${projectName} (${bundleIds.join(', ')})`;
}
