"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateProvisioningProfile = void 0;
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const nullthrows_1 = tslib_1.__importDefault(require("nullthrows"));
const log_1 = tslib_1.__importDefault(require("../../../log"));
const errors_1 = require("../../errors");
const promptForCredentials_1 = require("../../utils/promptForCredentials");
const credentials_1 = require("../credentials");
const AppleTeamUtils_1 = require("./AppleTeamUtils");
const ProvisioningProfileUtils_1 = require("./ProvisioningProfileUtils");
class CreateProvisioningProfile {
    constructor(app, distributionCertificate) {
        this.app = app;
        this.distributionCertificate = distributionCertificate;
    }
    async runAsync(ctx) {
        if (ctx.nonInteractive) {
            throw new errors_1.MissingCredentialsNonInteractiveError('Creating Provisioning Profiles is only supported in interactive mode.');
        }
        const appleAuthCtx = await ctx.appStore.ensureAuthenticatedAsync();
        const provisioningProfile = await this.provideOrGenerateAsync(ctx, appleAuthCtx);
        const appleTeam = (0, nullthrows_1.default)(await (0, AppleTeamUtils_1.resolveAppleTeamIfAuthenticatedAsync)(ctx, this.app));
        const appleAppIdentifier = await ctx.ios.createOrGetExistingAppleAppIdentifierAsync(this.app, appleTeam);
        const provisioningProfileMutationResult = await ctx.ios.createProvisioningProfileAsync(this.app, appleAppIdentifier, {
            appleProvisioningProfile: provisioningProfile.provisioningProfile,
            developerPortalIdentifier: provisioningProfile.provisioningProfileId,
        });
        log_1.default.succeed('Created provisioning profile');
        return provisioningProfileMutationResult;
    }
    async provideOrGenerateAsync(ctx, appleAuthCtx) {
        var _a, _b, _c;
        const userProvided = await (0, promptForCredentials_1.askForUserProvidedAsync)(credentials_1.provisioningProfileSchema);
        if (userProvided) {
            // userProvided profiles don't come with ProvisioningProfileId's (only accessible from Apple Portal API)
            log_1.default.warn('Provisioning profile: Unable to validate specified profile.');
            return userProvided;
        }
        (0, assert_1.default)(this.distributionCertificate.certificateP12, 'Distribution Certificate must have p12 certificate');
        (0, assert_1.default)(this.distributionCertificate.certificatePassword, 'Distribution Certificate must have certificate password');
        return await (0, ProvisioningProfileUtils_1.generateProvisioningProfileAsync)(ctx, this.app.bundleIdentifier, {
            certId: (_a = this.distributionCertificate.developerPortalIdentifier) !== null && _a !== void 0 ? _a : undefined,
            certP12: this.distributionCertificate.certificateP12,
            certPassword: this.distributionCertificate.certificatePassword,
            distCertSerialNumber: this.distributionCertificate.serialNumber,
            teamId: (_c = (_b = this.distributionCertificate.appleTeam) === null || _b === void 0 ? void 0 : _b.appleTeamIdentifier) !== null && _c !== void 0 ? _c : appleAuthCtx.appleId,
        });
    }
}
exports.CreateProvisioningProfile = CreateProvisioningProfile;
