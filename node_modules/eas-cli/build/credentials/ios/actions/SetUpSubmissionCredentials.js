"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetUpSubmissionCredentials = exports.PROMPT_FOR_APP_SPECIFIC_PASSWORD = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const nullthrows_1 = tslib_1.__importDefault(require("nullthrows"));
const wrap_ansi_1 = tslib_1.__importDefault(require("wrap-ansi"));
const log_1 = tslib_1.__importStar(require("../../../log"));
const prompts_1 = require("../../../prompts");
const errors_1 = require("../../errors");
const AscApiKeyUtils_1 = require("./AscApiKeyUtils");
const SetUpAscApiKey_1 = require("./SetUpAscApiKey");
exports.PROMPT_FOR_APP_SPECIFIC_PASSWORD = 'PROMPT_FOR_APP_SPECIFIC_PASSWORD';
class SetUpSubmissionCredentials {
    constructor(app) {
        this.setupAscApiKeyAction = new SetUpAscApiKey_1.SetUpAscApiKey(app, AscApiKeyUtils_1.AppStoreApiKeyPurpose.SUBMISSION_SERVICE);
        // Add this unrelated choice to ASC API Key setup for legacy purposes -- we will deprecate it soon
        this.setupAscApiKeyAction.choices = this.setupAscApiKeyAction.choices.concat({
            title: '[Enter an App Specific Password]',
            value: exports.PROMPT_FOR_APP_SPECIFIC_PASSWORD,
        });
    }
    async runAsync(ctx) {
        try {
            const iosAppCredentials = await this.setupAscApiKeyAction.runAsync(ctx);
            const { keyIdentifier, name } = (0, nullthrows_1.default)(iosAppCredentials.appStoreConnectApiKeyForSubmissions, 'ASC API Key must be defined for EAS Submit');
            log_1.default.log(`Using API Key ID: ${keyIdentifier}${name ? ` (${name})` : ''}`);
            return iosAppCredentials;
        }
        catch (e) {
            if (e instanceof errors_1.UnsupportedCredentialsChoiceError) {
                if (e.choice === exports.PROMPT_FOR_APP_SPECIFIC_PASSWORD) {
                    return await this.promptForAppSpecificPasswordAsync();
                }
            }
            throw e;
        }
    }
    async promptForAppSpecificPasswordAsync() {
        log_1.default.addNewLineIfNone();
        log_1.default.log(`Please enter your Apple app-specific password.`);
        log_1.default.log((0, log_1.learnMore)('https://expo.fyi/apple-app-specific-password'));
        log_1.default.warn((0, wrap_ansi_1.default)(`This option will be deprecated soon. You will still be able to provide your password with the ${chalk_1.default.bold('EXPO_APPLE_APP_SPECIFIC_PASSWORD')} environment variable.`, process.stdout.columns || 80));
        const { appSpecificPassword } = await (0, prompts_1.promptAsync)({
            name: 'appSpecificPassword',
            message: 'Your Apple app-specific password:',
            type: 'password',
            validate: (val) => val !== '' || 'Apple app-specific password cannot be empty!',
        });
        return appSpecificPassword;
    }
}
exports.SetUpSubmissionCredentials = SetUpSubmissionCredentials;
