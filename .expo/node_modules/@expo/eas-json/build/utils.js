"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EasJsonUtils = void 0;
const eas_build_job_1 = require("@expo/eas-build-job");
const resolver_1 = require("./build/resolver");
const errors_1 = require("./errors");
const resolver_2 = require("./submit/resolver");
const schema_1 = require("./submit/schema");
class EasJsonUtils {
    static async getBuildProfileNamesAsync(accessor) {
        var _a;
        const easJson = await accessor.readAsync();
        return Object.keys((_a = easJson === null || easJson === void 0 ? void 0 : easJson.build) !== null && _a !== void 0 ? _a : {});
    }
    static async getBuildProfileAsync(accessor, platform, profileName) {
        const easJson = await accessor.readAsync();
        return (0, resolver_1.resolveBuildProfile)({ easJson, platform, profileName });
    }
    static async getBuildProfileDeprecationWarningsAsync(easJsonAccessor, platform, profileName) {
        var _a;
        const warnings = [];
        const buildProfile = await EasJsonUtils.getBuildProfileAsync(easJsonAccessor, platform, profileName);
        const rawEasJson = await easJsonAccessor.readRawJsonAsync();
        if (((_a = buildProfile.cache) === null || _a === void 0 ? void 0 : _a.cacheDefaultPaths) !== undefined) {
            warnings.push({
                message: [
                    `The "build.${profileName}.cache.cacheDefaultPaths" field in eas.json is deprecated and will be removed in the future.`,
                ],
                docsUrl: 'https://docs.expo.dev/build-reference/caching/#ios-dependencies',
            });
        }
        warnings.push(...EasJsonUtils.getCustomPathsDeprecationWarnings(rawEasJson, profileName));
        return warnings;
    }
    static getCustomPathsDeprecationWarnings(rawEasJson, profileName) {
        var _a, _b, _c, _d, _e, _f;
        const warnings = [];
        if (((_c = (_b = (_a = rawEasJson.build) === null || _a === void 0 ? void 0 : _a[profileName]) === null || _b === void 0 ? void 0 : _b.cache) === null || _c === void 0 ? void 0 : _c.customPaths) !== undefined) {
            warnings.push({
                message: [
                    `The "build.${profileName}.cache.customPaths" field in eas.json is deprecated and will be removed in the future. Please use "build.${profileName}.cache.paths" instead.`,
                ],
                docsUrl: 'https://docs.expo.dev/build-reference/eas-json/#cache',
            });
        }
        if (((_e = (_d = rawEasJson.build) === null || _d === void 0 ? void 0 : _d[profileName]) === null || _e === void 0 ? void 0 : _e.extends) !== undefined) {
            warnings.push(...EasJsonUtils.getCustomPathsDeprecationWarnings(rawEasJson, (_f = rawEasJson.build) === null || _f === void 0 ? void 0 : _f[profileName].extends));
        }
        return warnings;
    }
    static async getCliConfigAsync(accessor) {
        var _a;
        try {
            const easJson = await accessor.readAsync();
            return (_a = easJson.cli) !== null && _a !== void 0 ? _a : null;
        }
        catch (err) {
            if (err instanceof errors_1.MissingEasJsonError) {
                return null;
            }
            throw err;
        }
    }
    static async getSubmitProfileNamesAsync(accessor) {
        var _a;
        const easJson = await accessor.readAsync();
        return Object.keys((_a = easJson === null || easJson === void 0 ? void 0 : easJson.submit) !== null && _a !== void 0 ? _a : {});
    }
    static async getSubmitProfileAsync(accessor, platform, profileName) {
        const easJson = await accessor.readAsync();
        const profile = (0, resolver_2.resolveSubmitProfile)({ easJson, platform, profileName });
        const Schema = platform === eas_build_job_1.Platform.ANDROID ? schema_1.AndroidSubmitProfileSchema : schema_1.ResolvedIosSubmitProfileSchema;
        const { value, error } = Schema.validate(profile, {
            allowUnknown: false,
            abortEarly: false,
            convert: true,
        });
        if (error) {
            throw error;
        }
        return value;
    }
}
exports.EasJsonUtils = EasJsonUtils;
