"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveRuntimeVersionAsync = void 0;
const tslib_1 = require("tslib");
const config_plugins_1 = require("@expo/config-plugins");
const projectUtils_1 = require("./projectUtils");
const log_1 = tslib_1.__importDefault(require("../log"));
const expoUpdatesCli_1 = require("../utils/expoUpdatesCli");
async function resolveRuntimeVersionAsync({ exp, platform, projectDir, }) {
    var _a;
    if (!(await (0, projectUtils_1.isModernExpoUpdatesCLIWithRuntimeVersionCommandSupportedAsync)(projectDir))) {
        // fall back to the previous behavior (using the @expo/config-plugins eas-cli dependency rather
        // than the versioned @expo/config-plugins dependency in the project)
        return await config_plugins_1.Updates.getRuntimeVersionNullableAsync(projectDir, exp, platform);
    }
    try {
        const resolvedRuntimeVersionJSONResult = await (0, expoUpdatesCli_1.expoUpdatesCommandAsync)(projectDir, [
            'runtimeversion:resolve',
            '--platform',
            platform,
        ]);
        const runtimeVersionResult = JSON.parse(resolvedRuntimeVersionJSONResult);
        if (runtimeVersionResult.fingerprintSources) {
            log_1.default.debug(`Resolved fingeprint runtime version for platform "${platform}". Sources:`);
            log_1.default.debug(runtimeVersionResult.fingerprintSources);
        }
        return (_a = runtimeVersionResult.runtimeVersion) !== null && _a !== void 0 ? _a : null;
    }
    catch (e) {
        // if expo-updates is not installed, there's no need for a runtime version in the build
        if (e instanceof expoUpdatesCli_1.ExpoUpdatesCLIModuleNotFoundError) {
            return null;
        }
        throw e;
    }
}
exports.resolveRuntimeVersionAsync = resolveRuntimeVersionAsync;
